/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * getSecurity is disabled for browsers.
 */
var getSecurity = function getSecurity() {
  console.warn('This method is only availale in Node runtimes');
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @private
 */
var PICKER_VERSION = '1.4.4';
/**
 * @private
 */

var config;
/* istanbul ignore next */

{
  config = {
    urls: {
      fileApiUrl: 'https://www.filestackapi.com/api/file',
      uploadApiUrl: 'https://upload.filestackapi.com',
      cloudApiUrl: 'https://cloud.filestackapi.com',
      cdnUrl: 'https://cdn.filestackcontent.com',
      pickerUrl: "https://static.filestackapi.com/picker/" + PICKER_VERSION + "/picker.js"
    }
  };
}

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var _extendStatics = function extendStatics(d, b) {
  _extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };

  return _extendStatics(d, b);
};

function __extends(d, b) {
  _extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return _assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

var isFunction = function isFunction(x) {
  return typeof x === 'function';
};

var isNil = function isNil(x) {
  return x === null || x === void 0;
};

var fail = function fail(message) {
  throw new TypeError('[tcomb] ' + message);
};

var getFunctionName = function getFunctionName(f) {
  return f.displayName || f.name || '<function' + f.length + '>';
};

function replacer(key, value) {
  if (typeof value === 'function') {
    return getFunctionName(value);
  }

  return value;
}

var stringify = function stringify(x) {
  try {
    // handle "Converting circular structure to JSON" error
    return JSON.stringify(x, replacer, 2);
  } catch (e) {
    return String(x);
  }
};

function assert(guard, message) {
  if (guard !== true) {
    if (isFunction(message)) {
      // handle lazy messages
      message = message();
    } else if (isNil(message)) {
      // use a default message
      message = 'Assert failed (turn on "Pause on exceptions" in your Source panel)';
    }

    assert.fail(message);
  }
}

assert.fail = fail;
assert.stringify = stringify;
var assert_1 = assert;

var isString = function isString(x) {
  return typeof x === 'string';
};

var isArray = function isArray(x) {
  return Array.isArray ? Array.isArray(x) : x instanceof Array;
};

var isObject = function isObject(x) {
  return !isNil(x) && _typeof(x) === 'object' && !isArray(x);
};

var isType = function isType(x) {
  return isFunction(x) && isObject(x.meta);
};

var getTypeName = function getTypeName(ctor) {
  if (isType(ctor)) {
    return ctor.displayName;
  }

  return getFunctionName(ctor);
};

var forbidNewOperator = function forbidNewOperator(x, type) {
  assert_1(!(x instanceof type), function () {
    return 'Cannot use the new operator to instantiate the type ' + getTypeName(type);
  });
};

var irreducible = function irreducible(name, predicate) {
  {
    assert_1(isString(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to irreducible(name, predicate) (expected a string)';
    });
    assert_1(isFunction(predicate), 'Invalid argument predicate ' + assert_1.stringify(predicate) + ' supplied to irreducible(name, predicate) (expected a function)');
  }

  function Irreducible(value, path) {
    {
      forbidNewOperator(this, Irreducible);
      path = path || [name];
      assert_1(predicate(value), function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/');
      });
    }

    return value;
  }

  Irreducible.meta = {
    kind: 'irreducible',
    name: name,
    predicate: predicate,
    identity: true
  };
  Irreducible.displayName = name;
  Irreducible.is = predicate;
  return Irreducible;
};

var Any = irreducible('Any', function () {
  return true;
});

var _Array = irreducible('Array', isArray);

var isBoolean = function isBoolean(x) {
  return x === true || x === false;
};

var _Boolean = irreducible('Boolean', isBoolean);

var _Date = irreducible('Date', function (x) {
  return x instanceof Date;
});

var _Error = irreducible('Error', function (x) {
  return x instanceof Error;
});

var _Function = irreducible('Function', isFunction);

var Nil = irreducible('Nil', isNil);

var isNumber = function isNumber(x) {
  return typeof x === 'number' && isFinite(x) && !isNaN(x);
};

var _Number = irreducible('Number', isNumber);

var isTypeName = function isTypeName(name) {
  return isNil(name) || isString(name);
};

var isIdentity = function isIdentity(type) {
  if (isType(type)) {
    {
      assert_1(_Boolean.is(type.meta.identity), function () {
        return 'Invalid meta identity ' + assert_1.stringify(type.meta.identity) + ' supplied to type ' + getTypeName(type);
      });
    }

    return type.meta.identity;
  } // for tcomb the other constructors, like ES6 classes, are identity-like


  return true;
};

var create = function create(type, value, path) {
  if (isType(type)) {
    return !type.meta.identity && _typeof(value) === 'object' && value !== null ? new type(value, path) : type(value, path);
  }

  {
    // here type should be a class constructor and value some instance, just check membership and return the value
    path = path || [getFunctionName(type)];
    assert_1(value instanceof type, function () {
      return 'Invalid value ' + stringify(value) + ' supplied to ' + path.join('/');
    });
  }

  return value;
};

var is = function is(x, type) {
  if (isType(type)) {
    return type.is(x);
  }

  return x instanceof type; // type should be a class constructor
};

function getDefaultName(type, predicate) {
  return '{' + getTypeName(type) + ' | ' + getFunctionName(predicate) + '}';
}

function refinement(type, predicate, name) {
  {
    assert_1(isFunction(type), function () {
      return 'Invalid argument type ' + assert_1.stringify(type) + ' supplied to refinement(type, predicate, [name]) combinator (expected a type)';
    });
    assert_1(isFunction(predicate), function () {
      return 'Invalid argument predicate supplied to refinement(type, predicate, [name]) combinator (expected a function)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to refinement(type, predicate, [name]) combinator (expected a string)';
    });
  }

  var displayName = name || getDefaultName(type, predicate);
  var identity = isIdentity(type);

  function Refinement(value, path) {
    {
      if (identity) {
        forbidNewOperator(this, Refinement);
      }

      path = path || [displayName];
    }

    var x = create(type, value, path);

    {
      assert_1(predicate(x), function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/');
      });
    }

    return x;
  }

  Refinement.meta = {
    kind: 'subtype',
    type: type,
    predicate: predicate,
    name: name,
    identity: identity
  };
  Refinement.displayName = displayName;

  Refinement.is = function (x) {
    return is(x, type) && predicate(x);
  };

  Refinement.update = function (instance, patch) {
    return Refinement(assert_1.update(instance, patch));
  };

  return Refinement;
}

refinement.getDefaultName = getDefaultName;
var refinement_1 = refinement;

var Integer = refinement_1(_Number, function (x) {
  return x % 1 === 0;
}, 'Integer');

var _Object = irreducible('Object', isObject);

var _RegExp = irreducible('RegExp', function (x) {
  return x instanceof RegExp;
});

var _String = irreducible('String', isString);

var Type = irreducible('Type', isType);

function getDefaultName$1(domain, codomain) {
  return '{[key: ' + getTypeName(domain) + ']: ' + getTypeName(codomain) + '}';
}

function dict(domain, codomain, name) {
  {
    assert_1(isFunction(domain), function () {
      return 'Invalid argument domain ' + assert_1.stringify(domain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)';
    });
    assert_1(isFunction(codomain), function () {
      return 'Invalid argument codomain ' + assert_1.stringify(codomain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to dict(domain, codomain, [name]) combinator (expected a string)';
    });
  }

  var displayName = name || getDefaultName$1(domain, codomain);
  var domainNameCache = getTypeName(domain);
  var codomainNameCache = getTypeName(codomain);
  var identity = isIdentity(domain) && isIdentity(codomain);

  function Dict(value, path) {

    {
      path = path || [displayName];
      assert_1(isObject(value), function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/');
      });
    }

    var idempotent = true; // will remain true if I can reutilise the input

    var ret = {}; // make a temporary copy, will be discarded if idempotent remains true

    for (var k in value) {
      if (value.hasOwnProperty(k)) {
        k = create(domain, k, path.concat(domainNameCache));
        var actual = value[k];
        var instance = create(codomain, actual, path.concat(k + ': ' + codomainNameCache));
        idempotent = idempotent && actual === instance;
        ret[k] = instance;
      }
    }

    if (idempotent) {
      // implements idempotency
      ret = value;
    }

    {
      Object.freeze(ret);
    }

    return ret;
  }

  Dict.meta = {
    kind: 'dict',
    domain: domain,
    codomain: codomain,
    name: name,
    identity: identity
  };
  Dict.displayName = displayName;

  Dict.is = function (x) {
    if (!isObject(x)) {
      return false;
    }

    for (var k in x) {
      if (x.hasOwnProperty(k)) {
        if (!is(k, domain) || !is(x[k], codomain)) {
          return false;
        }
      }
    }

    return true;
  };

  Dict.update = function (instance, patch) {
    return Dict(assert_1.update(instance, patch));
  };

  return Dict;
}

dict.getDefaultName = getDefaultName$1;
var dict_1 = dict;

var mixin = function mixin(target, source, overwrite) {
  if (isNil(source)) {
    return target;
  }

  for (var k in source) {
    if (source.hasOwnProperty(k)) {
      if (overwrite !== true) {
        {
          assert_1(!target.hasOwnProperty(k) || target[k] === source[k], function () {
            return 'Invalid call to mixin(target, source, [overwrite]): cannot overwrite property "' + k + '" of target object';
          });
        }
      }

      target[k] = source[k];
    }
  }

  return target;
};

var isUnion = function isUnion(x) {
  return isType(x) && x.meta.kind === 'union';
};

// different names when a name was not explicitly provided.

var nextDeclareUniqueId = 1;

var declare = function declare(name) {
  {
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + name + ' supplied to declare([name]) (expected a string)';
    });
  }

  var type;

  function Declare(value, path) {
    {
      assert_1(!isNil(type), function () {
        return 'Type declared but not defined, don\'t forget to call .define on every declared type';
      });

      if (isUnion(type)) {
        assert_1(type.dispatch === Declare.dispatch, function () {
          return 'Please define the custom ' + name + '.dispatch function before calling ' + name + '.define()';
        });
      }
    }

    return type(value, path);
  }

  Declare.define = function (spec) {
    {
      assert_1(isType(spec), function () {
        return 'Invalid argument type ' + assert_1.stringify(spec) + ' supplied to define(type) (expected a type)';
      });
      assert_1(isNil(type), function () {
        return 'Declare.define(type) can only be invoked once';
      }); // assert(isNil(spec.meta.name) && Object.keys(spec.prototype).length === 0, function () { return 'Invalid argument type ' + assert.stringify(spec) + ' supplied to define(type) (expected a fresh, unnamed type)'; });
    }

    if (isUnion(spec) && Declare.hasOwnProperty('dispatch')) {
      spec.dispatch = Declare.dispatch;
    }

    type = spec;
    mixin(Declare, type, true); // true because it overwrites Declare.displayName

    if (name) {
      type.displayName = Declare.displayName = name;
      Declare.meta.name = name;
    }

    Declare.meta.identity = type.meta.identity;
    Declare.prototype = type.prototype;
    return Declare;
  };

  Declare.displayName = name || getTypeName(Declare) + "$" + nextDeclareUniqueId++; // in general I can't say if this type will be an identity, for safety setting to false

  Declare.meta = {
    identity: false
  };
  Declare.prototype = null;
  return Declare;
};

function getDefaultName$2(map) {
  return Object.keys(map).map(function (k) {
    return assert_1.stringify(k);
  }).join(' | ');
}

function enums(map, name) {
  {
    assert_1(isObject(map), function () {
      return 'Invalid argument map ' + assert_1.stringify(map) + ' supplied to enums(map, [name]) combinator (expected a dictionary of String -> String | Number)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to enums(map, [name]) combinator (expected a string)';
    });
  }

  var displayName = name || getDefaultName$2(map);

  function Enums(value, path) {
    {
      forbidNewOperator(this, Enums);
      path = path || [displayName];
      assert_1(Enums.is(value), function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/') + ' (expected one of ' + assert_1.stringify(Object.keys(map)) + ')';
      });
    }

    return value;
  }

  Enums.meta = {
    kind: 'enums',
    map: map,
    name: name,
    identity: true
  };
  Enums.displayName = displayName;

  Enums.is = function (x) {
    return map.hasOwnProperty(x);
  };

  return Enums;
}

enums.of = function (keys, name) {
  keys = isString(keys) ? keys.split(' ') : keys;
  var value = {};
  keys.forEach(function (k) {
    value[k] = k;
  });
  return enums(value, name);
};

enums.getDefaultName = getDefaultName$2;
var enums_1 = enums;

function getDefaultName$3(type) {
  return 'Array<' + getTypeName(type) + '>';
}

function list(type, name) {
  {
    assert_1(isFunction(type), function () {
      return 'Invalid argument type ' + assert_1.stringify(type) + ' supplied to list(type, [name]) combinator (expected a type)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to list(type, [name]) combinator (expected a string)';
    });
  }

  var displayName = name || getDefaultName$3(type);
  var typeNameCache = getTypeName(type);
  var identity = isIdentity(type); // the list is identity iif type is identity

  function List(value, path) {

    {
      path = path || [displayName];
      assert_1(isArray(value), function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of ' + typeNameCache + ')';
      });
    }

    var idempotent = true; // will remain true if I can reutilise the input

    var ret = []; // make a temporary copy, will be discarded if idempotent remains true

    for (var i = 0, len = value.length; i < len; i++) {
      var actual = value[i];
      var instance = create(type, actual, path.concat(i + ': ' + typeNameCache));
      idempotent = idempotent && actual === instance;
      ret.push(instance);
    }

    if (idempotent) {
      // implements idempotency
      ret = value;
    }

    {
      Object.freeze(ret);
    }

    return ret;
  }

  List.meta = {
    kind: 'list',
    type: type,
    name: name,
    identity: identity
  };
  List.displayName = displayName;

  List.is = function (x) {
    return isArray(x) && x.every(function (e) {
      return is(e, type);
    });
  };

  List.update = function (instance, patch) {
    return List(assert_1.update(instance, patch));
  };

  return List;
}

list.getDefaultName = getDefaultName$3;
var list_1 = list;

var isMaybe = function isMaybe(x) {
  return isType(x) && x.meta.kind === 'maybe';
};

function getDefaultName$4(type) {
  return '?' + getTypeName(type);
}

function maybe(type, name) {
  if (isMaybe(type) || type === Any || type === Nil) {
    // makes the combinator idempotent and handle Any, Nil
    return type;
  }

  {
    assert_1(isFunction(type), function () {
      return 'Invalid argument type ' + assert_1.stringify(type) + ' supplied to maybe(type, [name]) combinator (expected a type)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to maybe(type, [name]) combinator (expected a string)';
    });
  }

  var displayName = name || getDefaultName$4(type);
  var identity = isIdentity(type);

  function Maybe(value, path) {
    {
      if (identity) {
        forbidNewOperator(this, Maybe);
      }
    }

    return Nil.is(value) ? value : create(type, value, path);
  }

  Maybe.meta = {
    kind: 'maybe',
    type: type,
    name: name,
    identity: identity
  };
  Maybe.displayName = displayName;

  Maybe.is = function (x) {
    return Nil.is(x) || is(x, type);
  };

  return Maybe;
}

maybe.getDefaultName = getDefaultName$4;
var maybe_1 = maybe;

function getDefaultInterfaceName(props) {
  return '{' + Object.keys(props).map(function (prop) {
    return prop + ': ' + getTypeName(props[prop]);
  }).join(', ') + '}';
}

var getDefaultInterfaceName_1 = getDefaultInterfaceName;

var isStruct = function isStruct(x) {
  return isType(x) && x.meta.kind === 'struct';
};

var isInterface = function isInterface(x) {
  return isType(x) && x.meta.kind === 'interface';
};

function isRefinement(type) {
  return isType(type) && type.meta.kind === 'subtype';
}

function getPredicates(type) {
  return isRefinement(type) ? [type.meta.predicate].concat(getPredicates(type.meta.type)) : [];
}

function getUnrefinedType(type) {
  return isRefinement(type) ? getUnrefinedType(type.meta.type) : type;
}

function decompose(type) {
  return {
    predicates: getPredicates(type),
    unrefinedType: getUnrefinedType(type)
  };
}

var decompose_1 = decompose;

function compose(predicates, unrefinedType, name) {
  var result = predicates.reduce(function (type, predicate) {
    return refinement_1(type, predicate);
  }, unrefinedType);

  if (name) {
    result.displayName = name;
    result.meta.name = name;
  }

  return result;
}

function getProps(type) {
  return isObject(type) ? type : type.meta.props;
}

function getDefaultProps(type) {
  return isObject(type) ? null : type.meta.defaultProps;
}

function pushAll(arr, elements) {
  Array.prototype.push.apply(arr, elements);
}

function extend(combinator, mixins, options) {
  {
    assert_1(isFunction(combinator), function () {
      return 'Invalid argument combinator supplied to extend(combinator, mixins, options), expected a function';
    });
    assert_1(isArray(mixins), function () {
      return 'Invalid argument mixins supplied to extend(combinator, mixins, options), expected an array';
    });
  }

  var props = {};
  var prototype = {};
  var predicates = [];
  var defaultProps = {};
  mixins.forEach(function (x, i) {
    var decomposition = decompose_1(x);
    var unrefinedType = decomposition.unrefinedType;

    {
      assert_1(isObject(unrefinedType) || isStruct(unrefinedType) || isInterface(unrefinedType), function () {
        return 'Invalid argument mixins[' + i + '] supplied to extend(combinator, mixins, options), expected an object, struct, interface or a refinement (of struct or interface)';
      });
    }

    pushAll(predicates, decomposition.predicates);
    mixin(props, getProps(unrefinedType));
    mixin(prototype, unrefinedType.prototype);
    mixin(defaultProps, getDefaultProps(unrefinedType), true);
  });
  options = combinator.getOptions(options);
  options.defaultProps = mixin(defaultProps, options.defaultProps, true);
  var result = compose(predicates, combinator(props, {
    strict: options.strict,
    defaultProps: options.defaultProps
  }), options.name);
  mixin(result.prototype, prototype);
  return result;
}

var extend_1 = extend;

function getDefaultName$5(props) {
  return 'Struct' + getDefaultInterfaceName_1(props);
}

function extendStruct(mixins, name) {
  return extend_1(struct, mixins, name);
}

function getOptions(options) {
  if (!isObject(options)) {
    options = isNil(options) ? {} : {
      name: options
    };
  }

  if (!options.hasOwnProperty('strict')) {
    options.strict = struct.strict;
  }

  if (!options.hasOwnProperty('defaultProps')) {
    options.defaultProps = {};
  }

  return options;
}

function struct(props, options) {
  options = getOptions(options);
  var name = options.name;
  var strict = options.strict;
  var defaultProps = options.defaultProps;

  {
    assert_1(dict_1(_String, _Function).is(props), function () {
      return 'Invalid argument props ' + assert_1.stringify(props) + ' supplied to struct(props, [options]) combinator (expected a dictionary String -> Type)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to struct(props, [options]) combinator (expected a string)';
    });
    assert_1(isBoolean(strict), function () {
      return 'Invalid argument strict ' + assert_1.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)';
    });
    assert_1(isObject(defaultProps), function () {
      return 'Invalid argument defaultProps ' + assert_1.stringify(defaultProps) + ' supplied to struct(props, [options]) combinator (expected an object)';
    });
  }

  var displayName = name || getDefaultName$5(props);

  function Struct(value, path) {
    if (Struct.is(value)) {
      // implements idempotency
      return value;
    }

    {
      path = path || [displayName];
      assert_1(isObject(value), function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an object)';
      }); // strictness

      if (strict) {
        for (k in value) {
          if (value.hasOwnProperty(k)) {
            assert_1(props.hasOwnProperty(k), function () {
              return 'Invalid additional prop "' + k + '" supplied to ' + path.join('/');
            });
          }
        }
      }
    }

    if (!(this instanceof Struct)) {
      // `new` is optional
      return new Struct(value, path);
    }

    for (var k in props) {
      if (props.hasOwnProperty(k)) {
        var expected = props[k];
        var actual = value[k]; // apply defaults

        if (actual === undefined) {
          actual = defaultProps[k];
        }

        this[k] = create(expected, actual, path.concat(k + ': ' + getTypeName(expected)));
      }
    }

    {
      Object.freeze(this);
    }
  }

  Struct.meta = {
    kind: 'struct',
    props: props,
    name: name,
    identity: false,
    strict: strict,
    defaultProps: defaultProps
  };
  Struct.displayName = displayName;

  Struct.is = function (x) {
    return x instanceof Struct;
  };

  Struct.update = function (instance, patch) {
    return new Struct(assert_1.update(instance, patch));
  };

  Struct.extend = function (xs, name) {
    return extendStruct([Struct].concat(xs), name);
  };

  return Struct;
}

struct.strict = false;
struct.getOptions = getOptions;
struct.getDefaultName = getDefaultName$5;
struct.extend = extendStruct;
var struct_1 = struct;

function getDefaultName$6(types) {
  return '[' + types.map(getTypeName).join(', ') + ']';
}

function tuple(types, name) {
  {
    assert_1(isArray(types) && types.every(isFunction), function () {
      return 'Invalid argument types ' + assert_1.stringify(types) + ' supplied to tuple(types, [name]) combinator (expected an array of types)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to tuple(types, [name]) combinator (expected a string)';
    });
  }

  var displayName = name || getDefaultName$6(types);
  var identity = types.every(isIdentity);

  function Tuple(value, path) {

    {
      path = path || [displayName];
      assert_1(isArray(value) && value.length === types.length, function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of length ' + types.length + ')';
      });
    }

    var idempotent = true;
    var ret = [];

    for (var i = 0, len = types.length; i < len; i++) {
      var expected = types[i];
      var actual = value[i];
      var instance = create(expected, actual, path.concat(i + ': ' + getTypeName(expected)));
      idempotent = idempotent && actual === instance;
      ret.push(instance);
    }

    if (idempotent) {
      // implements idempotency
      ret = value;
    }

    {
      Object.freeze(ret);
    }

    return ret;
  }

  Tuple.meta = {
    kind: 'tuple',
    types: types,
    name: name,
    identity: identity
  };
  Tuple.displayName = displayName;

  Tuple.is = function (x) {
    return isArray(x) && x.length === types.length && types.every(function (type, i) {
      return is(x[i], type);
    });
  };

  Tuple.update = function (instance, patch) {
    return Tuple(assert_1.update(instance, patch));
  };

  return Tuple;
}

tuple.getDefaultName = getDefaultName$6;
var tuple_1 = tuple;

function getDefaultName$7(types) {
  return types.map(getTypeName).join(' | ');
}

function union(types, name) {
  {
    assert_1(isArray(types) && types.every(isFunction) && types.length >= 2, function () {
      return 'Invalid argument types ' + assert_1.stringify(types) + ' supplied to union(types, [name]) combinator (expected an array of at least 2 types)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to union(types, [name]) combinator (expected a string)';
    });
  }

  var displayName = name || getDefaultName$7(types);
  var identity = types.every(isIdentity);

  function Union(value, path) {

    var type = Union.dispatch(value);

    if (!type && Union.is(value)) {
      return value;
    }

    {
      if (identity) {
        forbidNewOperator(this, Union);
      }

      path = path || [displayName];
      assert_1(isFunction(type), function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/') + ' (no constructor returned by dispatch)';
      });
      path[path.length - 1] += '(' + getTypeName(type) + ')';
    }

    return create(type, value, path);
  }

  Union.meta = {
    kind: 'union',
    types: types,
    name: name,
    identity: identity
  };
  Union.displayName = displayName;

  Union.is = function (x) {
    return types.some(function (type) {
      return is(x, type);
    });
  };

  Union.dispatch = function (x) {
    // default dispatch implementation
    for (var i = 0, len = types.length; i < len; i++) {
      var type = types[i];

      if (isUnion(type)) {
        // handle union of unions
        var t = type.dispatch(x);

        if (!isNil(t)) {
          return t;
        }
      } else if (is(x, type)) {
        return type;
      }
    }
  };

  Union.update = function (instance, patch) {
    return Union(assert_1.update(instance, patch));
  };

  return Union;
}

union.getDefaultName = getDefaultName$7;
var union_1 = union;

function getDefaultName$8(domain, codomain) {
  return '(' + domain.map(getTypeName).join(', ') + ') => ' + getTypeName(codomain);
}

function isInstrumented(f) {
  return _Function.is(f) && isObject(f.instrumentation);
}

function getOptionalArgumentsIndex(types) {
  var end = types.length;
  var areAllMaybes = false;

  for (var i = end - 1; i >= 0; i--) {
    var type = types[i];

    if (!isType(type) || type.meta.kind !== 'maybe') {
      return i + 1;
    } else {
      areAllMaybes = true;
    }
  }

  return areAllMaybes ? 0 : end;
}

function func(domain, codomain, name) {
  domain = isArray(domain) ? domain : [domain]; // handle handy syntax for unary functions

  {
    assert_1(list_1(_Function).is(domain), function () {
      return 'Invalid argument domain ' + assert_1.stringify(domain) + ' supplied to func(domain, codomain, [name]) combinator (expected an array of types)';
    });
    assert_1(_Function.is(codomain), function () {
      return 'Invalid argument codomain ' + assert_1.stringify(codomain) + ' supplied to func(domain, codomain, [name]) combinator (expected a type)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to func(domain, codomain, [name]) combinator (expected a string)';
    });
  }

  var displayName = name || getDefaultName$8(domain, codomain);
  var domainLength = domain.length;
  var optionalArgumentsIndex = getOptionalArgumentsIndex(domain);

  function FuncType(value, path) {
    if (!isInstrumented(value)) {
      // automatically instrument the function
      return FuncType.of(value);
    }

    {
      path = path || [displayName];
      assert_1(FuncType.is(value), function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/');
      });
    }

    return value;
  }

  FuncType.meta = {
    kind: 'func',
    domain: domain,
    codomain: codomain,
    name: name,
    identity: true
  };
  FuncType.displayName = displayName;

  FuncType.is = function (x) {
    return isInstrumented(x) && x.instrumentation.domain.length === domainLength && x.instrumentation.domain.every(function (type, i) {
      return type === domain[i];
    }) && x.instrumentation.codomain === codomain;
  };

  FuncType.of = function (f, curried) {
    {
      assert_1(_Function.is(f), function () {
        return 'Invalid argument f supplied to func.of ' + displayName + ' (expected a function)';
      });
      assert_1(isNil(curried) || isBoolean(curried), function () {
        return 'Invalid argument curried ' + assert_1.stringify(curried) + ' supplied to func.of ' + displayName + ' (expected a boolean)';
      });
    }

    if (FuncType.is(f)) {
      // makes FuncType.of idempotent
      return f;
    }

    function fn() {
      var args = Array.prototype.slice.call(arguments);
      var argsLength = args.length;

      {
        // type-check arguments
        var tupleLength = curried ? argsLength : Math.max(argsLength, optionalArgumentsIndex);
        tuple_1(domain.slice(0, tupleLength), 'arguments of function ' + displayName)(args);
      }

      if (curried && argsLength < domainLength) {
        {
          assert_1(argsLength > 0, 'Invalid arguments.length = 0 for curried function ' + displayName);
        }

        var g = Function.prototype.bind.apply(f, [this].concat(args));
        var newDomain = func(domain.slice(argsLength), codomain);
        return newDomain.of(g, true);
      } else {
        return create(codomain, f.apply(this, args));
      }
    }

    fn.instrumentation = {
      domain: domain,
      codomain: codomain,
      f: f
    };
    fn.displayName = getFunctionName(f);
    return fn;
  };

  return FuncType;
}

func.getDefaultName = getDefaultName$8;
func.getOptionalArgumentsIndex = getOptionalArgumentsIndex;
var func_1 = func;

var isIdentity$1 = isIdentity;

function getDefaultName$9(types) {
  return types.map(getTypeName).join(' & ');
}

function intersection(types, name) {
  {
    assert_1(isArray(types) && types.every(isFunction) && types.length >= 2, function () {
      return 'Invalid argument types ' + assert_1.stringify(types) + ' supplied to intersection(types, [name]) combinator (expected an array of at least 2 types)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to intersection(types, [name]) combinator (expected a string)';
    });
  }

  var displayName = name || getDefaultName$9(types);
  var identity = types.every(isIdentity$1);

  function Intersection(value, path) {
    {
      if (identity) {
        isIdentity(this, Intersection);
      }

      path = path || [displayName];
      assert_1(Intersection.is(value), function () {
        return 'Invalid value ' + assert_1.stringify(value) + ' supplied to ' + path.join('/');
      });
    }

    return value;
  }

  Intersection.meta = {
    kind: 'intersection',
    types: types,
    name: name,
    identity: identity
  };
  Intersection.displayName = displayName;

  Intersection.is = function (x) {
    return types.every(function (type) {
      return is(x, type);
    });
  };

  Intersection.update = function (instance, patch) {
    return Intersection(assert_1.update(instance, patch));
  };

  return Intersection;
}

intersection.getDefaultName = getDefaultName$9;
var intersection_1 = intersection;

function assign(x, y) {
  for (var k in y) {
    if (y.hasOwnProperty(k)) {
      x[k] = y[k];
    }
  }

  return x;
}

var assign_1 = assign;

function extendInterface(mixins, name) {
  return extend_1(inter, mixins, name);
}

function getOptions$1(options) {
  if (!isObject(options)) {
    options = isNil(options) ? {} : {
      name: options
    };
  }

  if (!options.hasOwnProperty('strict')) {
    options.strict = inter.strict;
  }

  return options;
}

function inter(props, options) {
  options = getOptions$1(options);
  var name = options.name;
  var strict = options.strict;

  {
    assert_1(dict_1(_String, _Function).is(props), function () {
      return 'Invalid argument props ' + assert_1.stringify(props) + ' supplied to interface(props, [options]) combinator (expected a dictionary String -> Type)';
    });
    assert_1(isTypeName(name), function () {
      return 'Invalid argument name ' + assert_1.stringify(name) + ' supplied to interface(props, [options]) combinator (expected a string)';
    });
    assert_1(isBoolean(strict), function () {
      return 'Invalid argument strict ' + assert_1.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)';
    });
  }

  var displayName = name || getDefaultInterfaceName_1(props);
  var identity = Object.keys(props).map(function (prop) {
    return props[prop];
  }).every(isIdentity);

  function Interface(value, path) {

    {
      path = path || [displayName];
      assert_1(!isNil(value), function () {
        return 'Invalid value ' + value + ' supplied to ' + path.join('/');
      }); // strictness

      if (strict) {
        for (var k in value) {
          assert_1(props.hasOwnProperty(k), function () {
            return 'Invalid additional prop "' + k + '" supplied to ' + path.join('/');
          });
        }
      }
    }

    var idempotent = true;
    var ret = identity ? {} : assign_1({}, value);

    for (var prop in props) {
      var expected = props[prop];
      var actual = value[prop];
      var instance = create(expected, actual, path.concat(prop + ': ' + getTypeName(expected)));
      idempotent = idempotent && actual === instance;
      ret[prop] = instance;
    }

    if (idempotent) {
      // implements idempotency
      ret = value;
    }

    {
      Object.freeze(ret);
    }

    return ret;
  }

  Interface.meta = {
    kind: 'interface',
    props: props,
    name: name,
    identity: identity,
    strict: strict
  };
  Interface.displayName = displayName;

  Interface.is = function (x) {
    if (isNil(x)) {
      return false;
    }

    if (strict) {
      for (var k in x) {
        if (!props.hasOwnProperty(k)) {
          return false;
        }
      }
    }

    for (var prop in props) {
      if (!is(x[prop], props[prop])) {
        return false;
      }
    }

    return true;
  };

  Interface.update = function (instance, patch) {
    return Interface(assert_1.update(instance, patch));
  };

  Interface.extend = function (xs, name) {
    return extendInterface([Interface].concat(xs), name);
  };

  return Interface;
}

inter.strict = false;
inter.getOptions = getOptions$1;
inter.getDefaultName = getDefaultInterfaceName_1;
inter.extend = extendInterface;
var _interface = inter;

function getShallowCopy(x) {
  if (isObject(x)) {
    if (x instanceof Date || x instanceof RegExp) {
      return x;
    }

    return assign_1({}, x);
  }

  if (isArray(x)) {
    return x.concat();
  }

  return x;
}

function isCommand(k) {
  return update.commands.hasOwnProperty(k);
}

function getCommand(k) {
  return update.commands[k];
}

function update(instance, patch) {
  {
    assert_1(isObject(patch), function () {
      return 'Invalid argument patch ' + assert_1.stringify(patch) + ' supplied to function update(instance, patch): expected an object containing commands';
    });
  }

  var value = instance;
  var isChanged = false;
  var newValue;

  for (var k in patch) {
    if (patch.hasOwnProperty(k)) {
      if (isCommand(k)) {
        newValue = getCommand(k)(patch[k], value);

        if (newValue !== instance) {
          isChanged = true;
          value = newValue;
        } else {
          value = instance;
        }
      } else {
        if (value === instance) {
          value = getShallowCopy(instance);
        }

        newValue = update(value[k], patch[k]);
        isChanged = isChanged || newValue !== value[k];
        value[k] = newValue;
      }
    }
  }

  return isChanged ? value : instance;
} // built-in commands


function $apply(f, value) {
  {
    assert_1(isFunction(f), 'Invalid argument f supplied to immutability helper { $apply: f } (expected a function)');
  }

  return f(value);
}

function $push(elements, arr) {
  {
    assert_1(isArray(elements), 'Invalid argument elements supplied to immutability helper { $push: elements } (expected an array)');
    assert_1(isArray(arr), 'Invalid value supplied to immutability helper $push (expected an array)');
  }

  if (elements.length > 0) {
    return arr.concat(elements);
  }

  return arr;
}

function $remove(keys, obj) {
  {
    assert_1(isArray(keys), 'Invalid argument keys supplied to immutability helper { $remove: keys } (expected an array)');
    assert_1(isObject(obj), 'Invalid value supplied to immutability helper $remove (expected an object)');
  }

  if (keys.length > 0) {
    obj = getShallowCopy(obj);

    for (var i = 0, len = keys.length; i < len; i++) {
      delete obj[keys[i]];
    }
  }

  return obj;
}

function $set(value) {
  return value;
}

function $splice(splices, arr) {
  {
    assert_1(isArray(splices) && splices.every(isArray), 'Invalid argument splices supplied to immutability helper { $splice: splices } (expected an array of arrays)');
    assert_1(isArray(arr), 'Invalid value supplied to immutability helper $splice (expected an array)');
  }

  if (splices.length > 0) {
    arr = getShallowCopy(arr);
    return splices.reduce(function (acc, splice) {
      acc.splice.apply(acc, splice);
      return acc;
    }, arr);
  }

  return arr;
}

function $swap(config, arr) {
  {
    assert_1(isObject(config), 'Invalid argument config supplied to immutability helper { $swap: config } (expected an object)');
    assert_1(isNumber(config.from), 'Invalid argument config.from supplied to immutability helper { $swap: config } (expected a number)');
    assert_1(isNumber(config.to), 'Invalid argument config.to supplied to immutability helper { $swap: config } (expected a number)');
    assert_1(isArray(arr), 'Invalid value supplied to immutability helper $swap (expected an array)');
  }

  if (config.from !== config.to) {
    arr = getShallowCopy(arr);
    var element = arr[config.to];
    arr[config.to] = arr[config.from];
    arr[config.from] = element;
  }

  return arr;
}

function $unshift(elements, arr) {
  {
    assert_1(isArray(elements), 'Invalid argument elements supplied to immutability helper {$unshift: elements} (expected an array)');
    assert_1(isArray(arr), 'Invalid value supplied to immutability helper $unshift (expected an array)');
  }

  if (elements.length > 0) {
    return elements.concat(arr);
  }

  return arr;
}

function $merge(whatToMerge, value) {
  var isChanged = false;
  var result = getShallowCopy(value);

  for (var k in whatToMerge) {
    if (whatToMerge.hasOwnProperty(k)) {
      result[k] = whatToMerge[k];
      isChanged = isChanged || result[k] !== value[k];
    }
  }

  return isChanged ? result : value;
}

update.commands = {
  $apply: $apply,
  $push: $push,
  $remove: $remove,
  $set: $set,
  $splice: $splice,
  $swap: $swap,
  $unshift: $unshift,
  $merge: $merge
};
var update_1 = update;

var match = function match(x) {
  var type, guard, f, count;

  for (var i = 1, len = arguments.length; i < len;) {
    type = arguments[i];
    guard = arguments[i + 1];
    f = arguments[i + 2];

    if (isFunction(f) && !isType(f)) {
      i = i + 3;
    } else {
      f = guard;
      guard = Any.is;
      i = i + 2;
    }

    {
      count = (count || 0) + 1;
      assert_1(isType(type), function () {
        return 'Invalid type in clause #' + count;
      });
      assert_1(isFunction(guard), function () {
        return 'Invalid guard in clause #' + count;
      });
      assert_1(isFunction(f), function () {
        return 'Invalid block in clause #' + count;
      });
    }

    if (type.is(x) && guard(x)) {
      return f(x);
    }
  }

  assert_1.fail('Match error');
};

/*! @preserve
 *
 * tcomb.js - Type checking and DDD for JavaScript
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2016 Giulio Canti
 *
 */
// core
// types

assert_1.Any = Any;
assert_1.Array = _Array;
assert_1.Boolean = _Boolean;
assert_1.Date = _Date;
assert_1.Error = _Error;
assert_1.Function = _Function;
assert_1.Nil = Nil;
assert_1.Number = _Number;
assert_1.Integer = Integer;
assert_1.IntegerT = assert_1.Integer;
assert_1.Object = _Object;
assert_1.RegExp = _RegExp;
assert_1.String = _String;
assert_1.Type = Type;
assert_1.TypeT = assert_1.Type; // short alias are deprecated

assert_1.Arr = assert_1.Array;
assert_1.Bool = assert_1.Boolean;
assert_1.Dat = assert_1.Date;
assert_1.Err = assert_1.Error;
assert_1.Func = assert_1.Function;
assert_1.Num = assert_1.Number;
assert_1.Obj = assert_1.Object;
assert_1.Re = assert_1.RegExp;
assert_1.Str = assert_1.String; // combinators

assert_1.dict = dict_1;
assert_1.declare = declare;
assert_1.enums = enums_1;
assert_1.irreducible = irreducible;
assert_1.list = list_1;
assert_1.maybe = maybe_1;
assert_1.refinement = refinement_1;
assert_1.struct = struct_1;
assert_1.tuple = tuple_1;
assert_1.union = union_1;
assert_1.func = func_1;
assert_1.intersection = intersection_1;
assert_1.subtype = assert_1.refinement;
assert_1.inter = _interface; // IE8 alias

assert_1['interface'] = assert_1.inter; // functions

assert_1.assert = assert_1;
assert_1.update = update_1;
assert_1.mixin = mixin;
assert_1.isType = isType;
assert_1.is = is;
assert_1.getTypeName = getTypeName;
assert_1.match = match;
var tcomb = assert_1;

var stringify$1 = tcomb.stringify;
var noobj = {};
var ValidationError = tcomb.struct({
  message: tcomb.Any,
  actual: tcomb.Any,
  expected: tcomb.Any,
  path: tcomb.list(tcomb.union([tcomb.String, tcomb.Number]))
}, 'ValidationError');

function getDefaultValidationErrorMessage(actual, expected, path) {
  var expectedName = tcomb.getTypeName(expected);
  var to = path.length ? '/' + path.join('/') + ': ' + expectedName : expectedName;
  return 'Invalid value ' + stringify$1(actual) + ' supplied to ' + to;
}

function getValidationErrorMessage(actual, expected, path, context) {
  if (tcomb.Function.is(expected.getValidationErrorMessage)) {
    return expected.getValidationErrorMessage(actual, path, context);
  } else {
    return getDefaultValidationErrorMessage(actual, expected, path);
  }
}

ValidationError.of = function (actual, expected, path, context) {
  return new ValidationError({
    message: getValidationErrorMessage(actual, expected, path, context),
    actual: actual,
    expected: expected,
    path: path
  });
};

var ValidationResult = tcomb.struct({
  errors: tcomb.list(ValidationError),
  value: tcomb.Any
}, 'ValidationResult');

ValidationResult.prototype.isValid = function () {
  return !this.errors.length;
};

ValidationResult.prototype.firstError = function () {
  return this.isValid() ? null : this.errors[0];
};

ValidationResult.prototype.toString = function () {
  if (this.isValid()) {
    return '[ValidationResult, true, ' + stringify$1(this.value) + ']';
  } else {
    return '[ValidationResult, false, (' + this.errors.map(function (err) {
      return stringify$1(err.message);
    }).join(', ') + ')]';
  }
};

function validate(x, type, options) {
  options = options || {};
  var path = tcomb.Array.is(options) ? options : options.path || [];
  return new ValidationResult(recurse(x, type, path, options));
}

function recurse(x, type, path, options) {
  if (tcomb.isType(type)) {
    return validators[type.meta.kind](x, type, path, options);
  } else {
    return validators.es6classes(x, type, path, options);
  }
}

var validators = validate.validators = {};

validators.es6classes = function validateES6Classes(x, type, path, options) {
  return {
    value: x,
    errors: x instanceof type ? [] : [ValidationError.of(x, type, path, options.context)]
  };
}; // irreducibles and enums


validators.irreducible = validators.enums = function validateIrreducible(x, type, path, options) {
  return {
    value: x,
    errors: type.is(x) ? [] : [ValidationError.of(x, type, path, options.context)]
  };
};

validators.list = function validateList(x, type, path, options) {
  // x should be an array
  if (!tcomb.Array.is(x)) {
    return {
      value: x,
      errors: [ValidationError.of(x, type, path, options.context)]
    };
  }

  var ret = {
    value: [],
    errors: []
  }; // every item should be of type `type.meta.type`

  for (var i = 0, len = x.length; i < len; i++) {
    var item = recurse(x[i], type.meta.type, path.concat(i), options);
    ret.value[i] = item.value;
    ret.errors = ret.errors.concat(item.errors);
  }

  return ret;
};

validators.subtype = function validateSubtype(x, type, path, options) {
  // x should be a valid inner type
  var ret = recurse(x, type.meta.type, path, options);

  if (ret.errors.length) {
    return ret;
  } // x should satisfy the predicate


  if (!type.meta.predicate(ret.value)) {
    ret.errors = [ValidationError.of(x, type, path, options.context)];
  }

  return ret;
};

validators.maybe = function validateMaybe(x, type, path, options) {
  return tcomb.Nil.is(x) ? {
    value: x,
    errors: []
  } : recurse(x, type.meta.type, path, options);
};

validators.struct = function validateStruct(x, type, path, options) {
  // x should be an object
  if (!tcomb.Object.is(x)) {
    return {
      value: x,
      errors: [ValidationError.of(x, type, path, options.context)]
    };
  } // [optimization]


  if (type.is(x)) {
    return {
      value: x,
      errors: []
    };
  }

  var ret = {
    value: {},
    errors: []
  };
  var props = type.meta.props;
  var defaultProps = type.meta.defaultProps || noobj; // every item should be of type `props[name]`

  for (var name in props) {
    if (props.hasOwnProperty(name)) {
      var actual = x[name]; // apply defaults

      if (actual === undefined) {
        actual = defaultProps[name];
      }

      var prop = recurse(actual, props[name], path.concat(name), options);
      ret.value[name] = prop.value;
      ret.errors = ret.errors.concat(prop.errors);
    }
  }

  var strict = options.hasOwnProperty('strict') ? options.strict : type.meta.strict;

  if (strict) {
    for (var field in x) {
      if (x.hasOwnProperty(field) && !props.hasOwnProperty(field)) {
        ret.errors.push(ValidationError.of(x[field], tcomb.Nil, path.concat(field), options.context));
      }
    }
  }

  if (!ret.errors.length) {
    ret.value = new type(ret.value);
  }

  return ret;
};

validators.tuple = function validateTuple(x, type, path, options) {
  var types = type.meta.types;
  var len = types.length; // x should be an array of at most `len` items

  if (!tcomb.Array.is(x) || x.length > len) {
    return {
      value: x,
      errors: [ValidationError.of(x, type, path, options.context)]
    };
  }

  var ret = {
    value: [],
    errors: []
  }; // every item should be of type `types[i]`

  for (var i = 0; i < len; i++) {
    var item = recurse(x[i], types[i], path.concat(i), options);
    ret.value[i] = item.value;
    ret.errors = ret.errors.concat(item.errors);
  }

  return ret;
};

validators.dict = function validateDict(x, type, path, options) {
  // x should be an object
  if (!tcomb.Object.is(x)) {
    return {
      value: x,
      errors: [ValidationError.of(x, type, path, options.context)]
    };
  }

  var ret = {
    value: {},
    errors: []
  }; // every key should be of type `domain`
  // every value should be of type `codomain`

  for (var k in x) {
    if (x.hasOwnProperty(k)) {
      var subpath = path.concat(k);
      var key = recurse(k, type.meta.domain, subpath, options);
      var item = recurse(x[k], type.meta.codomain, subpath, options);
      ret.value[k] = item.value;
      ret.errors = ret.errors.concat(key.errors, item.errors);
    }
  }

  return ret;
};

validators.union = function validateUnion(x, type, path, options) {
  var ctor = type.dispatch(x);
  return tcomb.Function.is(ctor) ? recurse(x, ctor, path.concat(type.meta.types.indexOf(ctor)), options) : {
    value: x,
    errors: [ValidationError.of(x, type, path, options.context)]
  };
};

validators.intersection = function validateIntersection(x, type, path, options) {
  var types = type.meta.types;
  var len = types.length;
  var ret = {
    value: x,
    errors: []
  };
  var nrOfStructs = 0; // x should be of type `types[i]` for all i

  for (var i = 0; i < len; i++) {
    if (types[i].meta.kind === 'struct') {
      nrOfStructs++;
    }

    var item = recurse(x, types[i], path, options);
    ret.errors = ret.errors.concat(item.errors);
  }

  if (nrOfStructs > 1) {
    ret.errors.push(ValidationError.of(x, type, path, options.context));
  }

  return ret;
};

validators['interface'] = function validateInterface(x, type, path, options) {
  // eslint-disable-line dot-notation
  // x should be an object
  if (!tcomb.Object.is(x)) {
    return {
      value: x,
      errors: [ValidationError.of(x, type, path, options.context)]
    };
  }

  var ret = {
    value: {},
    errors: []
  };
  var props = type.meta.props; // every item should be of type `props[name]`

  for (var name in props) {
    var prop = recurse(x[name], props[name], path.concat(name), options);
    ret.value[name] = prop.value;
    ret.errors = ret.errors.concat(prop.errors);
  }

  var strict = options.hasOwnProperty('strict') ? options.strict : type.meta.strict;

  if (strict) {
    for (var field in x) {
      if (!props.hasOwnProperty(field) && !tcomb.Nil.is(x[field])) {
        ret.errors.push(ValidationError.of(x[field], tcomb.Nil, path.concat(field), options.context));
      }
    }
  }

  return ret;
};

tcomb.mixin(tcomb, {
  ValidationError: ValidationError,
  ValidationResult: ValidationResult,
  validate: validate
});
var tcombValidation = tcomb;
var tcombValidation_1 = tcombValidation.Boolean;
var tcombValidation_2 = tcombValidation.Function;
var tcombValidation_3 = tcombValidation.Integer;
var tcombValidation_4 = tcombValidation.Number;
var tcombValidation_5 = tcombValidation.String;
var tcombValidation_6 = tcombValidation.enums;
var tcombValidation_7 = tcombValidation.refinement;
var tcombValidation_8 = tcombValidation.union;
var tcombValidation_10 = tcombValidation.struct;
var tcombValidation_11 = tcombValidation.validate;
var tcombValidation_13 = tcombValidation.list;

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var componentEmitter = createCommonjsModule(function (module) {
  /**
   * Expose `Emitter`.
   */
  {
    module.exports = Emitter;
  }
  /**
   * Initialize a new `Emitter`.
   *
   * @api public
   */


  function Emitter(obj) {
    if (obj) return mixin(obj);
  }
  /**
   * Mixin the emitter properties.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }

    return obj;
  }
  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */


  Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
    return this;
  };
  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */


  Emitter.prototype.once = function (event, fn) {
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };
  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */


  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {}; // all

    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    } // specific event


    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this; // remove all handlers

    if (1 == arguments.length) {
      delete this._callbacks['$' + event];
      return this;
    } // remove specific handler


    var cb;

    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];

      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }

    return this;
  };
  /**
   * Emit `event` with the given args.
   *
   * @param {String} event
   * @param {Mixed} ...
   * @return {Emitter}
   */


  Emitter.prototype.emit = function (event) {
    this._callbacks = this._callbacks || {};
    var args = [].slice.call(arguments, 1),
        callbacks = this._callbacks['$' + event];

    if (callbacks) {
      callbacks = callbacks.slice(0);

      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };
  /**
   * Return array of callbacks for `event`.
   *
   * @param {String} event
   * @return {Array}
   * @api public
   */


  Emitter.prototype.listeners = function (event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks['$' + event] || [];
  };
  /**
   * Check if this emitter has `event` handlers.
   *
   * @param {String} event
   * @return {Boolean}
   * @api public
   */


  Emitter.prototype.hasListeners = function (event) {
    return !!this.listeners(event).length;
  };
});

function isObject$1(obj) {
  return null !== obj && 'object' === _typeof(obj);
}

var isObject_1 = isObject$1;

/**
 * Module of mixed-in functions shared between node and client code
 */

/**
 * Expose `RequestBase`.
 */


var requestBase = RequestBase;
/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin$1(obj);
}
/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */


function mixin$1(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }

  return obj;
}
/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.clearTimeout = function _clearTimeout() {
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};
/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */


RequestBase.prototype.parse = function parse(fn) {
  this._parser = fn;
  return this;
};
/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.responseType = function (val) {
  this._responseType = val;
  return this;
};
/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */


RequestBase.prototype.serialize = function serialize(fn) {
  this._serializer = fn;
  return this;
};
/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, deadline}
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.timeout = function timeout(options) {
  if (!options || 'object' !== _typeof(options)) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for (var option in options) {
    switch (option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;

      case 'response':
        this._responseTimeout = options.response;
        break;

      default:
        console.warn("Unknown timeout option", option);
    }
  }

  return this;
};
/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @param {Function} [fn]
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.retry = function retry(count, fn) {
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  this._retryCallback = fn;
  return this;
};

var ERROR_CODES = ['ECONNRESET', 'ETIMEDOUT', 'EADDRINFO', 'ESOCKETTIMEDOUT'];
/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */

RequestBase.prototype._shouldRetry = function (err, res) {
  if (!this._maxRetries || this._retries++ >= this._maxRetries) {
    return false;
  }

  if (this._retryCallback) {
    try {
      var override = this._retryCallback(err, res);

      if (override === true) return true;
      if (override === false) return false; // undefined falls back to defaults
    } catch (e) {
      console.error(e);
    }
  }

  if (res && res.status && res.status >= 500 && res.status != 501) return true;

  if (err) {
    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true; // Superagent timeout

    if (err.timeout && err.code == 'ECONNABORTED') return true;
    if (err.crossDomain) return true;
  }

  return false;
};
/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */


RequestBase.prototype._retry = function () {
  this.clearTimeout(); // node

  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;
  return this._end();
};
/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */


RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;

    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }

    this._fullfilledPromise = new Promise(function (innerResolve, innerReject) {
      self.end(function (err, res) {
        if (err) innerReject(err);else innerResolve(res);
      });
    });
  }

  return this._fullfilledPromise.then(resolve, reject);
};

RequestBase.prototype['catch'] = function (cb) {
  return this.then(undefined, cb);
};
/**
 * Allow for extension
 */


RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
};

RequestBase.prototype.ok = function (cb) {
  if ('function' !== typeof cb) throw Error("Callback required");
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function (res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};
/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */


RequestBase.prototype.get = function (field) {
  return this._header[field.toLowerCase()];
};
/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */


RequestBase.prototype.getHeader = RequestBase.prototype.get;
/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function (field, val) {
  if (isObject_1(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }

    return this;
  }

  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};
/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */


RequestBase.prototype.unset = function (field) {
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};
/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.field = function (name, val) {
  // name should be either a string or an object.
  if (null === name || undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject_1(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }

    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }

    return this;
  } // val should be defined now


  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }

  if ('boolean' === typeof val) {
    val = '' + val;
  }

  this._getFormData().append(name, val);

  return this;
};
/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */


RequestBase.prototype.abort = function () {
  if (this._aborted) {
    return this;
  }

  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser

  this.req && this.req.abort(); // node

  this.clearTimeout();
  this.emit('abort');
  return this;
};

RequestBase.prototype._auth = function (user, pass, options, base64Encoder) {
  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));
      break;

    case 'auto':
      this.username = user;
      this.password = pass;
      break;

    case 'bearer':
      // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
      break;
  }

  return this;
};
/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */


RequestBase.prototype.withCredentials = function (on) {
  // This is browser-only functionality. Node side is no-op.
  if (on == undefined) on = true;
  this._withCredentials = on;
  return this;
};
/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.redirects = function (n) {
  this._maxRedirects = n;
  return this;
};
/**
 * Maximum size of buffered response body, in bytes. Counts uncompressed size.
 * Default 200MB.
 *
 * @param {Number} n
 * @return {Request} for chaining
 */


RequestBase.prototype.maxResponseSize = function (n) {
  if ('number' !== typeof n) {
    throw TypeError("Invalid argument");
  }

  this._maxResponseSize = n;
  return this;
};
/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */


RequestBase.prototype.toJSON = function () {
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header
  };
};
/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.send = function (data) {
  var isObj = isObject_1(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  } // merge


  if (isObj && isObject_1(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];

    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data ? this._data + '&' + data : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  } // default to json


  if (!type) this.type('json');
  return this;
};
/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */


RequestBase.prototype.sortQuery = function (sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};
/**
 * Compose querystring to append to req.url
 *
 * @api private
 */


RequestBase.prototype._finalizeQueryString = function () {
  var query = this._query.join('&');

  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }

  this._query.length = 0; // Makes the call idempotent

  if (this._sort) {
    var index = this.url.indexOf('?');

    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');

      if ('function' === typeof this._sort) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }

      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
}; // For backwards compat only


RequestBase.prototype._appendQueryString = function () {
  console.trace("Unsupported");
};
/**
 * Invoke callback with timeout error.
 *
 * @api private
 */


RequestBase.prototype._timeoutError = function (reason, timeout, errno) {
  if (this._aborted) {
    return;
  }

  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function () {
  var self = this; // deadline

  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function () {
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  } // response timeout


  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function () {
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
};

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

var type = function type(str) {
  return str.split(/ *; */).shift();
};
/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */


var params = function params(str) {
  return str.split(/ *; */).reduce(function (obj, str) {
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();
    if (key && val) obj[key] = val;
    return obj;
  }, {});
};
/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */


var parseLinks = function parseLinks(str) {
  return str.split(/ *, */).reduce(function (obj, str) {
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};
/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */


var cleanHeader = function cleanHeader(header, changesOrigin) {
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host']; // secuirty

  if (changesOrigin) {
    delete header['authorization'];
    delete header['cookie'];
  }

  return header;
};

var utils = {
  type: type,
  params: params,
  parseLinks: parseLinks,
  cleanHeader: cleanHeader
};

/**
 * Module dependencies.
 */

/**
 * Expose `ResponseBase`.
 */


var responseBase = ResponseBase;
/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin$2(obj);
}
/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */


function mixin$2(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }

  return obj;
}
/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */


ResponseBase.prototype.get = function (field) {
  return this.header[field.toLowerCase()];
};
/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */


ResponseBase.prototype._setHeaderProperties = function (header) {
  // TODO: moar!
  // TODO: make this a util
  // content-type
  var ct = header['content-type'] || '';
  this.type = utils.type(ct); // params

  var params = utils.params(ct);

  for (var key in params) {
    this[key] = params[key];
  }

  this.links = {}; // links

  try {
    if (header.link) {
      this.links = utils.parseLinks(header.link);
    }
  } catch (err) {// ignore
  }
};
/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */


ResponseBase.prototype._setStatusProperties = function (status) {
  var type = status / 100 | 0; // status / class

  this.status = this.statusCode = status;
  this.statusType = type; // basics

  this.info = 1 == type;
  this.ok = 2 == type;
  this.redirect = 3 == type;
  this.clientError = 4 == type;
  this.serverError = 5 == type;
  this.error = 4 == type || 5 == type ? this.toError() : false; // sugar

  this.created = 201 == status;
  this.accepted = 202 == status;
  this.noContent = 204 == status;
  this.badRequest = 400 == status;
  this.unauthorized = 401 == status;
  this.notAcceptable = 406 == status;
  this.forbidden = 403 == status;
  this.notFound = 404 == status;
  this.unprocessableEntity = 422 == status;
};

function Agent() {
  this._defaults = [];
}

["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects", "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert"].forEach(function (fn) {
  /** Default setting for all requests from this agent */
  Agent.prototype[fn] = function ()
  /*varargs*/
  {
    this._defaults.push({
      fn: fn,
      arguments: arguments
    });

    return this;
  };
});

Agent.prototype._setDefaults = function (req) {
  this._defaults.forEach(function (def) {
    req[def.fn].apply(req, def.arguments);
  });
};

var agentBase = Agent;

var client = createCommonjsModule(function (module, exports) {
  /**
   * Root reference for iframes.
   */
  var root;

  if (typeof window !== 'undefined') {
    // Browser window
    root = window;
  } else if (typeof self !== 'undefined') {
    // Web Worker
    root = self;
  } else {
    // Other environments
    console.warn("Using browser-only version of superagent in non-browser environment");
    root = commonjsGlobal;
  }
  /**
   * Noop.
   */


  function noop() {}
  /**
   * Expose `request`.
   */

  var request = exports = module.exports = function (method, url) {
    // callback
    if ('function' == typeof url) {
      return new exports.Request('GET', method).end(url);
    } // url first


    if (1 == arguments.length) {
      return new exports.Request('GET', method);
    }

    return new exports.Request(method, url);
  };

  exports.Request = Request;
  /**
   * Determine XHR.
   */

  request.getXHR = function () {
    if (root.XMLHttpRequest && (!root.location || 'file:' != root.location.protocol || !root.ActiveXObject)) {
      return new XMLHttpRequest();
    } else {
      try {
        return new ActiveXObject('Microsoft.XMLHTTP');
      } catch (e) {}

      try {
        return new ActiveXObject('Msxml2.XMLHTTP.6.0');
      } catch (e) {}

      try {
        return new ActiveXObject('Msxml2.XMLHTTP.3.0');
      } catch (e) {}

      try {
        return new ActiveXObject('Msxml2.XMLHTTP');
      } catch (e) {}
    }

    throw Error("Browser-only version of superagent could not find XHR");
  };
  /**
   * Removes leading and trailing whitespace, added to support IE.
   *
   * @param {String} s
   * @return {String}
   * @api private
   */


  var trim = ''.trim ? function (s) {
    return s.trim();
  } : function (s) {
    return s.replace(/(^\s*|\s*$)/g, '');
  };
  /**
   * Serialize the given `obj`.
   *
   * @param {Object} obj
   * @return {String}
   * @api private
   */

  function serialize(obj) {
    if (!isObject_1(obj)) return obj;
    var pairs = [];

    for (var key in obj) {
      pushEncodedKeyValuePair(pairs, key, obj[key]);
    }

    return pairs.join('&');
  }
  /**
   * Helps 'serialize' with serializing arrays.
   * Mutates the pairs array.
   *
   * @param {Array} pairs
   * @param {String} key
   * @param {Mixed} val
   */


  function pushEncodedKeyValuePair(pairs, key, val) {
    if (val != null) {
      if (Array.isArray(val)) {
        val.forEach(function (v) {
          pushEncodedKeyValuePair(pairs, key, v);
        });
      } else if (isObject_1(val)) {
        for (var subkey in val) {
          pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
        }
      } else {
        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));
      }
    } else if (val === null) {
      pairs.push(encodeURIComponent(key));
    }
  }
  /**
   * Expose serialization method.
   */


  request.serializeObject = serialize;
  /**
    * Parse the given x-www-form-urlencoded `str`.
    *
    * @param {String} str
    * @return {Object}
    * @api private
    */

  function parseString(str) {
    var obj = {};
    var pairs = str.split('&');
    var pair;
    var pos;

    for (var i = 0, len = pairs.length; i < len; ++i) {
      pair = pairs[i];
      pos = pair.indexOf('=');

      if (pos == -1) {
        obj[decodeURIComponent(pair)] = '';
      } else {
        obj[decodeURIComponent(pair.slice(0, pos))] = decodeURIComponent(pair.slice(pos + 1));
      }
    }

    return obj;
  }
  /**
   * Expose parser.
   */


  request.parseString = parseString;
  /**
   * Default MIME type map.
   *
   *     superagent.types.xml = 'application/xml';
   *
   */

  request.types = {
    html: 'text/html',
    json: 'application/json',
    xml: 'text/xml',
    urlencoded: 'application/x-www-form-urlencoded',
    'form': 'application/x-www-form-urlencoded',
    'form-data': 'application/x-www-form-urlencoded'
  };
  /**
   * Default serialization map.
   *
   *     superagent.serialize['application/xml'] = function(obj){
   *       return 'generated xml here';
   *     };
   *
   */

  request.serialize = {
    'application/x-www-form-urlencoded': serialize,
    'application/json': JSON.stringify
  };
  /**
    * Default parsers.
    *
    *     superagent.parse['application/xml'] = function(str){
    *       return { object parsed from str };
    *     };
    *
    */

  request.parse = {
    'application/x-www-form-urlencoded': parseString,
    'application/json': JSON.parse
  };
  /**
   * Parse the given header `str` into
   * an object containing the mapped fields.
   *
   * @param {String} str
   * @return {Object}
   * @api private
   */

  function parseHeader(str) {
    var lines = str.split(/\r?\n/);
    var fields = {};
    var index;
    var line;
    var field;
    var val;

    for (var i = 0, len = lines.length; i < len; ++i) {
      line = lines[i];
      index = line.indexOf(':');

      if (index === -1) {
        // could be empty line, just skip it
        continue;
      }

      field = line.slice(0, index).toLowerCase();
      val = trim(line.slice(index + 1));
      fields[field] = val;
    }

    return fields;
  }
  /**
   * Check if `mime` is json or has +json structured syntax suffix.
   *
   * @param {String} mime
   * @return {Boolean}
   * @api private
   */


  function isJSON(mime) {
    // should match /json or +json
    // but not /json-seq
    return /[\/+]json($|[^-\w])/.test(mime);
  }
  /**
   * Initialize a new `Response` with the given `xhr`.
   *
   *  - set flags (.ok, .error, etc)
   *  - parse header
   *
   * Examples:
   *
   *  Aliasing `superagent` as `request` is nice:
   *
   *      request = superagent;
   *
   *  We can use the promise-like API, or pass callbacks:
   *
   *      request.get('/').end(function(res){});
   *      request.get('/', function(res){});
   *
   *  Sending data can be chained:
   *
   *      request
   *        .post('/user')
   *        .send({ name: 'tj' })
   *        .end(function(res){});
   *
   *  Or passed to `.send()`:
   *
   *      request
   *        .post('/user')
   *        .send({ name: 'tj' }, function(res){});
   *
   *  Or passed to `.post()`:
   *
   *      request
   *        .post('/user', { name: 'tj' })
   *        .end(function(res){});
   *
   * Or further reduced to a single call for simple cases:
   *
   *      request
   *        .post('/user', { name: 'tj' }, function(res){});
   *
   * @param {XMLHTTPRequest} xhr
   * @param {Object} options
   * @api private
   */


  function Response(req) {
    this.req = req;
    this.xhr = this.req.xhr; // responseText is accessible only if responseType is '' or 'text' and on older browsers

    this.text = this.req.method != 'HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text') || typeof this.xhr.responseType === 'undefined' ? this.xhr.responseText : null;
    this.statusText = this.req.xhr.statusText;
    var status = this.xhr.status; // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request

    if (status === 1223) {
      status = 204;
    }

    this._setStatusProperties(status);

    this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders()); // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
    // getResponseHeader still works. so we get content-type even if getting
    // other headers fails.

    this.header['content-type'] = this.xhr.getResponseHeader('content-type');

    this._setHeaderProperties(this.header);

    if (null === this.text && req._responseType) {
      this.body = this.xhr.response;
    } else {
      this.body = this.req.method != 'HEAD' ? this._parseBody(this.text ? this.text : this.xhr.response) : null;
    }
  }

  responseBase(Response.prototype);
  /**
   * Parse the given body `str`.
   *
   * Used for auto-parsing of bodies. Parsers
   * are defined on the `superagent.parse` object.
   *
   * @param {String} str
   * @return {Mixed}
   * @api private
   */

  Response.prototype._parseBody = function (str) {
    var parse = request.parse[this.type];

    if (this.req._parser) {
      return this.req._parser(this, str);
    }

    if (!parse && isJSON(this.type)) {
      parse = request.parse['application/json'];
    }

    return parse && str && (str.length || str instanceof Object) ? parse(str) : null;
  };
  /**
   * Return an `Error` representative of this response.
   *
   * @return {Error}
   * @api public
   */


  Response.prototype.toError = function () {
    var req = this.req;
    var method = req.method;
    var url = req.url;
    var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
    var err = new Error(msg);
    err.status = this.status;
    err.method = method;
    err.url = url;
    return err;
  };
  /**
   * Expose `Response`.
   */


  request.Response = Response;
  /**
   * Initialize a new `Request` with the given `method` and `url`.
   *
   * @param {String} method
   * @param {String} url
   * @api public
   */

  function Request(method, url) {
    var self = this;
    this._query = this._query || [];
    this.method = method;
    this.url = url;
    this.header = {}; // preserves header name case

    this._header = {}; // coerces header names to lowercase

    this.on('end', function () {
      var err = null;
      var res = null;

      try {
        res = new Response(self);
      } catch (e) {
        err = new Error('Parser is unable to parse the response');
        err.parse = true;
        err.original = e; // issue #675: return the raw response if the response parsing fails

        if (self.xhr) {
          // ie9 doesn't have 'response' property
          err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response; // issue #876: return the http status code if the response parsing fails

          err.status = self.xhr.status ? self.xhr.status : null;
          err.statusCode = err.status; // backwards-compat only
        } else {
          err.rawResponse = null;
          err.status = null;
        }

        return self.callback(err);
      }

      self.emit('response', res);
      var new_err;

      try {
        if (!self._isResponseOK(res)) {
          new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
        }
      } catch (custom_err) {
        new_err = custom_err; // ok() callback can throw
      } // #1000 don't catch errors from the callback to avoid double calling it


      if (new_err) {
        new_err.original = err;
        new_err.response = res;
        new_err.status = res.status;
        self.callback(new_err, res);
      } else {
        self.callback(null, res);
      }
    });
  }
  /**
   * Mixin `Emitter` and `RequestBase`.
   */


  componentEmitter(Request.prototype);
  requestBase(Request.prototype);
  /**
   * Set Content-Type to `type`, mapping values from `request.types`.
   *
   * Examples:
   *
   *      superagent.types.xml = 'application/xml';
   *
   *      request.post('/')
   *        .type('xml')
   *        .send(xmlstring)
   *        .end(callback);
   *
   *      request.post('/')
   *        .type('application/xml')
   *        .send(xmlstring)
   *        .end(callback);
   *
   * @param {String} type
   * @return {Request} for chaining
   * @api public
   */

  Request.prototype.type = function (type) {
    this.set('Content-Type', request.types[type] || type);
    return this;
  };
  /**
   * Set Accept to `type`, mapping values from `request.types`.
   *
   * Examples:
   *
   *      superagent.types.json = 'application/json';
   *
   *      request.get('/agent')
   *        .accept('json')
   *        .end(callback);
   *
   *      request.get('/agent')
   *        .accept('application/json')
   *        .end(callback);
   *
   * @param {String} accept
   * @return {Request} for chaining
   * @api public
   */


  Request.prototype.accept = function (type) {
    this.set('Accept', request.types[type] || type);
    return this;
  };
  /**
   * Set Authorization field value with `user` and `pass`.
   *
   * @param {String} user
   * @param {String} [pass] optional in case of using 'bearer' as type
   * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
   * @return {Request} for chaining
   * @api public
   */


  Request.prototype.auth = function (user, pass, options) {
    if (1 === arguments.length) pass = '';

    if (_typeof(pass) === 'object' && pass !== null) {
      // pass is optional and can be replaced with options
      options = pass;
      pass = '';
    }

    if (!options) {
      options = {
        type: 'function' === typeof btoa ? 'basic' : 'auto'
      };
    }

    var encoder = function encoder(string) {
      if ('function' === typeof btoa) {
        return btoa(string);
      }

      throw new Error('Cannot use basic auth, btoa is not a function');
    };

    return this._auth(user, pass, options, encoder);
  };
  /**
   * Add query-string `val`.
   *
   * Examples:
   *
   *   request.get('/shoes')
   *     .query('size=10')
   *     .query({ color: 'blue' })
   *
   * @param {Object|String} val
   * @return {Request} for chaining
   * @api public
   */


  Request.prototype.query = function (val) {
    if ('string' != typeof val) val = serialize(val);
    if (val) this._query.push(val);
    return this;
  };
  /**
   * Queue the given `file` as an attachment to the specified `field`,
   * with optional `options` (or filename).
   *
   * ``` js
   * request.post('/upload')
   *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
   *   .end(callback);
   * ```
   *
   * @param {String} field
   * @param {Blob|File} file
   * @param {String|Object} options
   * @return {Request} for chaining
   * @api public
   */


  Request.prototype.attach = function (field, file, options) {
    if (file) {
      if (this._data) {
        throw Error("superagent can't mix .send() and .attach()");
      }

      this._getFormData().append(field, file, options || file.name);
    }

    return this;
  };

  Request.prototype._getFormData = function () {
    if (!this._formData) {
      this._formData = new root.FormData();
    }

    return this._formData;
  };
  /**
   * Invoke the callback with `err` and `res`
   * and handle arity check.
   *
   * @param {Error} err
   * @param {Response} res
   * @api private
   */


  Request.prototype.callback = function (err, res) {
    if (this._shouldRetry(err, res)) {
      return this._retry();
    }

    var fn = this._callback;
    this.clearTimeout();

    if (err) {
      if (this._maxRetries) err.retries = this._retries - 1;
      this.emit('error', err);
    }

    fn(err, res);
  };
  /**
   * Invoke callback with x-domain error.
   *
   * @api private
   */


  Request.prototype.crossDomainError = function () {
    var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
    err.crossDomain = true;
    err.status = this.status;
    err.method = this.method;
    err.url = this.url;
    this.callback(err);
  }; // This only warns, because the request is still likely to work


  Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function () {
    console.warn("This is not supported in browser version of superagent");
    return this;
  }; // This throws, because it can't send/receive data as expected


  Request.prototype.pipe = Request.prototype.write = function () {
    throw Error("Streaming is not supported in browser version of superagent");
  };
  /**
   * Check if `obj` is a host object,
   * we don't want to serialize these :)
   *
   * @param {Object} obj
   * @return {Boolean}
   * @api private
   */


  Request.prototype._isHost = function _isHost(obj) {
    // Native objects stringify to [object File], [object Blob], [object FormData], etc.
    return obj && 'object' === _typeof(obj) && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
  };
  /**
   * Initiate request, invoking callback `fn(res)`
   * with an instanceof `Response`.
   *
   * @param {Function} fn
   * @return {Request} for chaining
   * @api public
   */


  Request.prototype.end = function (fn) {
    if (this._endCalled) {
      console.warn("Warning: .end() was called twice. This is not supported in superagent");
    }

    this._endCalled = true; // store callback

    this._callback = fn || noop; // querystring

    this._finalizeQueryString();

    return this._end();
  };

  Request.prototype._end = function () {
    var self = this;
    var xhr = this.xhr = request.getXHR();
    var data = this._formData || this._data;

    this._setTimeouts(); // state change


    xhr.onreadystatechange = function () {
      var readyState = xhr.readyState;

      if (readyState >= 2 && self._responseTimeoutTimer) {
        clearTimeout(self._responseTimeoutTimer);
      }

      if (4 != readyState) {
        return;
      } // In IE9, reads to any property (e.g. status) off of an aborted XHR will
      // result in the error "Could not complete the operation due to error c00c023f"


      var status;

      try {
        status = xhr.status;
      } catch (e) {
        status = 0;
      }

      if (!status) {
        if (self.timedout || self._aborted) return;
        return self.crossDomainError();
      }

      self.emit('end');
    }; // progress


    var handleProgress = function handleProgress(direction, e) {
      if (e.total > 0) {
        e.percent = e.loaded / e.total * 100;
      }

      e.direction = direction;
      self.emit('progress', e);
    };

    if (this.hasListeners('progress')) {
      try {
        xhr.onprogress = handleProgress.bind(null, 'download');

        if (xhr.upload) {
          xhr.upload.onprogress = handleProgress.bind(null, 'upload');
        }
      } catch (e) {// Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
        // Reported here:
        // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
      }
    } // initiate request


    try {
      if (this.username && this.password) {
        xhr.open(this.method, this.url, true, this.username, this.password);
      } else {
        xhr.open(this.method, this.url, true);
      }
    } catch (err) {
      // see #1149
      return this.callback(err);
    } // CORS


    if (this._withCredentials) xhr.withCredentials = true; // body

    if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
      // serialize stuff
      var contentType = this._header['content-type'];
      var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];

      if (!serialize && isJSON(contentType)) {
        serialize = request.serialize['application/json'];
      }

      if (serialize) data = serialize(data);
    } // set header fields


    for (var field in this.header) {
      if (null == this.header[field]) continue;
      if (this.header.hasOwnProperty(field)) xhr.setRequestHeader(field, this.header[field]);
    }

    if (this._responseType) {
      xhr.responseType = this._responseType;
    } // send stuff


    this.emit('request', this); // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
    // We need null here if data is undefined

    xhr.send(typeof data !== 'undefined' ? data : null);
    return this;
  };

  request.agent = function () {
    return new agentBase();
  };

  ["GET", "POST", "OPTIONS", "PATCH", "PUT", "DELETE"].forEach(function (method) {
    agentBase.prototype[method.toLowerCase()] = function (url, fn) {
      var req = new request.Request(method, url);

      this._setDefaults(req);

      if (fn) {
        req.end(fn);
      }

      return req;
    };
  });
  agentBase.prototype.del = agentBase.prototype['delete'];
  /**
   * GET `url` with optional callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed|Function} [data] or fn
   * @param {Function} [fn]
   * @return {Request}
   * @api public
   */

  request.get = function (url, data, fn) {
    var req = request('GET', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.query(data);
    if (fn) req.end(fn);
    return req;
  };
  /**
   * HEAD `url` with optional callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed|Function} [data] or fn
   * @param {Function} [fn]
   * @return {Request}
   * @api public
   */


  request.head = function (url, data, fn) {
    var req = request('HEAD', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.query(data);
    if (fn) req.end(fn);
    return req;
  };
  /**
   * OPTIONS query to `url` with optional callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed|Function} [data] or fn
   * @param {Function} [fn]
   * @return {Request}
   * @api public
   */


  request.options = function (url, data, fn) {
    var req = request('OPTIONS', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  };
  /**
   * DELETE `url` with optional `data` and callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed} [data]
   * @param {Function} [fn]
   * @return {Request}
   * @api public
   */


  function del(url, data, fn) {
    var req = request('DELETE', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  }

  request['del'] = del;
  request['delete'] = del;
  /**
   * PATCH `url` with optional `data` and callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed} [data]
   * @param {Function} [fn]
   * @return {Request}
   * @api public
   */

  request.patch = function (url, data, fn) {
    var req = request('PATCH', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  };
  /**
   * POST `url` with optional `data` and callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed} [data]
   * @param {Function} [fn]
   * @return {Request}
   * @api public
   */


  request.post = function (url, data, fn) {
    var req = request('POST', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  };
  /**
   * PUT `url` with optional `data` and callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed|Function} [data] or fn
   * @param {Function} [fn]
   * @return {Request}
   * @api public
   */


  request.put = function (url, data, fn) {
    var req = request('PUT', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  };
});
var client_1 = client.get;
var client_2 = client.post;
var client_3 = client.put;
var client_4 = client.delete;
var client_5 = client.head;
var client_6 = client.Request;


var request = Object.freeze({
	default: client,
	__moduleExports: client,
	get: client_1,
	post: client_2,
	put: client_3,
	delete: client_4,
	head: client_5,
	Request: client_6
});

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * @private
 * @param method
 * @param url
 */

var requestWithSource = function requestWithSource(method, url) {
  return request[method](url).set('Filestack-Source', 'JS-2.0.3');
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Original implementation of throat by Forbes Lindesay
 * https://github.com/ForbesLindesay/throat
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @private
 */
var Delayed =
/** @class */
function () {
  function Delayed(resolve, fn, self, args) {
    this.resolve = resolve;
    this.fn = fn;
    this.self = self || null;
    this.args = args;
  }

  return Delayed;
}();
/**
 * @private
 */


var Queue =
/** @class */
function () {
  function Queue() {
    this._s1 = [];
    this._s2 = [];
  }

  Queue.prototype.push = function (value) {
    this._s1.push(value);
  };

  Queue.prototype.shift = function () {
    var s2 = this._s2;

    if (s2.length === 0) {
      var s1 = this._s1;

      if (s1.length === 0) {
        return;
      }

      this._s1 = s2;
      s2 = this._s2 = s1.reverse();
    }

    return s2.pop();
  };

  Queue.prototype.isEmpty = function () {
    return !this._s1.length && !this._s2.length;
  };

  return Queue;
}();
/**
 *
 * @private
 * @param size
 * @param fn
 */


function throat(size, fn) {
  var queue = new Queue();

  function run(fn, self, args) {
    if (size) {
      size--;
      var result = new Promise(function (resolve) {
        resolve(fn.apply(self, args));
      });
      result.then(release, release);
      return result;
    } else {
      return new Promise(function (resolve) {
        queue.push(new Delayed(resolve, fn, self, args));
      });
    }
  }

  function release() {
    size++;

    if (!queue.isEmpty()) {
      var next = queue.shift();
      next.resolve(run(next.fn, next.self, next.args));
    }
  }

  if (fn !== undefined && typeof fn !== 'function') {
    throw new TypeError('Expected throat fn to be a function but got ' + _typeof(fn));
  }

  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return run(fn, this, args);
  };
}

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var throat$1 = throat;
var resolveHost = function resolveHost(hosts, cname) {
  var result = hosts;

  if (cname) {
    var hosts_1 = /filestackapi.com|filestackcontent.com/i;
    Object.keys(hosts_1).forEach(function (key) {
      result[key] = hosts_1[key].replace(hosts_1, cname);
    });
  }

  return result;
};
/**
 * Check config options
 *
 * @private
 * @param name
 * @param allowed
 * @param options
 */

var checkOptions = function checkOptions(name, allowed, options) {
  if (options === void 0) {
    options = {};
  }

  var keys = Object.keys(options);
  var allowedNames = allowed.map(function (a) {
    return a.name;
  });
  var namesFormatted = allowedNames.join(', ');
  keys.forEach(function (key) {
    if (allowedNames.indexOf(key) < 0) {
      throw new Error(key + " is not a valid option for " + name + ". Valid options are: " + namesFormatted);
    }
  });
  allowed.forEach(function (obj) {
    var value = options[obj.name];

    if (obj.name === 'location' && typeof value === 'string') {
      value = value.toLowerCase();
    }

    if (value !== undefined) {
      var result = tcombValidation_11(value, obj.type);

      if (!result.isValid()) {
        var error = result.firstError();

        if (error && error.message) {
          throw new Error(error.message);
        }
      }
    }
  });
  return keys;
};
/**
 * Removes empty options from object
 *
 * @private
 * @param obj
 */

var removeEmpty = function removeEmpty(obj) {
  var newObj = _assign({}, obj);

  Object.keys(newObj).forEach(function (k) {
    return !newObj[k] && newObj[k] !== undefined && delete newObj[k];
  });
  return newObj;
};
/**
 *
 * @private
 * @param fn
 * @param interval
 * @param callFirst
 */

var throttle = function throttle(fn, interval, callFirst) {
  var wait = false;
  var callNow = false;
  /* istanbul ignore next */

  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    callNow = !!callFirst && !wait;
    var context = this;

    if (!wait) {
      wait = true;
      setTimeout(function () {
        wait = false;

        if (!callFirst) {
          return fn.apply(context, args);
        }
      }, interval);
    }

    if (callNow) {
      callNow = false;
      return fn.apply(this, arguments);
    }
  };
};
/**
 *
 * @private
 * @param start
 * @param stop
 * @param step
 */

var range = function range(start, stop, step) {
  if (step === void 0) {
    step = 1;
  }

  var toReturn = [];

  for (; start < stop; start += step) {
    toReturn.push(start);
  }

  return toReturn;
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Remove given file
 *
 * @private
 * @param session
 * @param handle
 * @param security
 */

var remove = function remove(session, handle, skipStorage, security) {
  if (!handle || typeof handle !== 'string') {
    throw new Error('A valid Filestack handle is required for remove');
  }

  if (!(session.policy && session.signature) && (!security || !(security.policy && security.signature))) {
    throw new Error('Security policy and signature are required for remove');
  }

  var fileApiUrl = session.urls.fileApiUrl;
  var baseURL = fileApiUrl + "/" + handle;
  var options = {
    key: session.apikey,
    policy: security && security.policy || session.policy,
    signature: security && security.signature || session.signature
  };

  if (skipStorage) {
    options.skip_storage = true;
  }

  return new Promise(function (resolve, reject) {
    client_4(baseURL).query(options).end(function (err, res) {
      if (err) {
        reject(err);
      } else {
        resolve(res);
      }
    });
  });
};
/**
 * Returns file metadata
 *
 * @private
 * @param session
 * @param handle
 * @param opts
 * @param security
 */

var metadata = function metadata(session, handle, opts, security) {
  if (!handle || typeof handle !== 'string') {
    throw new Error('A valid Filestack handle is required for metadata');
  }

  var allowed = [{
    name: 'size',
    type: tcombValidation_1
  }, {
    name: 'mimetype',
    type: tcombValidation_1
  }, {
    name: 'filename',
    type: tcombValidation_1
  }, {
    name: 'width',
    type: tcombValidation_1
  }, {
    name: 'height',
    type: tcombValidation_1
  }, {
    name: 'uploaded',
    type: tcombValidation_1
  }, {
    name: 'writeable',
    type: tcombValidation_1
  }, {
    name: 'cloud',
    type: tcombValidation_1
  }, {
    name: 'sourceUrl',
    type: tcombValidation_1
  }, {
    name: 'md5',
    type: tcombValidation_1
  }, {
    name: 'sha1',
    type: tcombValidation_1
  }, {
    name: 'sha224',
    type: tcombValidation_1
  }, {
    name: 'sha256',
    type: tcombValidation_1
  }, {
    name: 'sha384',
    type: tcombValidation_1
  }, {
    name: 'sha512',
    type: tcombValidation_1
  }, {
    name: 'location',
    type: tcombValidation_1
  }, {
    name: 'path',
    type: tcombValidation_1
  }, {
    name: 'container',
    type: tcombValidation_1
  }, {
    name: 'exif',
    type: tcombValidation_1
  }];
  checkOptions('metadata', allowed, opts);

  var options = _assign({}, opts);

  options.source_url = options.sourceUrl; // source_url is snake_case

  options.policy = security && security.policy || session.policy;
  options.signature = security && security.signature || session.signature;
  var baseURL = session.urls.fileApiUrl + "/" + handle + "/metadata";
  return new Promise(function (resolve, reject) {
    client_1(baseURL).query(removeEmpty(options)).end(function (err, res) {
      if (err) {
        return reject(err);
      }

      resolve(_assign({}, res.body, {
        handle: handle
      }));
    });
  });
};
/**
 * @private
 */

var ERequestMethod;

(function (ERequestMethod) {
  ERequestMethod["get"] = "get";
  ERequestMethod["head"] = "head";
})(ERequestMethod || (ERequestMethod = {}));
/**
 * @private
 */


var EResponseType;

(function (EResponseType) {
  EResponseType["blob"] = "blob";
  EResponseType["json"] = "json";
})(EResponseType || (EResponseType = {}));
/**
 * Returns file information
 *
 * @private
 * @param session
 * @param handle
 * @param options
 * @param security
 */


var retrieve = function retrieve(session, handle, options, security) {
  if (options === void 0) {
    options = {};
  }

  if (!handle || handle.length === 0 || typeof handle !== 'string') {
    throw new Error('File handle is required');
  }

  var allowed = [{
    name: 'metadata',
    type: tcombValidation_1
  }, {
    name: 'head',
    type: tcombValidation_1
  }, {
    name: 'dl',
    type: tcombValidation_1
  }, {
    name: 'cache',
    type: tcombValidation_1
  }, {
    name: 'extension',
    type: tcombValidation_5
  }];
  checkOptions('retrieveOptions', allowed, options);

  var requestOptions = _assign({}, options);

  requestOptions.key = session.apikey;
  requestOptions.policy = security && security.policy || session.policy;
  requestOptions.signature = security && security.signature || session.signature;
  var method = ERequestMethod.get;
  var responseType = EResponseType.blob;

  if (requestOptions.head) {
    method = ERequestMethod.head;
    responseType = EResponseType.json;
    delete requestOptions.head;
  }

  var extension;

  if (requestOptions.extension && requestOptions.extension.length) {
    extension = requestOptions.extension;
    delete requestOptions.extension;
  }

  var metadata;

  if (requestOptions.metadata) {
    if (method === ERequestMethod.head) {
      throw new Error('Head and metadata options cannot be used together');
    }

    responseType = EResponseType.json;
    metadata = requestOptions.metadata;
    delete requestOptions.metadata;
  }

  var baseURL = session.urls.fileApiUrl + "/" + handle + (extension ? "+" + extension : '') + (metadata ? '/metadata' : '');
  return new Promise(function (resolve, reject) {
    request[method](baseURL).query(requestOptions).responseType(responseType).end(function (err, res) {
      if (err) {
        return reject(err);
      }

      if (method === ERequestMethod.head) {
        return resolve(res.headers);
      }

      resolve(res.body);
    });
  });
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TransformSchema = {
  '$schema': 'http://json-schema.org/draft-07/schema#',
  title: 'Filestack Transformations',
  description: 'Filestack transformations parameters',
  type: 'object',
  additionalProperties: false,
  definitions: {
    securityCallDef: {
      id: '/securityCallDef',
      type: 'string',
      enum: ['pick', 'read', 'stat', 'write', 'writeUrl', 'store', 'convert', 'remove', 'exif', 'runWorkflow']
    },
    regionsDef: {
      id: '/regionsDef',
      type: 'string',
      enum: ['us-east-1', 'us-west-1', 'us-west-2', 'eu-west-1', 'eu-central-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-southeast-1', 'ap-southeast-2', 'sa-east-1']
    },
    locationsDef: {
      id: '/locationsDef',
      type: 'string',
      enum: ['s3', 'S3', 'rackspace', 'gcs', 'azure', 'dropbox']
    },
    colorDef: {
      id: 'colorDef',
      oneOf: [{
        type: 'string',
        pattern: '^([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'
      }, {
        type: 'string',
        enum: ['aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure', 'beige', 'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'fractal', 'fuchsia', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray0', 'gray1', 'gray2', 'gray3', 'gray4', 'gray5', 'gray6', 'gray7', 'gray8', 'gray9', 'gray10', 'gray11', 'gray12', 'gray13', 'gray14', 'gray15', 'gray16', 'gray17', 'gray18', 'gray19', 'gray20', 'gray21', 'gray22', 'gray23', 'gray24', 'gray25', 'gray26', 'gray27', 'gray28', 'gray29', 'gray30', 'gray31', 'gray32', 'gray33', 'gray34', 'gray35', 'gray36', 'gray37', 'gray38', 'gray39', 'gray40', 'gray41', 'gray42', 'gray43', 'gray44', 'gray45', 'gray46', 'gray47', 'gray48', 'gray49', 'gray50', 'gray51', 'gray52', 'gray53', 'gray54', 'gray55', 'gray56', 'gray57', 'gray58', 'gray59', 'gray60', 'gray61', 'gray62', 'gray63', 'gray64', 'gray65', 'gray66', 'gray67', 'gray68', 'gray69', 'gray70', 'gray71', 'gray72', 'gray73', 'gray74', 'gray75', 'gray76', 'gray77', 'gray78', 'gray79', 'gray80', 'gray81', 'gray82', 'gray83', 'gray84', 'gray85', 'gray86', 'gray87', 'gray88', 'gray89', 'gray90', 'gray91', 'gray92', 'gray93', 'gray94', 'gray95', 'gray96', 'gray97', 'gray98', 'gray99', 'gray100', 'gray', 'green', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'lime', 'limegreen', 'linen', 'magenta', 'maroon', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'navy', 'none', 'oldlace', 'olive', 'olivedrab', 'orange', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'purple', 'red', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'teal', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'white', 'whitesmoke', 'yellow', 'yellowgreen']
      }]
    },
    pageFormatDef: {
      id: '/pageFormatDef',
      type: 'string',
      enum: ['a2', 'a3', 'a4', 'a5', 'b4', 'b5', 'letter', 'legal', 'tabloid']
    },
    pageRangeDef: {
      id: '/pageRangeDef',
      type: 'array',
      uniqueItems: true,
      items: [{
        oneOf: [{
          type: 'integer',
          minimum: 1
        }, {
          type: 'string',
          pattern: '^(\\d+(?:-\\d+)?)$|^(-\\d+)$|^(\\d+-)$',
          errorMessage: 'Param should be provided in one of the following formats: "1,2,3,5", "1-3", "1-", "-2" '
        }]
      }]
    },
    facesDef: {
      id: '/facesDef',
      oneOf: [{
        type: 'string',
        enum: ['all']
      }, {
        type: 'integer',
        minimum: 1,
        maximum: 1000
      }, {
        type: 'array',
        uniqueItems: true,
        items: [{
          type: 'integer',
          minimum: 1,
          maximum: 1000
        }]
      }]
    },
    objectsDef: {
      id: '/objectsDef',
      type: 'array',
      minItems: 1,
      maxItems: 50,
      items: [{
        type: 'array',
        additionalItems: false,
        minItems: 4,
        items: [{
          type: 'integer',
          minimum: 0,
          maximum: 10000
        }, {
          type: 'integer',
          minimum: 0,
          maximum: 10000
        }, {
          type: 'integer',
          minimum: 1,
          maximum: 10000
        }, {
          type: 'integer',
          minimum: 1,
          maximum: 10000
        }]
      }]
    },
    positionDef: {
      id: '/positionDef',
      default: ['middle', 'center'],
      oneOf: [{
        type: 'string',
        enum: ['top', 'middle', 'bottom', 'left', 'center', 'right']
      }, {
        type: 'array',
        uniqueItems: true,
        additionalItems: false,
        minItems: 2,
        default: ['middle', 'center'],
        items: [{
          type: 'string',
          enum: ['top', 'middle', 'bottom']
        }, {
          type: 'string',
          enum: ['left', 'center', 'right']
        }]
      }]
    }
  },
  properties: {
    flip: {
      type: 'boolean',
      additionalProperties: false
    },
    no_metadata: {
      type: 'boolean',
      additionalProperties: false
    },
    compress: {
      additionalProperties: false,
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          metadata: {
            type: 'boolean',
            default: false
          }
        }
      }]
    },
    flop: {
      type: 'boolean',
      additionalProperties: false
    },
    enchance: {
      type: 'boolean',
      additionalProperties: false
    },
    redeye: {
      type: 'boolean',
      additionalProperties: false
    },
    monochrome: {
      type: 'boolean',
      additionalProperties: false
    },
    negative: {
      type: 'boolean',
      additionalProperties: false
    },
    tags: {
      type: 'boolean',
      additionalProperties: false
    },
    sfw: {
      type: 'boolean',
      additionalProperties: false
    },
    imagesize: {
      type: 'boolean',
      additionalProperties: false
    },
    metadata: {
      type: 'object',
      params: {
        type: 'array',
        items: {
          type: 'string',
          'enum': ['filename', 'mimetype', 'size', 'width', 'height', 'writeable', 'path', 'container', 'cloud', 'exif', 'source_url', 'md5', 'sha256', 'sha1', 'sha512']
        },
        minItems: 0,
        uniqueItems: true,
        additionalItems: false
      },
      additionalProperties: false
    },
    resize: {
      type: 'object',
      properties: {
        width: {
          type: 'number',
          minimum: 0,
          maximum: 10000
        },
        height: {
          type: 'number',
          minimum: 0,
          maximum: 10000
        },
        fit: {
          type: 'string',
          enum: ['clip', 'crop', 'scale', 'max'],
          default: 'clip'
        },
        align: {
          '$ref': 'positionDef',
          default: 'center'
        }
      },
      // required: ['width', 'height'],
      additionalProperties: false,
      anyOf: [{
        required: ['width']
      }, {
        required: ['height']
      }]
    },
    crop: {
      type: 'object',
      properties: {
        dim: {
          type: 'array',
          additionalItems: false,
          minItems: 4,
          items: [{
            type: 'integer',
            minimum: 0,
            maximum: 100000
          }, {
            type: 'integer',
            minimum: 0,
            maximum: 100000
          }, {
            type: 'integer',
            minimum: 1,
            maximum: 100000
          }, {
            type: 'integer',
            minimum: 1,
            maximum: 100000
          }]
        }
      },
      required: ['dim']
    },
    rotate: {
      type: 'object',
      properties: {
        deg: {
          oneOf: [{
            type: 'string',
            enum: ['exif']
          }, {
            type: 'number',
            minimum: 0,
            maximum: 359
          }]
        },
        exif: {
          type: 'boolean'
        },
        background: {
          '$ref': 'colorDef',
          default: 'FFFFFFFF'
        }
      },
      additionalProperties: false
    },
    detect_faces: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          maxsize: {
            type: 'number',
            minimum: 0,
            maximum: 10000,
            default: 0.35
          },
          minsize: {
            type: 'number',
            minimum: 0,
            maximum: 10000,
            default: 0.35
          },
          export: {
            type: 'boolean'
          },
          color: {
            '$ref': 'colorDef',
            default: '000000FF'
          }
        },
        additionalProperties: false
      }]
    },
    crop_faces: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          faces: {
            default: 1,
            '$ref': 'facesDef'
          },
          width: {
            type: 'number',
            minimum: 1,
            maximum: 10000
          },
          height: {
            type: 'number',
            minimum: 1,
            maximum: 10000
          },
          maxsize: {
            type: 'number',
            minimum: 0,
            maximum: 10000,
            default: 0.35
          },
          minsize: {
            type: 'number',
            minimum: 0,
            maximum: 10000,
            default: 0.35
          },
          buffer: {
            type: 'integer',
            minimum: 0,
            maximum: 10000
          },
          mode: {
            type: 'string',
            enum: ['crop', 'thumb', 'fill'],
            default: 'thumb'
          }
        },
        additionalProperties: false
      }]
    },
    pixelate_faces: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          faces: {
            '$ref': 'facesDef',
            default: 'all'
          },
          maxsize: {
            type: 'number',
            minimum: 0,
            maximum: 10000,
            default: 0.35
          },
          minsize: {
            type: 'number',
            minimum: 0,
            maximum: 10000,
            default: 0.35
          },
          buffer: {
            type: 'integer',
            minimum: 0,
            maximum: 10000
          },
          amount: {
            type: 'integer',
            minimum: 2,
            maximum: 100,
            default: 10
          },
          blur: {
            type: 'number',
            minimum: 0,
            maximum: 20,
            default: 4
          },
          type: {
            type: 'string',
            enum: ['rect', 'oval'],
            default: 'rect'
          }
        },
        additionalProperties: false
      }]
    },
    blur_faces: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          faces: {
            '$ref': 'facesDef',
            default: 'all'
          },
          maxsize: {
            type: 'number',
            minimum: 0,
            maximum: 10000,
            default: 0.35
          },
          minsize: {
            type: 'number',
            minimum: 0,
            maximum: 10000,
            default: 0.35
          },
          buffer: {
            type: 'integer',
            minimum: 0,
            maximum: 10000
          },
          amount: {
            type: 'number',
            minimum: 0,
            maximum: 10,
            default: 10
          },
          blur: {
            type: 'number',
            minimum: 0,
            maximum: 20,
            default: 4
          },
          type: {
            type: 'string',
            enum: ['rect', 'oval'],
            default: 'rect'
          }
        },
        additionalProperties: false
      }]
    },
    rounded_corners: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          radius: {
            oneOf: [{
              type: 'integer',
              minimum: 1,
              maximum: 10000
            }, {
              type: 'string',
              enum: ['max']
            }]
          },
          blur: {
            type: 'number',
            minimum: 0,
            maximum: 20,
            default: 0.3
          },
          background: {
            '$ref': 'colorDef'
          }
        },
        additionalProperties: false
      }]
    },
    vignette: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          amount: {
            type: 'integer',
            minimum: 0,
            maximum: 100,
            default: 20
          },
          blurmode: {
            type: 'string',
            enum: ['gaussian', 'linear'],
            default: 'gaussian'
          },
          background: {
            '$ref': 'colorDef'
          }
        },
        additionalProperties: false
      }]
    },
    polaroid: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          rotate: {
            type: 'integer',
            minimum: 0,
            maximum: 359
          },
          color: {
            '$ref': 'colorDef',
            default: 'snow'
          },
          background: {
            '$ref': 'colorDef'
          }
        },
        additionalProperties: false
      }]
    },
    torn_edges: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          spread: {
            type: 'array',
            additionalItems: false,
            minItems: 2,
            items: [{
              type: 'integer',
              minimum: 1,
              maximum: 10000,
              default: 1
            }, {
              type: 'integer',
              minimum: 1,
              maximum: 10000,
              default: 10
            }]
          },
          background: {
            '$ref': 'colorDef'
          }
        },
        additionalProperties: false
      }]
    },
    shadow: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          blur: {
            type: 'number',
            minimum: 0,
            maximum: 20,
            default: 100
          },
          opacity: {
            type: 'integer',
            minimum: 0,
            maximum: 100,
            default: 60
          },
          vector: {
            type: 'array',
            additionalItems: false,
            minItems: 2,
            items: [{
              type: 'integer',
              minimum: -1000,
              maximum: 1000,
              default: 4
            }, {
              type: 'integer',
              minimum: -1000,
              maximum: 1000,
              default: 4
            }]
          },
          color: {
            '$ref': 'colorDef'
          },
          background: {
            '$ref': 'colorDef'
          }
        },
        additionalProperties: false
      }]
    },
    circle: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          background: {
            '$ref': 'colorDef'
          }
        },
        additionalProperties: false
      }]
    },
    border: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          color: {
            '$ref': 'colorDef'
          },
          background: {
            '$ref': 'colorDef'
          },
          width: {
            type: 'integer',
            minimum: 0,
            maximum: 1000
          }
        },
        additionalProperties: false
      }]
    },
    sharpen: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          amount: {
            type: 'integer',
            minimum: 0,
            maximum: 20,
            default: 2
          }
        },
        additionalProperties: false
      }]
    },
    blur: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          amount: {
            type: 'integer',
            minimum: 0,
            maximum: 20,
            default: 2
          }
        },
        additionalProperties: false
      }]
    },
    blackwhite: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          threshold: {
            type: 'integer',
            minimum: 0,
            maximum: 100,
            default: 50
          }
        },
        additionalProperties: false
      }]
    },
    sepia: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          tone: {
            type: 'integer',
            minimum: 0,
            maximum: 100,
            default: 80
          }
        },
        additionalProperties: false
      }]
    },
    pixelate: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          amount: {
            type: 'integer',
            minimum: 2,
            maximum: 100,
            default: 2
          }
        },
        additionalProperties: false
      }]
    },
    oil_paint: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          amount: {
            type: 'integer',
            minimum: 2,
            maximum: 100,
            default: 2
          }
        },
        additionalProperties: false
      }]
    },
    modulate: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          brightness: {
            type: 'integer',
            minimum: 0,
            maximum: 10000,
            default: 100
          },
          saturation: {
            type: 'integer',
            minimum: 0,
            maximum: 10000,
            default: 100
          },
          hue: {
            type: 'integer',
            minimum: 0,
            maximum: 359,
            default: 0
          }
        },
        additionalProperties: false
      }]
    },
    asci: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          foreground: {
            '$ref': 'colorDef',
            default: '000000FF'
          },
          background: {
            '$ref': 'colorDef',
            default: 'FFFFFFFF'
          },
          colored: {
            type: 'boolean',
            default: false
          },
          size: {
            type: 'integer',
            minimum: 10,
            maximum: 100,
            default: 100
          },
          reverse: {
            type: 'boolean',
            default: false
          }
        },
        additionalProperties: false
      }]
    },
    collage: {
      type: 'object',
      properties: {
        files: {
          type: 'array',
          additionalItems: false,
          minItems: 1,
          items: [{
            type: 'string'
          }]
        },
        margin: {
          type: 'integer',
          minimum: 1,
          maximum: 100,
          default: 10
        },
        width: {
          type: 'integer',
          minimum: 0,
          maximum: 10000
        },
        height: {
          type: 'integer',
          minimum: 0,
          maximum: 10000
        },
        color: {
          '$ref': 'colorDef',
          default: 'FFFFFFFF'
        },
        fit: {
          type: 'string',
          enum: ['auto', 'crop']
        },
        autorotate: {
          type: 'boolean',
          default: false
        }
      },
      required: ['width', 'height', 'files'],
      additionalProperties: false
    },
    urlscreenshot: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          agent: {
            type: 'string',
            enum: ['desktop', 'mobile'],
            default: 'desktop'
          },
          width: {
            type: 'integer',
            minimum: 1,
            maximum: 1920,
            default: 1024
          },
          height: {
            type: 'integer',
            minimum: 1,
            maximum: 8000,
            default: 768
          },
          mode: {
            type: 'string',
            enum: ['all', 'window'],
            default: 'all'
          },
          delay: {
            type: 'integer',
            minimum: 0,
            maximum: 20000,
            default: 1000
          },
          orientation: {
            type: 'string',
            enum: ['portrait', 'landscape'],
            default: 'portrait'
          },
          device: {
            type: 'string',
            default: ''
          }
        },
        additionalProperties: false
      }]
    },
    upscale: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          noise: {
            type: 'string',
            enum: ['none', 'low', 'medium', 'high'],
            default: 'none'
          },
          upscale: {
            type: 'boolean',
            default: true
          },
          style: {
            type: 'string',
            enum: ['artwork', 'photo'],
            default: 'photo'
          }
        },
        additionalProperties: false
      }]
    },
    output: {
      type: 'object',
      additionalProperties: false,
      properties: {
        format: {
          type: 'string',
          enum: ['doc', 'docx', 'html', 'jpg', 'odp', 'ods', 'odt', 'pjpg', 'pdf', 'png', 'ppt', 'pptx', 'svg', 'txt', 'webp', 'xls', 'xlsx']
        },
        page: {
          type: 'integer',
          minimum: 1,
          maximum: 99999
        },
        density: {
          type: 'integer',
          minimum: 1,
          maximum: 500
        },
        compress: {
          type: 'boolean'
        },
        quality: {
          oneOf: [{
            type: 'string',
            enum: ['input']
          }, {
            type: 'integer',
            minimum: 1,
            maximum: 100,
            default: 95
          }]
        },
        secure: {
          type: 'boolean',
          default: false
        },
        docinfo: {
          type: 'boolean',
          default: false
        },
        strip: {
          type: 'boolean',
          default: false
        },
        colorspace: {
          type: 'string',
          enum: ['rgb', 'cmyk', 'input'],
          default: 'rgb'
        },
        background: {
          '$ref': 'colorDef'
        },
        pageformat: {
          type: 'string',
          enum: ['a2', 'a3', 'a4', 'a5', 'b4', 'b5', 'letter', 'legal', 'tabloid']
        },
        pageorientation: {
          type: 'string',
          enum: ['landscape', 'portrait']
        }
      }
    },
    pjpg: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        additionalProperties: false,
        properties: {
          quality: {
            type: 'integer',
            minimum: 0,
            maximum: 100
          },
          metadata: {
            type: 'boolean',
            default: false
          }
        }
      }]
    },
    quality: {
      type: 'object',
      additionalProperties: false,
      properties: {
        value: {
          type: 'integer',
          minimum: 1,
          maximum: 100
        }
      }
    },
    cache: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          expiry: {
            type: 'integer'
          }
        }
      }]
    },
    video_convert: {
      type: 'object',
      additionalProperties: false,
      properties: {
        width: {
          type: 'integer',
          minimum: 1,
          maximum: 4096
        },
        height: {
          type: 'integer',
          minimum: 1,
          maximum: 4096
        },
        preset: {
          type: 'string'
        },
        force: {
          type: 'boolean'
        },
        title: {
          type: 'string'
        },
        extname: {
          type: 'string'
        },
        upscale: {
          type: 'boolean'
        },
        aspect_mode: {
          type: 'string',
          enum: ['letterbox', 'pad', 'crop', 'preserve', 'constrain'],
          default: 'letterbox'
        },
        audio_sample_rate: {
          type: 'integer',
          minimum: 1,
          maximum: 99999
        },
        two_pass: {
          type: 'boolean'
        },
        video_bitrate: {
          type: 'integer',
          minimum: 1,
          maximum: 5000
        },
        fps: {
          type: 'integer',
          minimum: 1,
          maximum: 300
        },
        keyframe_interval: {
          type: 'integer',
          minimum: 250,
          maximum: 250
        },
        audio_bitrate: {
          type: 'integer',
          minimum: 1,
          maximum: 999
        },
        audio_channels: {
          type: 'integer',
          minimum: 1,
          maximum: 12
        },
        clip_length: {
          type: 'string',
          pattern: "^([0-1]?\\d|2[0-3])(?::([0-5]?\\d))?(?::([0-5]?\\d))?$"
        },
        clip_offset: {
          type: 'string',
          pattern: "^([0-1]?\\d|2[0-3])(?::([0-5]?\\d))?(?::([0-5]?\\d))?$"
        },
        watermark_url: {
          type: 'string'
        },
        watermark_top: {
          type: 'integer',
          minimum: 0,
          maximum: 9999
        },
        watermark_right: {
          type: 'integer',
          minimum: 0,
          maximum: 9999
        },
        watermark_bottom: {
          type: 'integer',
          minimum: 0,
          maximum: 9999
        },
        watermark_left: {
          type: 'integer',
          minimum: 0,
          maximum: 9999
        },
        frame_count: {
          type: 'integer',
          minimum: 1,
          maximum: 1,
          default: 1
        },
        filename: {
          type: 'string'
        },
        location: {
          '$ref': 'locationsDef'
        },
        path: {
          type: 'string'
        },
        container: {
          type: 'string'
        },
        access: {
          type: 'string',
          enum: ['public', 'private'],
          default: 'public'
        }
      }
    },
    store: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        additionalProperties: false,
        properties: {
          filename: {
            type: 'string'
          },
          location: {
            '$ref': 'locationsDef'
          },
          path: {
            type: 'string'
          },
          container: {
            type: 'string'
          },
          region: {
            '$ref': 'regionsDef'
          },
          access: {
            type: 'string',
            enum: ['public', 'private'],
            default: 'private'
          },
          base64decode: {
            type: 'boolean'
          },
          workflows: {
            type: 'array',
            additionalItems: false,
            minItems: 1,
            maxItems: 20,
            items: [{
              type: 'string'
            }, {
              type: 'object',
              additionalProperties: false,
              properties: {
                id: {
                  type: 'string'
                }
              }
            }]
          }
        }
      }]
    },
    watermark: {
      type: 'object',
      properties: {
        file: {
          type: 'string'
        },
        size: {
          type: 'number',
          minimum: 0,
          maximum: 500
        },
        position: {
          '$ref': 'positionDef'
        }
      },
      required: ['file'],
      additionalProperties: false
    },
    partial_blur: {
      type: 'object',
      properties: {
        objects: {
          '$ref': 'objectsDef'
        },
        amount: {
          type: 'number',
          minimum: 0,
          maximum: 20
        },
        blur: {
          type: 'number',
          minimum: 0,
          maximum: 20
        },
        type: {
          type: 'string',
          enum: ['rect', 'oval']
        }
      },
      required: ['objects']
    },
    partial_pixelate: {
      type: 'object',
      properties: {
        objects: {
          '$ref': 'objectsDef'
        },
        amount: {
          type: 'number',
          minimum: 2,
          maximum: 100
        },
        blur: {
          type: 'number',
          minimum: 0,
          maximum: 20
        },
        type: {
          type: 'string',
          enum: ['rect', 'oval']
        }
      },
      required: ['objects']
    },
    security: {
      type: 'object',
      additionalProperties: false,
      properties: {
        policy: {
          type: 'string'
        },
        signature: {
          type: 'string'
        }
      },
      required: ['policy', 'signature']
    },
    pdfinfo: {
      oneOf: [{
        type: 'boolean'
      }, {
        type: 'object',
        properties: {
          colorinfo: {
            type: 'boolean'
          }
        }
      }]
    },
    pdfconvert: {
      type: 'object',
      additionalProperties: false,
      properties: {
        pageorientation: {
          type: 'string',
          enum: ['portrait', 'landscape']
        },
        pageformat: {
          '$ref': 'pageFormatDef'
        },
        pages: {
          '$ref': 'pageRangeDef'
        }
      },
      anyOf: [{
        required: ['pageorientation']
      }, {
        required: ['pageformat']
      }, {
        required: ['pages']
      }]
    },
    fallback: {
      type: 'object',
      additionalProperties: false,
      properties: {
        handle: {
          type: 'string'
        },
        cache: {
          type: 'integer',
          minimum: 1,
          maximum: 31536000
        }
      },
      required: ['handle']
    }
  }
};

/*! https://mths.be/punycode v1.4.1 by @mathias */

/** Highest positive signed 32-bit float value */
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */

var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80

var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars

var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */

var errors = {
  'overflow': 'Overflow: input needs wider integers to process',
  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  'invalid-input': 'Invalid input'
};
/** Convenience shortcuts */

var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;
/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */

function error(type) {
  throw new RangeError(errors[type]);
}
/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */


function map(array, fn) {
  var length = array.length;
  var result = [];

  while (length--) {
    result[length] = fn(array[length]);
  }

  return result;
}
/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */


function mapDomain(string, fn) {
  var parts = string.split('@');
  var result = '';

  if (parts.length > 1) {
    // In email addresses, only the domain name should be punycoded. Leave
    // the local part (i.e. everything up to `@`) intact.
    result = parts[0] + '@';
    string = parts[1];
  } // Avoid `split(regex)` for IE8 compatibility. See #17.


  string = string.replace(regexSeparators, '\x2E');
  var labels = string.split('.');
  var encoded = map(labels, fn).join('.');
  return result + encoded;
}
/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */


function ucs2decode(string) {
  var output = [],
      counter = 0,
      length = string.length,
      value,
      extra;

  while (counter < length) {
    value = string.charCodeAt(counter++);

    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // high surrogate, and there is a next character
      extra = string.charCodeAt(counter++);

      if ((extra & 0xFC00) == 0xDC00) {
        // low surrogate
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // unmatched surrogate; only append this code unit, in case the next
        // code unit is the high surrogate of a surrogate pair
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }

  return output;
}
/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */


function digitToBasic(digit, flag) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
}
/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */


function adapt(delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);

  for (;
  /* no initialization */
  delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }

  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
}
/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */

function encode(input) {
  var n,
      delta,
      handledCPCount,
      basicLength,
      bias,
      j,
      m,
      q,
      k,
      t,
      currentValue,
      output = [],

  /** `inputLength` will hold the number of code points in `input`. */
  inputLength,

  /** Cached calculation results */
  handledCPCountPlusOne,
      baseMinusT,
      qMinusT; // Convert the input in UCS-2 to Unicode

  input = ucs2decode(input); // Cache the length

  inputLength = input.length; // Initialize the state

  n = initialN;
  delta = 0;
  bias = initialBias; // Handle the basic code points

  for (j = 0; j < inputLength; ++j) {
    currentValue = input[j];

    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
  // `basicLength` is the number of basic code points.
  // Finish the basic string - if it is not empty - with a delimiter

  if (basicLength) {
    output.push(delimiter);
  } // Main encoding loop:


  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next
    // larger one:
    for (m = maxInt, j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    // but guard against overflow


    handledCPCountPlusOne = handledCPCount + 1;

    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      error('overflow');
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < n && ++delta > maxInt) {
        error('overflow');
      }

      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer
        for (q = delta, k = base;;
        /* no condition */
        k += base) {
          t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

          if (q < t) {
            break;
          }

          qMinusT = q - t;
          baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
          q = floor(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;
  }

  return output.join('');
}
/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */

function toASCII(input) {
  return mapDomain(input, function (string) {
    return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
  });
}

var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;

function init() {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}

function toByteArray(b64) {
  if (!inited) {
    init();
  }

  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice


  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

  arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  if (!inited) {
    init();
  }

  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);
  return parts.join('');
}

function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
}

var toString = {}.toString;
var isArray$1 = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

var INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}
Buffer.isBuffer = isBuffer;

function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}

Buffer.compare = function compare(a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray$1(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read$$1(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read$$1(arr, i + j) !== read$$1(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write$$1(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
} // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually


function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}

function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
} // For Node v0.10 support. Remove this eventually.


function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
}

if (typeof global$1.setTimeout === 'function') {
}

if (typeof global$1.clearTimeout === 'function') {
}

var performance = global$1.performance || {};

var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
  return new Date().getTime();
}; // generate timestamp or delta

function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return arg == null;
}
function isString$1(arg) {
  return typeof arg === 'string';
}
function isObject$2(arg) {
  return _typeof(arg) === 'object' && arg !== null;
}

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty$1(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var isArray$3 = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function stringifyPrimitive(v) {
  switch (_typeof(v)) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
}

function stringify$2(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';

  if (obj === null) {
    obj = undefined;
  }

  if (_typeof(obj) === 'object') {
    return map$1(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

      if (isArray$3(obj[k])) {
        return map$1(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
}

function map$1(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }

  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }

  return res;
};

function parse(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;

  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty$1(obj, k)) {
      obj[k] = v;
    } else if (isArray$3(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
}

var urilib = {
  parse: urlParse,
  resolve: urlResolve,
  resolveObject: urlResolveObject,
  format: urlFormat,
  Url: Url
};
function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
} // Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.

var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,
    // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
};

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject$2(url) && url instanceof Url) return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  return parse$1(this, url, parseQueryString, slashesDenoteHost);
};

function parse$1(self, url, parseQueryString, slashesDenoteHost) {
  if (!isString$1(url)) {
    throw new TypeError('Parameter \'url\' must be a string, not ' + _typeof(url));
  } // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916


  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);
  var rest = url; // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"

  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);

    if (simplePath) {
      self.path = rest;
      self.href = rest;
      self.pathname = simplePath[1];

      if (simplePath[2]) {
        self.search = simplePath[2];

        if (parseQueryString) {
          self.query = parse(self.search.substr(1));
        } else {
          self.query = self.search.substr(1);
        }
      } else if (parseQueryString) {
        self.search = '';
        self.query = {};
      }

      return self;
    }
  }

  var proto = protocolPattern.exec(rest);

  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    self.protocol = lowerProto;
    rest = rest.substr(proto.length);
  } // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.


  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';

    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      self.slashes = true;
    }
  }

  var i, hec, l, p;

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c
    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.
    // find the first instance of any hostEndingChars
    var hostEnd = -1;

    for (i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.


    var auth, atSign;

    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    } // Now we have a portion which is definitely the auth.
    // Pull that off.


    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      self.auth = decodeURIComponent(auth);
    } // the host is the remaining to the left of the first non-host char


    hostEnd = -1;

    for (i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // if we still have not hit it, then the entire thing is a host.


    if (hostEnd === -1) hostEnd = rest.length;
    self.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd); // pull out port.

    parseHost(self); // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.

    self.hostname = self.hostname || ''; // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.

    var ipv6Hostname = self.hostname[0] === '[' && self.hostname[self.hostname.length - 1] === ']'; // validate a little.

    if (!ipv6Hostname) {
      var hostparts = self.hostname.split(/\./);

      for (i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;

        if (!part.match(hostnamePartPattern)) {
          var newpart = '';

          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          } // we test again with ASCII char only


          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);

            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }

            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }

            self.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (self.hostname.length > hostnameMaxLen) {
      self.hostname = '';
    } else {
      // hostnames are always lower case.
      self.hostname = self.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      self.hostname = toASCII(self.hostname);
    }

    p = self.port ? ':' + self.port : '';
    var h = self.hostname || '';
    self.host = h + p;
    self.href += self.host; // strip [ and ] from the hostname
    // the host field still retains them, though

    if (ipv6Hostname) {
      self.hostname = self.hostname.substr(1, self.hostname.length - 2);

      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  } // now rest is set to the post-host stuff.
  // chop off any delim chars.


  if (!unsafeProtocol[lowerProto]) {
    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);

      if (esc === ae) {
        esc = escape(ae);
      }

      rest = rest.split(ae).join(esc);
    }
  } // chop off from the tail first.


  var hash = rest.indexOf('#');

  if (hash !== -1) {
    // got a fragment string.
    self.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }

  var qm = rest.indexOf('?');

  if (qm !== -1) {
    self.search = rest.substr(qm);
    self.query = rest.substr(qm + 1);

    if (parseQueryString) {
      self.query = parse(self.query);
    }

    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    self.search = '';
    self.query = {};
  }

  if (rest) self.pathname = rest;

  if (slashedProtocol[lowerProto] && self.hostname && !self.pathname) {
    self.pathname = '/';
  } //to support http.request


  if (self.pathname || self.search) {
    p = self.pathname || '';
    var s = self.search || '';
    self.path = p + s;
  } // finally, reconstruct the href based on what has been validated.


  self.href = format$1(self);
  return self;
} // format a parsed object into a url string


function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (isString$1(obj)) obj = parse$1({}, obj);
  return format$1(obj);
}

function format$1(self) {
  var auth = self.auth || '';

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = self.protocol || '',
      pathname = self.pathname || '',
      hash = self.hash || '',
      host = false,
      query = '';

  if (self.host) {
    host = auth + self.host;
  } else if (self.hostname) {
    host = auth + (self.hostname.indexOf(':') === -1 ? self.hostname : '[' + this.hostname + ']');

    if (self.port) {
      host += ':' + self.port;
    }
  }

  if (self.query && isObject$2(self.query) && Object.keys(self.query).length) {
    query = stringify$2(self.query);
  }

  var search = self.search || query && '?' + query || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.

  if (self.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');
  return protocol + host + pathname + search + hash;
}

Url.prototype.format = function () {
  return format$1(this);
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (isString$1(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);

  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  } // hash is always overridden, no matter what.
  // even href="" will remove it.


  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

  if (relative.href === '') {
    result.href = result.format();
    return result;
  } // hrefs like //foo/bar always cut to the protocol.


  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);

    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    } //urlParse appends trailing / to urls like http://www.example.com


    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  var relPath;

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);

      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }

      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;

    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      relPath = (relative.pathname || '').split('/');

      while (relPath.length && !(relative.host = relPath.shift())) {
      }

      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }

    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port; // to support http.request

    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }

    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];
  relPath = relative.pathname && relative.pathname.split('/') || []; // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.

  if (psychotic) {
    result.hostname = '';
    result.port = null;

    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }

    result.host = '';

    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;

      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }

      relative.host = null;
    }

    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  var authInHost;

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath; // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    result.search = relative.search;
    result.query = relative.query; //to support http.request

    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null; //to support http.request

    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }

    result.href = result.format();
    return result;
  } // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.


  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0

  var up = 0;

  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];

    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

    authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  } //to support request.http


  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }

  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  return parseHost(this);
};

function parseHost(self) {
  var host = self.host;
  var port = portPattern.exec(host);

  if (port) {
    port = port[0];

    if (port !== ':') {
      self.port = port.substr(1);
    }

    host = host.substr(0, host.length - port.length);
  }

  if (host) self.hostname = host;
}

var helpers = createCommonjsModule(function (module, exports) {

  var ValidationError = exports.ValidationError = function ValidationError(message, instance, schema, propertyPath, name, argument) {
    if (propertyPath) {
      this.property = propertyPath;
    }

    if (message) {
      this.message = message;
    }

    if (schema) {
      if (schema.id) {
        this.schema = schema.id;
      } else {
        this.schema = schema;
      }
    }

    if (instance) {
      this.instance = instance;
    }

    this.name = name;
    this.argument = argument;
    this.stack = this.toString();
  };

  ValidationError.prototype.toString = function toString() {
    return this.property + ' ' + this.message;
  };

  var ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {
    this.instance = instance;
    this.schema = schema;
    this.propertyPath = ctx.propertyPath;
    this.errors = [];
    this.throwError = options && options.throwError;
    this.disableFormat = options && options.disableFormat === true;
  };

  ValidatorResult.prototype.addError = function addError(detail) {
    var err;

    if (typeof detail == 'string') {
      err = new ValidationError(detail, this.instance, this.schema, this.propertyPath);
    } else {
      if (!detail) throw new Error('Missing error detail');
      if (!detail.message) throw new Error('Missing error message');
      if (!detail.name) throw new Error('Missing validator type');
      err = new ValidationError(detail.message, this.instance, this.schema, this.propertyPath, detail.name, detail.argument);
    }

    if (this.throwError) {
      throw err;
    }

    this.errors.push(err);
    return err;
  };

  ValidatorResult.prototype.importErrors = function importErrors(res) {
    if (typeof res == 'string' || res && res.validatorType) {
      this.addError(res);
    } else if (res && res.errors) {
      Array.prototype.push.apply(this.errors, res.errors);
    }
  };

  function stringizer(v, i) {
    return i + ': ' + v.toString() + '\n';
  }

  ValidatorResult.prototype.toString = function toString(res) {
    return this.errors.map(stringizer).join('');
  };

  Object.defineProperty(ValidatorResult.prototype, "valid", {
    get: function get() {
      return !this.errors.length;
    }
  });
  /**
   * Describes a problem with a Schema which prevents validation of an instance
   * @name SchemaError
   * @constructor
   */

  var SchemaError = exports.SchemaError = function SchemaError(msg, schema) {
    this.message = msg;
    this.schema = schema;
    Error.call(this, msg);
    Error.captureStackTrace(this, SchemaError);
  };

  SchemaError.prototype = Object.create(Error.prototype, {
    constructor: {
      value: SchemaError,
      enumerable: false
    },
    name: {
      value: 'SchemaError',
      enumerable: false
    }
  });

  var SchemaContext = exports.SchemaContext = function SchemaContext(schema, options, propertyPath, base, schemas) {
    this.schema = schema;
    this.options = options;
    this.propertyPath = propertyPath;
    this.base = base;
    this.schemas = schemas;
  };

  SchemaContext.prototype.resolve = function resolve(target) {
    return urilib.resolve(this.base, target);
  };

  SchemaContext.prototype.makeChild = function makeChild(schema, propertyName) {
    var propertyPath = propertyName === undefined ? this.propertyPath : this.propertyPath + makeSuffix(propertyName);
    var base = urilib.resolve(this.base, schema.id || '');
    var ctx = new SchemaContext(schema, this.options, propertyPath, base, Object.create(this.schemas));

    if (schema.id && !ctx.schemas[base]) {
      ctx.schemas[base] = schema;
    }

    return ctx;
  };

  var FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {
    'date-time': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
    'date': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
    'time': /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,
    'email': /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
    'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
    'ipv6': /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
    'uri': /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,
    'color': /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,
    // hostname regex from: http://stackoverflow.com/a/1420225/5628
    'hostname': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
    'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
    'alpha': /^[a-zA-Z]+$/,
    'alphanumeric': /^[a-zA-Z0-9]+$/,
    'utc-millisec': function utcMillisec(input) {
      return typeof input === 'string' && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
    },
    'regex': function regex(input) {
      var result = true;

      try {
      } catch (e) {
        result = false;
      }

      return result;
    },
    'style': /\s*(.+?):\s*([^;]+);?/g,
    'phone': /^\+(?:[0-9] ?){6,14}[0-9]$/
  };
  FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
  FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
  FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];

  exports.isFormat = function isFormat(input, format, validator) {
    if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {
      if (FORMAT_REGEXPS[format] instanceof RegExp) {
        return FORMAT_REGEXPS[format].test(input);
      }

      if (typeof FORMAT_REGEXPS[format] === 'function') {
        return FORMAT_REGEXPS[format](input);
      }
    } else if (validator && validator.customFormats && typeof validator.customFormats[format] === 'function') {
      return validator.customFormats[format](input);
    }

    return true;
  };

  var makeSuffix = exports.makeSuffix = function makeSuffix(key) {
    key = key.toString(); // This function could be capable of outputting valid a ECMAScript string, but the
    // resulting code for testing which form to use would be tens of thousands of characters long
    // That means this will use the name form for some illegal forms

    if (!key.match(/[.\s\[\]]/) && !key.match(/^[\d]/)) {
      return '.' + key;
    }

    if (key.match(/^\d+$/)) {
      return '[' + key + ']';
    }

    return '[' + JSON.stringify(key) + ']';
  };

  exports.deepCompareStrict = function deepCompareStrict(a, b) {
    if (_typeof(a) !== _typeof(b)) {
      return false;
    }

    if (a instanceof Array) {
      if (!(b instanceof Array)) {
        return false;
      }

      if (a.length !== b.length) {
        return false;
      }

      return a.every(function (v, i) {
        return deepCompareStrict(a[i], b[i]);
      });
    }

    if (_typeof(a) === 'object') {
      if (!a || !b) {
        return a === b;
      }

      var aKeys = Object.keys(a);
      var bKeys = Object.keys(b);

      if (aKeys.length !== bKeys.length) {
        return false;
      }

      return aKeys.every(function (v) {
        return deepCompareStrict(a[v], b[v]);
      });
    }

    return a === b;
  };

  function deepMerger(target, dst, e, i) {
    if (_typeof(e) === 'object') {
      dst[i] = deepMerge(target[i], e);
    } else {
      if (target.indexOf(e) === -1) {
        dst.push(e);
      }
    }
  }

  function copyist(src, dst, key) {
    dst[key] = src[key];
  }

  function copyistWithDeepMerge(target, src, dst, key) {
    if (_typeof(src[key]) !== 'object' || !src[key]) {
      dst[key] = src[key];
    } else {
      if (!target[key]) {
        dst[key] = src[key];
      } else {
        dst[key] = deepMerge(target[key], src[key]);
      }
    }
  }

  function deepMerge(target, src) {
    var array = Array.isArray(src);
    var dst = array && [] || {};

    if (array) {
      target = target || [];
      dst = dst.concat(target);
      src.forEach(deepMerger.bind(null, target, dst));
    } else {
      if (target && _typeof(target) === 'object') {
        Object.keys(target).forEach(copyist.bind(null, target, dst));
      }

      Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));
    }

    return dst;
  }
  module.exports.deepMerge = deepMerge;
  /**
   * Validates instance against the provided schema
   * Implements URI+JSON Pointer encoding, e.g. "%7e"="~0"=>"~", "~1"="%2f"=>"/"
   * @param o
   * @param s The path to walk o along
   * @return any
   */

  exports.objectGetPath = function objectGetPath(o, s) {
    var parts = s.split('/').slice(1);
    var k;

    while (typeof (k = parts.shift()) == 'string') {
      var n = decodeURIComponent(k.replace(/~0/, '~').replace(/~1/g, '/'));
      if (!(n in o)) return;
      o = o[n];
    }

    return o;
  };

  function pathEncoder(v) {
    return '/' + encodeURIComponent(v).replace(/~/g, '%7E');
  }
  /**
   * Accept an Array of property names and return a JSON Pointer URI fragment
   * @param Array a
   * @return {String}
   */


  exports.encodePath = function encodePointer(a) {
    // ~ must be encoded explicitly because hacks
    // the slash is encoded by encodeURIComponent
    return a.map(pathEncoder).join('');
  };
  /**
   * Calculate the number of decimal places a number uses
   * We need this to get correct results out of multipleOf and divisibleBy
   * when either figure is has decimal places, due to IEEE-754 float issues.
   * @param number
   * @returns {number}
   */


  exports.getDecimalPlaces = function getDecimalPlaces(number) {
    var decimalPlaces = 0;
    if (isNaN(number)) return decimalPlaces;

    if (typeof number !== 'number') {
      number = Number(number);
    }

    var parts = number.toString().split('e');

    if (parts.length === 2) {
      if (parts[1][0] !== '-') {
        return decimalPlaces;
      } else {
        decimalPlaces = Number(parts[1].slice(1));
      }
    }

    var decimalParts = parts[0].split('.');

    if (decimalParts.length === 2) {
      decimalPlaces += decimalParts[1].length;
    }

    return decimalPlaces;
  };
});
var helpers_1 = helpers.ValidationError;
var helpers_2 = helpers.ValidatorResult;
var helpers_3 = helpers.SchemaError;
var helpers_4 = helpers.SchemaContext;
var helpers_5 = helpers.FORMAT_REGEXPS;
var helpers_6 = helpers.isFormat;
var helpers_7 = helpers.makeSuffix;
var helpers_8 = helpers.deepCompareStrict;
var helpers_9 = helpers.deepMerge;
var helpers_10 = helpers.objectGetPath;
var helpers_11 = helpers.encodePath;
var helpers_12 = helpers.getDecimalPlaces;

/** @type ValidatorResult */


var ValidatorResult = helpers.ValidatorResult;
/** @type SchemaError */

var SchemaError = helpers.SchemaError;
var attribute = {};
attribute.ignoreProperties = {
  // informative properties
  'id': true,
  'default': true,
  'description': true,
  'title': true,
  // arguments to other properties
  'exclusiveMinimum': true,
  'exclusiveMaximum': true,
  'additionalItems': true,
  // special-handled properties
  '$schema': true,
  '$ref': true,
  'extends': true
};
/**
 * @name validators
 */

var validators$1 = attribute.validators = {};
/**
 * Validates whether the instance if of a certain type
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {ValidatorResult|null}
 */

validators$1.type = function validateType(instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }

  var result = new ValidatorResult(instance, schema, options, ctx);
  var types = Array.isArray(schema.type) ? schema.type : [schema.type];

  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {
    var list = types.map(function (v) {
      return v.id && '<' + v.id + '>' || v + '';
    });
    result.addError({
      name: 'type',
      argument: list,
      message: "is not of a type(s) " + list
    });
  }

  return result;
};

function testSchemaNoThrow(instance, options, ctx, callback, schema) {
  var throwError = options.throwError;
  options.throwError = false;
  var res = this.validateSchema(instance, schema, options, ctx);
  options.throwError = throwError;

  if (!res.valid && callback instanceof Function) {
    callback(res);
  }

  return res.valid;
}
/**
 * Validates whether the instance matches some of the given schemas
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {ValidatorResult|null}
 */


validators$1.anyOf = function validateAnyOf(instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }

  var result = new ValidatorResult(instance, schema, options, ctx);
  var inner = new ValidatorResult(instance, schema, options, ctx);

  if (!Array.isArray(schema.anyOf)) {
    throw new SchemaError("anyOf must be an array");
  }

  if (!schema.anyOf.some(testSchemaNoThrow.bind(this, instance, options, ctx, function (res) {
    inner.importErrors(res);
  }))) {
    var list = schema.anyOf.map(function (v, i) {
      return v.id && '<' + v.id + '>' || v.title && JSON.stringify(v.title) || v['$ref'] && '<' + v['$ref'] + '>' || '[subschema ' + i + ']';
    });

    if (options.nestedErrors) {
      result.importErrors(inner);
    }

    result.addError({
      name: 'anyOf',
      argument: list,
      message: "is not any of " + list.join(',')
    });
  }

  return result;
};
/**
 * Validates whether the instance matches every given schema
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null}
 */


validators$1.allOf = function validateAllOf(instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }

  if (!Array.isArray(schema.allOf)) {
    throw new SchemaError("allOf must be an array");
  }

  var result = new ValidatorResult(instance, schema, options, ctx);
  var self = this;
  schema.allOf.forEach(function (v, i) {
    var valid = self.validateSchema(instance, v, options, ctx);

    if (!valid.valid) {
      var msg = v.id && '<' + v.id + '>' || v.title && JSON.stringify(v.title) || v['$ref'] && '<' + v['$ref'] + '>' || '[subschema ' + i + ']';
      result.addError({
        name: 'allOf',
        argument: {
          id: msg,
          length: valid.errors.length,
          valid: valid
        },
        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:'
      });
      result.importErrors(valid);
    }
  });
  return result;
};
/**
 * Validates whether the instance matches exactly one of the given schemas
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null}
 */


validators$1.oneOf = function validateOneOf(instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }

  if (!Array.isArray(schema.oneOf)) {
    throw new SchemaError("oneOf must be an array");
  }

  var result = new ValidatorResult(instance, schema, options, ctx);
  var inner = new ValidatorResult(instance, schema, options, ctx);
  var count = schema.oneOf.filter(testSchemaNoThrow.bind(this, instance, options, ctx, function (res) {
    inner.importErrors(res);
  })).length;
  var list = schema.oneOf.map(function (v, i) {
    return v.id && '<' + v.id + '>' || v.title && JSON.stringify(v.title) || v['$ref'] && '<' + v['$ref'] + '>' || '[subschema ' + i + ']';
  });

  if (count !== 1) {
    if (options.nestedErrors) {
      result.importErrors(inner);
    }

    result.addError({
      name: 'oneOf',
      argument: list,
      message: "is not exactly one from " + list.join(',')
    });
  }

  return result;
};
/**
 * Validates properties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */


validators$1.properties = function validateProperties(instance, schema, options, ctx) {
  if (!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var properties = schema.properties || {};

  for (var property in properties) {
    if (typeof options.preValidateProperty == 'function') {
      options.preValidateProperty(instance, property, properties[property], options, ctx);
    }

    var prop = Object.hasOwnProperty.call(instance, property) ? instance[property] : undefined;
    var res = this.validateSchema(prop, properties[property], options, ctx.makeChild(properties[property], property));
    if (res.instance !== result.instance[property]) result.instance[property] = res.instance;
    result.importErrors(res);
  }

  return result;
};
/**
 * Test a specific property within in instance against the additionalProperties schema attribute
 * This ignores properties with definitions in the properties schema attribute, but no other attributes.
 * If too many more types of property-existance tests pop up they may need their own class of tests (like `type` has)
 * @private
 * @return {boolean}
 */


function testAdditionalProperty(instance, schema, options, ctx, property, result) {
  if (!this.types.object(instance)) return;

  if (schema.properties && schema.properties[property] !== undefined) {
    return;
  }

  if (schema.additionalProperties === false) {
    result.addError({
      name: 'additionalProperties',
      argument: property,
      message: "additionalProperty " + JSON.stringify(property) + " exists in instance when not allowed"
    });
  } else {
    var additionalProperties = schema.additionalProperties || {};

    if (typeof options.preValidateProperty == 'function') {
      options.preValidateProperty(instance, property, additionalProperties, options, ctx);
    }

    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));
    if (res.instance !== result.instance[property]) result.instance[property] = res.instance;
    result.importErrors(res);
  }
}
/**
 * Validates patternProperties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */


validators$1.patternProperties = function validatePatternProperties(instance, schema, options, ctx) {
  if (!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var patternProperties = schema.patternProperties || {};

  for (var property in instance) {
    var test = true;

    for (var pattern in patternProperties) {
      var expr = new RegExp(pattern);

      if (!expr.test(property)) {
        continue;
      }

      test = false;

      if (typeof options.preValidateProperty == 'function') {
        options.preValidateProperty(instance, property, patternProperties[pattern], options, ctx);
      }

      var res = this.validateSchema(instance[property], patternProperties[pattern], options, ctx.makeChild(patternProperties[pattern], property));
      if (res.instance !== result.instance[property]) result.instance[property] = res.instance;
      result.importErrors(res);
    }

    if (test) {
      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
    }
  }

  return result;
};
/**
 * Validates additionalProperties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */


validators$1.additionalProperties = function validateAdditionalProperties(instance, schema, options, ctx) {
  if (!this.types.object(instance)) return; // if patternProperties is defined then we'll test when that one is called instead

  if (schema.patternProperties) {
    return null;
  }

  var result = new ValidatorResult(instance, schema, options, ctx);

  for (var property in instance) {
    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
  }

  return result;
};
/**
 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.minProperties = function validateMinProperties(instance, schema, options, ctx) {
  if (!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var keys = Object.keys(instance);

  if (!(keys.length >= schema.minProperties)) {
    result.addError({
      name: 'minProperties',
      argument: schema.minProperties,
      message: "does not meet minimum property length of " + schema.minProperties
    });
  }

  return result;
};
/**
 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.maxProperties = function validateMaxProperties(instance, schema, options, ctx) {
  if (!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var keys = Object.keys(instance);

  if (!(keys.length <= schema.maxProperties)) {
    result.addError({
      name: 'maxProperties',
      argument: schema.maxProperties,
      message: "does not meet maximum property length of " + schema.maxProperties
    });
  }

  return result;
};
/**
 * Validates items when instance is an array
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */


validators$1.items = function validateItems(instance, schema, options, ctx) {
  var self = this;
  if (!this.types.array(instance)) return;
  if (!schema.items) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  instance.every(function (value, i) {
    var items = Array.isArray(schema.items) ? schema.items[i] || schema.additionalItems : schema.items;

    if (items === undefined) {
      return true;
    }

    if (items === false) {
      result.addError({
        name: 'items',
        message: "additionalItems not permitted"
      });
      return false;
    }

    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));
    if (res.instance !== result.instance[i]) result.instance[i] = res.instance;
    result.importErrors(res);
    return true;
  });
  return result;
};
/**
 * Validates minimum and exclusiveMinimum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.minimum = function validateMinimum(instance, schema, options, ctx) {
  if (!this.types.number(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var valid = true;

  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {
    valid = instance > schema.minimum;
  } else {
    valid = instance >= schema.minimum;
  }

  if (!valid) {
    result.addError({
      name: 'minimum',
      argument: schema.minimum,
      message: "must have a minimum value of " + schema.minimum
    });
  }

  return result;
};
/**
 * Validates maximum and exclusiveMaximum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.maximum = function validateMaximum(instance, schema, options, ctx) {
  if (!this.types.number(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var valid;

  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {
    valid = instance < schema.maximum;
  } else {
    valid = instance <= schema.maximum;
  }

  if (!valid) {
    result.addError({
      name: 'maximum',
      argument: schema.maximum,
      message: "must have a maximum value of " + schema.maximum
    });
  }

  return result;
};
/**
 * Perform validation for multipleOf and divisibleBy, which are essentially the same.
 * @param instance
 * @param schema
 * @param validationType
 * @param errorMessage
 * @returns {String|null}
 */


var validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy(instance, schema, options, ctx, validationType, errorMessage) {
  if (!this.types.number(instance)) return;
  var validationArgument = schema[validationType];

  if (validationArgument == 0) {
    throw new SchemaError(validationType + " cannot be zero");
  }

  var result = new ValidatorResult(instance, schema, options, ctx);
  var instanceDecimals = helpers.getDecimalPlaces(instance);
  var divisorDecimals = helpers.getDecimalPlaces(validationArgument);
  var maxDecimals = Math.max(instanceDecimals, divisorDecimals);
  var multiplier = Math.pow(10, maxDecimals);

  if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {
    result.addError({
      name: validationType,
      argument: validationArgument,
      message: errorMessage + JSON.stringify(validationArgument)
    });
  }

  return result;
};
/**
 * Validates divisibleBy when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.multipleOf = function validateMultipleOf(instance, schema, options, ctx) {
  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "multipleOf", "is not a multiple of (divisible by) ");
};
/**
 * Validates multipleOf when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.divisibleBy = function validateDivisibleBy(instance, schema, options, ctx) {
  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "divisibleBy", "is not divisible by (multiple of) ");
};
/**
 * Validates whether the instance value is present.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.required = function validateRequired(instance, schema, options, ctx) {
  var result = new ValidatorResult(instance, schema, options, ctx);

  if (instance === undefined && schema.required === true) {
    // A boolean form is implemented for reverse-compatability with schemas written against older drafts
    result.addError({
      name: 'required',
      message: "is required"
    });
  } else if (this.types.object(instance) && Array.isArray(schema.required)) {
    schema.required.forEach(function (n) {
      if (instance[n] === undefined) {
        result.addError({
          name: 'required',
          argument: n,
          message: "requires property " + JSON.stringify(n)
        });
      }
    });
  }

  return result;
};
/**
 * Validates whether the instance value matches the regular expression, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.pattern = function validatePattern(instance, schema, options, ctx) {
  if (!this.types.string(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);

  if (!instance.match(schema.pattern)) {
    result.addError({
      name: 'pattern',
      argument: schema.pattern,
      message: "does not match pattern " + JSON.stringify(schema.pattern)
    });
  }

  return result;
};
/**
 * Validates whether the instance value is of a certain defined format or a custom
 * format.
 * The following formats are supported for string types:
 *   - date-time
 *   - date
 *   - time
 *   - ip-address
 *   - ipv6
 *   - uri
 *   - color
 *   - host-name
 *   - alpha
 *   - alpha-numeric
 *   - utc-millisec
 * @param instance
 * @param schema
 * @param [options]
 * @param [ctx]
 * @return {String|null}
 */


validators$1.format = function validateFormat(instance, schema, options, ctx) {
  if (instance === undefined) return;
  var result = new ValidatorResult(instance, schema, options, ctx);

  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {
    result.addError({
      name: 'format',
      argument: schema.format,
      message: "does not conform to the " + JSON.stringify(schema.format) + " format"
    });
  }

  return result;
};
/**
 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.minLength = function validateMinLength(instance, schema, options, ctx) {
  if (!this.types.string(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var hsp = instance.match(/[\uDC00-\uDFFF]/g);
  var length = instance.length - (hsp ? hsp.length : 0);

  if (!(length >= schema.minLength)) {
    result.addError({
      name: 'minLength',
      argument: schema.minLength,
      message: "does not meet minimum length of " + schema.minLength
    });
  }

  return result;
};
/**
 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.maxLength = function validateMaxLength(instance, schema, options, ctx) {
  if (!this.types.string(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx); // TODO if this was already computed in "minLength", use that value instead of re-computing

  var hsp = instance.match(/[\uDC00-\uDFFF]/g);
  var length = instance.length - (hsp ? hsp.length : 0);

  if (!(length <= schema.maxLength)) {
    result.addError({
      name: 'maxLength',
      argument: schema.maxLength,
      message: "does not meet maximum length of " + schema.maxLength
    });
  }

  return result;
};
/**
 * Validates whether instance contains at least a minimum number of items, when the instance is an Array.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.minItems = function validateMinItems(instance, schema, options, ctx) {
  if (!this.types.array(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);

  if (!(instance.length >= schema.minItems)) {
    result.addError({
      name: 'minItems',
      argument: schema.minItems,
      message: "does not meet minimum length of " + schema.minItems
    });
  }

  return result;
};
/**
 * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.
 * @param instance
 * @param schema
 * @return {String|null}
 */


validators$1.maxItems = function validateMaxItems(instance, schema, options, ctx) {
  if (!this.types.array(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);

  if (!(instance.length <= schema.maxItems)) {
    result.addError({
      name: 'maxItems',
      argument: schema.maxItems,
      message: "does not meet maximum length of " + schema.maxItems
    });
  }

  return result;
};
/**
 * Validates that every item in an instance array is unique, when instance is an array
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */


validators$1.uniqueItems = function validateUniqueItems(instance, schema, options, ctx) {
  if (!this.types.array(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);

  function testArrays(v, i, a) {
    for (var j = i + 1; j < a.length; j++) {
      if (helpers.deepCompareStrict(v, a[j])) {
        return false;
      }
    }

    return true;
  }

  if (!instance.every(testArrays)) {
    result.addError({
      name: 'uniqueItems',
      message: "contains duplicate item"
    });
  }

  return result;
};
/**
 * Deep compares arrays for duplicates
 * @param v
 * @param i
 * @param a
 * @private
 * @return {boolean}
 */


function testArrays(v, i, a) {
  var j,
      len = a.length;

  for (j = i + 1, len; j < len; j++) {
    if (helpers.deepCompareStrict(v, a[j])) {
      return false;
    }
  }

  return true;
}
/**
 * Validates whether there are no duplicates, when the instance is an Array.
 * @param instance
 * @return {String|null}
 */


validators$1.uniqueItems = function validateUniqueItems(instance, schema, options, ctx) {
  if (!this.types.array(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);

  if (!instance.every(testArrays)) {
    result.addError({
      name: 'uniqueItems',
      message: "contains duplicate item"
    });
  }

  return result;
};
/**
 * Validate for the presence of dependency properties, if the instance is an object.
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {null|ValidatorResult}
 */


validators$1.dependencies = function validateDependencies(instance, schema, options, ctx) {
  if (!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);

  for (var property in schema.dependencies) {
    if (instance[property] === undefined) {
      continue;
    }

    var dep = schema.dependencies[property];
    var childContext = ctx.makeChild(dep, property);

    if (typeof dep == 'string') {
      dep = [dep];
    }

    if (Array.isArray(dep)) {
      dep.forEach(function (prop) {
        if (instance[prop] === undefined) {
          result.addError({
            // FIXME there's two different "dependencies" errors here with slightly different outputs
            // Can we make these the same? Or should we create different error types?
            name: 'dependencies',
            argument: childContext.propertyPath,
            message: "property " + prop + " not found, required by " + childContext.propertyPath
          });
        }
      });
    } else {
      var res = this.validateSchema(instance, dep, options, childContext);
      if (result.instance !== res.instance) result.instance = res.instance;

      if (res && res.errors.length) {
        result.addError({
          name: 'dependencies',
          argument: childContext.propertyPath,
          message: "does not meet dependency required by " + childContext.propertyPath
        });
        result.importErrors(res);
      }
    }
  }

  return result;
};
/**
 * Validates whether the instance value is one of the enumerated values.
 *
 * @param instance
 * @param schema
 * @return {ValidatorResult|null}
 */


validators$1['enum'] = function validateEnum(instance, schema, options, ctx) {
  if (instance === undefined) {
    return null;
  }

  if (!Array.isArray(schema['enum'])) {
    throw new SchemaError("enum expects an array", schema);
  }

  var result = new ValidatorResult(instance, schema, options, ctx);

  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {
    result.addError({
      name: 'enum',
      argument: schema['enum'],
      message: "is not one of enum values: " + schema['enum'].map(String).join(',')
    });
  }

  return result;
};
/**
 * Validates whether the instance exactly matches a given value
 *
 * @param instance
 * @param schema
 * @return {ValidatorResult|null}
 */


validators$1['const'] = function validateEnum(instance, schema, options, ctx) {
  if (instance === undefined) {
    return null;
  }

  var result = new ValidatorResult(instance, schema, options, ctx);

  if (!helpers.deepCompareStrict(schema['const'], instance)) {
    result.addError({
      name: 'const',
      argument: schema['const'],
      message: "does not exactly match expected constant: " + schema['const']
    });
  }

  return result;
};
/**
 * Validates whether the instance if of a prohibited type.
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {null|ValidatorResult}
 */


validators$1.not = validators$1.disallow = function validateNot(instance, schema, options, ctx) {
  var self = this;
  if (instance === undefined) return null;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var notTypes = schema.not || schema.disallow;
  if (!notTypes) return null;
  if (!Array.isArray(notTypes)) notTypes = [notTypes];
  notTypes.forEach(function (type) {
    if (self.testType(instance, schema, options, ctx, type)) {
      var schemaId = type && type.id && '<' + type.id + '>' || type;
      result.addError({
        name: 'not',
        argument: schemaId,
        message: "is of prohibited type " + schemaId
      });
    }
  });
  return result;
};

var attribute_1 = attribute;

var SchemaScanResult_1 = SchemaScanResult;

function SchemaScanResult(found, ref) {
  this.id = found;
  this.ref = ref;
}
/**
 * Adds a schema with a certain urn to the Validator instance.
 * @param string uri
 * @param object schema
 * @return {Object}
 */


var scan_1 = function scan(base, schema) {
  function scanSchema(baseuri, schema) {
    if (!schema || _typeof(schema) != 'object') return; // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined

    if (schema.$ref) {
      var resolvedUri = urilib.resolve(baseuri, schema.$ref);
      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;
      return;
    }

    var ourBase = schema.id ? urilib.resolve(baseuri, schema.id) : baseuri;

    if (ourBase) {
      // If there's no fragment, append an empty one
      if (ourBase.indexOf('#') < 0) ourBase += '#';

      if (found[ourBase]) {
        if (!helpers.deepCompareStrict(found[ourBase], schema)) {
          throw new Error('Schema <' + schema + '> already exists with different definition');
        }

        return found[ourBase];
      }

      found[ourBase] = schema; // strip trailing fragment

      if (ourBase[ourBase.length - 1] == '#') {
        found[ourBase.substring(0, ourBase.length - 1)] = schema;
      }
    }

    scanArray(ourBase + '/items', schema.items instanceof Array ? schema.items : [schema.items]);
    scanArray(ourBase + '/extends', schema.extends instanceof Array ? schema.extends : [schema.extends]);
    scanSchema(ourBase + '/additionalItems', schema.additionalItems);
    scanObject(ourBase + '/properties', schema.properties);
    scanSchema(ourBase + '/additionalProperties', schema.additionalProperties);
    scanObject(ourBase + '/definitions', schema.definitions);
    scanObject(ourBase + '/patternProperties', schema.patternProperties);
    scanObject(ourBase + '/dependencies', schema.dependencies);
    scanArray(ourBase + '/disallow', schema.disallow);
    scanArray(ourBase + '/allOf', schema.allOf);
    scanArray(ourBase + '/anyOf', schema.anyOf);
    scanArray(ourBase + '/oneOf', schema.oneOf);
    scanSchema(ourBase + '/not', schema.not);
  }

  function scanArray(baseuri, schemas) {
    if (!(schemas instanceof Array)) return;

    for (var i = 0; i < schemas.length; i++) {
      scanSchema(baseuri + '/' + i, schemas[i]);
    }
  }

  function scanObject(baseuri, schemas) {
    if (!schemas || _typeof(schemas) != 'object') return;

    for (var p in schemas) {
      scanSchema(baseuri + '/' + p, schemas[p]);
    }
  }

  var found = {};
  var ref = {};
  scanSchema(base, schema);
  return new SchemaScanResult(found, ref);
};

var scan = {
  SchemaScanResult: SchemaScanResult_1,
  scan: scan_1
};

var scanSchema = scan.scan;
var ValidatorResult$1 = helpers.ValidatorResult;
var SchemaError$1 = helpers.SchemaError;
var SchemaContext = helpers.SchemaContext; //var anonymousBase = 'vnd.jsonschema:///';

var anonymousBase = '/';
/**
 * Creates a new Validator object
 * @name Validator
 * @constructor
 */

var Validator = function Validator() {
  // Allow a validator instance to override global custom formats or to have their
  // own custom formats.
  this.customFormats = Object.create(Validator.prototype.customFormats);
  this.schemas = {};
  this.unresolvedRefs = []; // Use Object.create to make this extensible without Validator instances stepping on each other's toes.

  this.types = Object.create(types);
  this.attributes = Object.create(attribute_1.validators);
}; // Allow formats to be registered globally.


Validator.prototype.customFormats = {}; // Hint at the presence of a property

Validator.prototype.schemas = null;
Validator.prototype.types = null;
Validator.prototype.attributes = null;
Validator.prototype.unresolvedRefs = null;
/**
 * Adds a schema with a certain urn to the Validator instance.
 * @param schema
 * @param urn
 * @return {Object}
 */

Validator.prototype.addSchema = function addSchema(schema, base) {
  var self = this;

  if (!schema) {
    return null;
  }

  var scan$$1 = scanSchema(base || anonymousBase, schema);
  var ourUri = base || schema.id;

  for (var uri in scan$$1.id) {
    this.schemas[uri] = scan$$1.id[uri];
  }

  for (var uri in scan$$1.ref) {
    this.unresolvedRefs.push(uri);
  }

  this.unresolvedRefs = this.unresolvedRefs.filter(function (uri) {
    return typeof self.schemas[uri] === 'undefined';
  });
  return this.schemas[ourUri];
};

Validator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {
  if (!(schemas instanceof Array)) return;

  for (var i = 0; i < schemas.length; i++) {
    this.addSubSchema(baseuri, schemas[i]);
  }
};

Validator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {
  if (!schemas || _typeof(schemas) != 'object') return;

  for (var p in schemas) {
    this.addSubSchema(baseuri, schemas[p]);
  }
};
/**
 * Sets all the schemas of the Validator instance.
 * @param schemas
 */


Validator.prototype.setSchemas = function setSchemas(schemas) {
  this.schemas = schemas;
};
/**
 * Returns the schema of a certain urn
 * @param urn
 */


Validator.prototype.getSchema = function getSchema(urn) {
  return this.schemas[urn];
};
/**
 * Validates instance against the provided schema
 * @param instance
 * @param schema
 * @param [options]
 * @param [ctx]
 * @return {Array}
 */


Validator.prototype.validate = function validate(instance, schema, options, ctx) {
  if (!options) {
    options = {};
  }

  var propertyName = options.propertyName || 'instance'; // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI

  var base = urilib.resolve(options.base || anonymousBase, schema.id || '');

  if (!ctx) {
    ctx = new SchemaContext(schema, options, propertyName, base, Object.create(this.schemas));

    if (!ctx.schemas[base]) {
      ctx.schemas[base] = schema;
    }

    var found = scanSchema(base, schema);

    for (var n in found.id) {
      var sch = found.id[n];
      ctx.schemas[n] = sch;
    }
  }

  if (schema) {
    var result = this.validateSchema(instance, schema, options, ctx);

    if (!result) {
      throw new Error('Result undefined');
    }

    return result;
  }

  throw new SchemaError$1('no schema specified', schema);
};
/**
* @param Object schema
* @return mixed schema uri or false
*/


function shouldResolve(schema) {
  var ref = typeof schema === 'string' ? schema : schema.$ref;
  if (typeof ref == 'string') return ref;
  return false;
}
/**
 * Validates an instance against the schema (the actual work horse)
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @private
 * @return {ValidatorResult}
 */


Validator.prototype.validateSchema = function validateSchema(instance, schema, options, ctx) {
  var result = new ValidatorResult$1(instance, schema, options, ctx); // Support for the true/false schemas

  if (typeof schema === 'boolean') {
    if (schema === true) {
      // `true` is always valid
      schema = {};
    } else if (schema === false) {
      // `false` is always invalid
      schema = {
        type: []
      };
    }
  } else if (!schema) {
    // This might be a string
    throw new Error("schema is undefined");
  }

  if (schema['extends']) {
    if (schema['extends'] instanceof Array) {
      var schemaobj = {
        schema: schema,
        ctx: ctx
      };
      schema['extends'].forEach(this.schemaTraverser.bind(this, schemaobj));
      schema = schemaobj.schema;
      schemaobj.schema = null;
      schemaobj.ctx = null;
      schemaobj = null;
    } else {
      schema = helpers.deepMerge(schema, this.superResolve(schema['extends'], ctx));
    }
  } // If passed a string argument, load that schema URI


  var switchSchema;

  if (switchSchema = shouldResolve(schema)) {
    var resolved = this.resolve(schema, switchSchema, ctx);
    var subctx = new SchemaContext(resolved.subschema, options, ctx.propertyPath, resolved.switchSchema, ctx.schemas);
    return this.validateSchema(instance, resolved.subschema, options, subctx);
  }

  var skipAttributes = options && options.skipAttributes || []; // Validate each schema attribute against the instance

  for (var key in schema) {
    if (!attribute_1.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {
      var validatorErr = null;
      var validator = this.attributes[key];

      if (validator) {
        validatorErr = validator.call(this, instance, schema, options, ctx);
      } else if (options.allowUnknownAttributes === false) {
        // This represents an error with the schema itself, not an invalid instance
        throw new SchemaError$1("Unsupported attribute: " + key, schema);
      }

      if (validatorErr) {
        result.importErrors(validatorErr);
      }
    }
  }

  if (typeof options.rewrite == 'function') {
    var value = options.rewrite.call(this, instance, schema, options, ctx);
    result.instance = value;
  }

  return result;
};
/**
* @private
* @param Object schema
* @param SchemaContext ctx
* @returns Object schema or resolved schema
*/


Validator.prototype.schemaTraverser = function schemaTraverser(schemaobj, s) {
  schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));
};
/**
* @private
* @param Object schema
* @param SchemaContext ctx
* @returns Object schema or resolved schema
*/


Validator.prototype.superResolve = function superResolve(schema, ctx) {
  var ref;

  if (ref = shouldResolve(schema)) {
    return this.resolve(schema, ref, ctx).subschema;
  }

  return schema;
};
/**
* @private
* @param Object schema
* @param Object switchSchema
* @param SchemaContext ctx
* @return Object resolved schemas {subschema:String, switchSchema: String}
* @throws SchemaError
*/


Validator.prototype.resolve = function resolve(schema, switchSchema, ctx) {
  switchSchema = ctx.resolve(switchSchema); // First see if the schema exists under the provided URI

  if (ctx.schemas[switchSchema]) {
    return {
      subschema: ctx.schemas[switchSchema],
      switchSchema: switchSchema
    };
  } // Else try walking the property pointer


  var parsed = urilib.parse(switchSchema);
  var fragment = parsed && parsed.hash;
  var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);

  if (!document || !ctx.schemas[document]) {
    throw new SchemaError$1("no such schema <" + switchSchema + ">", schema);
  }

  var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));

  if (subschema === undefined) {
    throw new SchemaError$1("no such schema " + fragment + " located in <" + document + ">", schema);
  }

  return {
    subschema: subschema,
    switchSchema: switchSchema
  };
};
/**
 * Tests whether the instance if of a certain type.
 * @private
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @param type
 * @return {boolean}
 */


Validator.prototype.testType = function validateType(instance, schema, options, ctx, type) {
  if (typeof this.types[type] == 'function') {
    return this.types[type].call(this, instance);
  }

  if (type && _typeof(type) == 'object') {
    var res = this.validateSchema(instance, type, options, ctx);
    return res === undefined || !(res && res.errors.length);
  } // Undefined or properties not on the list are acceptable, same as not being defined


  return true;
};

var types = Validator.prototype.types = {};

types.string = function testString(instance) {
  return typeof instance == 'string';
};

types.number = function testNumber(instance) {
  // isFinite returns false for NaN, Infinity, and -Infinity
  return typeof instance == 'number' && isFinite(instance);
};

types.integer = function testInteger(instance) {
  return typeof instance == 'number' && instance % 1 === 0;
};

types.boolean = function testBoolean(instance) {
  return typeof instance == 'boolean';
};

types.array = function testArray(instance) {
  return Array.isArray(instance);
};

types['null'] = function testNull(instance) {
  return instance === null;
};

types.date = function testDate(instance) {
  return instance instanceof Date;
};

types.any = function testAny(instance) {
  return true;
};

types.object = function testObject(instance) {
  // TODO: fix this - see #15
  return instance && _typeof(instance) === 'object' && !(instance instanceof Array) && !(instance instanceof Date);
};

var validator = Validator;

var lib = createCommonjsModule(function (module) {

  var Validator = module.exports.Validator = validator;
  module.exports.ValidatorResult = helpers.ValidatorResult;
  module.exports.ValidationError = helpers.ValidationError;
  module.exports.SchemaError = helpers.SchemaError;
  module.exports.SchemaScanResult = scan.SchemaScanResult;
  module.exports.scan = scan.scan;

  module.exports.validate = function (instance, schema, options) {
    var v = new Validator();
    return v.validate(instance, schema, options);
  };
});
var lib_1 = lib.Validator;
var lib_2 = lib.ValidatorResult;
var lib_3 = lib.ValidationError;
var lib_4 = lib.SchemaError;
var lib_5 = lib.SchemaScanResult;
var lib_6 = lib.scan;
var lib_7 = lib.validate;

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns validator instance
 */

var getValidator = function getValidator(schema) {
  var v = new lib_1(); // v.addSchema(schema);

  return function (params) {
    return v.validate(params, schema);
  }; // return validator().compile(schema);
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var FilestackError =
/** @class */
function (_super) {
  __extends(FilestackError, _super);

  function FilestackError(message, details) {
    var _this = _super.call(this, message) || this;

    Object.setPrototypeOf(_this, FilestackError.prototype);
    _this.details = details;
    return _this;
  }

  return FilestackError;
}(Error);

/**
 * Align enum
 */

var AlignOptions;

(function (AlignOptions) {
  AlignOptions["left"] = "left";
  AlignOptions["right"] = "right";
  AlignOptions["center"] = "center";
  AlignOptions["bottom"] = "bottom";
  AlignOptions["top"] = "top";
})(AlignOptions || (AlignOptions = {}));
/**
 * Align enum with faces option
 */


var AlignFacesOptions;

(function (AlignFacesOptions) {
  AlignFacesOptions["left"] = "left";
  AlignFacesOptions["right"] = "right";
  AlignFacesOptions["center"] = "center";
  AlignFacesOptions["bottom"] = "bottom";
  AlignFacesOptions["top"] = "top";
  AlignFacesOptions["faces"] = "faces";
})(AlignFacesOptions || (AlignFacesOptions = {}));
/**
 * Fit enum
 */


var FitOptions;

(function (FitOptions) {
  FitOptions["clip"] = "clip";
  FitOptions["crop"] = "crop";
  FitOptions["scale"] = "scale";
  FitOptions["max"] = "max";
})(FitOptions || (FitOptions = {}));
/**
 * Blur enum
 */


var BlurMode;

(function (BlurMode) {
  BlurMode["linear"] = "linear";
  BlurMode["gaussian"] = "gaussian";
})(BlurMode || (BlurMode = {}));
/**
 * Shapes enum
 */


var ShapeType;

(function (ShapeType) {
  ShapeType["oval"] = "oval";
  ShapeType["rect"] = "rect";
})(ShapeType || (ShapeType = {}));
/**
 * Noise type enum
 */


var NoiseType;

(function (NoiseType) {
  NoiseType["none"] = "none";
  NoiseType["low"] = "low";
  NoiseType["medium"] = "medium";
  NoiseType["high"] = "high";
})(NoiseType || (NoiseType = {}));
/**
 * Style type enum
 */


var StyleType;

(function (StyleType) {
  StyleType["artwork"] = "artwork";
  StyleType["photo"] = "photo";
})(StyleType || (StyleType = {}));
/**
 * Color space enum
 */


var ColorspaceType;

(function (ColorspaceType) {
  ColorspaceType["RGB"] = "RGB";
  ColorspaceType["CMYK"] = "CMYK";
  ColorspaceType["Input"] = "Input";
})(ColorspaceType || (ColorspaceType = {}));
/**
 * Crop faces options enum
 */


var CropfacesType;

(function (CropfacesType) {
  CropfacesType["thumb"] = "thumb";
  CropfacesType["crop"] = "crop";
  CropfacesType["fill"] = "fill";
})(CropfacesType || (CropfacesType = {}));
/**
 * Convert to format
 */


var VideoTypes;

(function (VideoTypes) {
  VideoTypes["h264"] = "h264";
  VideoTypes["h264_hi"] = "h264.hi";
  VideoTypes["webm"] = "webm";
  VideoTypes["webm-hi"] = "webm.hi";
  VideoTypes["ogg"] = "ogg";
  VideoTypes["ogg-hi"] = "ogg.hi";
  VideoTypes["hls-variant"] = "hls.variant";
  VideoTypes["mp3"] = "mp3";
  VideoTypes["oga"] = "oga";
  VideoTypes["m4a"] = "m4a";
  VideoTypes["aac"] = "aac";
  VideoTypes["hls"] = "hls.variant.audio";
})(VideoTypes || (VideoTypes = {}));

var URLScreenshotAgent;

(function (URLScreenshotAgent) {
  URLScreenshotAgent["desktop"] = "desktop";
  URLScreenshotAgent["mobile"] = "mobile";
})(URLScreenshotAgent || (URLScreenshotAgent = {}));

var URLScreenshotMode;

(function (URLScreenshotMode) {
  URLScreenshotMode["all"] = "all";
  URLScreenshotMode["window"] = "window";
})(URLScreenshotMode || (URLScreenshotMode = {}));

var URLScreenshotOrientation;

(function (URLScreenshotOrientation) {
  URLScreenshotOrientation["portrait"] = "portrait";
  URLScreenshotOrientation["landscape"] = "landscape";
})(URLScreenshotOrientation || (URLScreenshotOrientation = {}));
/**
 * Video storage location
 */


var Locations;

(function (Locations) {
  Locations["s3"] = "s3";
  Locations["azure"] = "azure";
  Locations["gcs"] = "gcs";
  Locations["rackspace"] = "rackspace";
  Locations["dropbox"] = "dropbox";
})(Locations || (Locations = {}));

var VideoAccess;

(function (VideoAccess) {
  VideoAccess["private"] = "private";
  VideoAccess["public"] = "public";
})(VideoAccess || (VideoAccess = {}));

var VideoAccessMode;

(function (VideoAccessMode) {
  VideoAccessMode["preserve"] = "preserve";
  VideoAccessMode["constrain"] = "constrain";
  VideoAccessMode["letterbox"] = "letterbox";
  VideoAccessMode["pad"] = "pad";
  VideoAccessMode["crop"] = "crop";
})(VideoAccessMode || (VideoAccessMode = {}));

var handleRegexp = /^[\w\-]{20}$/;
/**
 * Class for handling filelinks. For now its supports all filestack transforms.
 * It outputs transform url or array of transforms
 * @example
 * const link = new Filelink('handle or externalUrl', 'apikey');
 * link.flip().flop().store();
 *
 * console.log(link.toString());
 * // enable base64 support
 * link.setBase64(true)
 *
 * console.log(link.toString());
 *
 * @export
 * @class Filelink
 */

var Filelink =
/** @class */
function () {
  /**
   * Class for generating tranformation urls
   * @param {(string | string[])} source - handle or multiple handles (i.e. for collage)
   * @param {string} [apikey] - your apikey - required for all external sources
   *
   * @memberof Filelink
   */
  function Filelink(source, apikey) {
    /**
     * Validator instance
     *
     * @private
     * @memberof Filelink
     */
    this.validator = getValidator(TransformSchema);
    /**
     * Applied transforms array
     *
     * @private
     * @memberof Filelink
     */

    this.transforms = [];
    /**
     * Is base64 support is enabled
     *
     * @private
     * @type {boolean}
     * @memberof Filelink
     */

    this.b64 = false;
    this.source = source;
    var isExternal = this.isSourceExternal();

    if (isExternal && !apikey) {
      throw new FilestackError('External sources requires apikey to handle transforms');
    }

    if (!isExternal && typeof this.source === 'string' && !handleRegexp.test(this.source)) {
      throw new FilestackError('Invalid filestack source provided');
    }

    this.apikey = apikey;
  }
  /**
   * Enable new base64 link support to avoid problems with special chars in link
   *
   * @param {boolean} flag
   * @returns
   * @memberof Filelink
   */


  Filelink.prototype.setBase64 = function (flag) {
    this.b64 = flag;
    return this;
  };
  /**
   * Set cname for transformation link
   *
   * @param {string} cname
   * @returns
   * @memberof Filelink
   */


  Filelink.prototype.setCname = function (cname) {
    this.cname = cname;
    return this;
  };
  /**
   * Set custom domain. Used for test purpose. It will be removed when after client.transform
   *
   * @param {string} domain
   * @returns
   * @memberof Filelink
   */


  Filelink.prototype.setCustomDomain = function (domain) {
    this.customDomain = domain;
    return this;
  };
  /**
   * Returns JSONSchema form transformations params
   *
   * @returns
   * @memberof Filelink
   */


  Filelink.prototype.getValidationSchema = function () {
    return TransformSchema;
  };
  /**
   * Returns transformations in JSON format
   *
   * @returns
   * @memberof Filelink
   */


  Filelink.prototype.getTransformations = function () {
    return this.transforms;
  };
  /**
   * Returns transform url
   *
   * @returns
   * @memberof Filelink
   */


  Filelink.prototype.toString = function () {
    var returnUrl = [];
    returnUrl.push(this.getCdnHost());

    if (this.apikey) {
      returnUrl.push(this.apikey);
    }

    var transformsString = this.generateTransformString();
    var source = this.source;

    if (this.b64) {
      if (this.transforms.length > 0) {
        transformsString = "b64/" + btoa(JSON.stringify(this.transforms));
      }

      if (Array.isArray(source)) {
        source = this.arrayToString(source);
      }

      source = "b64://" + btoa(source);
    } else {
      if (Array.isArray(source)) {
        source = this.arrayToString(source);
      } else {
        source = this.escapeValue(source);
      }
    }

    if (transformsString.length) {
      returnUrl.push(transformsString);
    }

    returnUrl.push(source);
    return returnUrl.join('/');
  };
  /**
   * Add task and validate
   *
   * @param {string} name
   * @param {*} [params]
   * @returns
   * @memberof Filelink
   */


  Filelink.prototype.addTask = function (name, params) {
    this.validateTask(name, params);

    if (name !== 'cache' && typeof params === 'boolean') {
      if (!params) {
        return this;
      } else {
        params = undefined;
      }
    } else if (_typeof(params) === 'object' && !Object.keys(params).length) {
      params = undefined;
    }

    this.transforms.push({
      name: name,
      params: params
    });
    return this;
  };
  /**
   * Cleanup transformations on filelink
   *
   * @returns
   * @memberof Filelink
   */


  Filelink.prototype.reset = function () {
    this.transforms = [];
    return this;
  };
  /**
   * Transformations part
   */

  /**
   * Adds flip transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#flip
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.flip = function () {
    return this.addTask('flip', true);
  };
  /**
   * Adds flop transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#flop
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.flop = function () {
    return this.addTask('flop', true);
  };
  /**
   * Adds enhance transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#enhance
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.enhance = function () {
    return this.addTask('enhance', true);
  };
  /**
   * Add security to link
   *
   * @see https://www.filestack.com/docs/api/processing/#redeye
   * @returns
   * @memberof Filelink
   */


  Filelink.prototype.redeye = function () {
    return this.addTask('redeye', true);
  };
  /**
   * Add monochrome transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#monochrome
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.monochrome = function () {
    return this.addTask('monochrome', true);
  };
  /**
   * Adds negative transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#negative
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.negative = function () {
    return this.addTask('negative', true);
  };
  /**
   * Adds enchance transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#tags
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.tags = function () {
    return this.addTask('tags', true);
  };
  /**
   * Adds sfw transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#sfw
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.sfw = function () {
    return this.addTask('sfw', true);
  };
  /**
   * Adds store transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#store
   * @param {(StoreParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.store = function (params) {
    return this.addTask('store', params);
  };
  /**
   * Adds cache transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#cache
   * @param {(CacheParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.cache = function (params) {
    return this.addTask('cache', params);
  };
  /**
   * Adds resize transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#resize
   * @param {ResizeParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.resize = function (params) {
    return this.addTask('resize', params);
  };
  /**
   * Adds crop transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#crop
   * @param {CropParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.crop = function (params) {
    return this.addTask('crop', params);
  };
  /**
   * Adds rotate transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#rotate
   * @param {RotateParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.rotate = function (params) {
    return this.addTask('rotate', params);
  };
  /**
   * Adds detect_faces transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#facial-detection
   * @param {(DetectFacesParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.detectFaces = function (params) {
    return this.addTask('detect_faces', params);
  };
  /**
   * Adds crop faces transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#crop-faces
   * @param {CropFacesParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.cropFaces = function (params) {
    return this.addTask('crop_faces', params);
  };
  /**
   * Adds pixelate faces transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#pixelate-faces
   * @param {PixelateFacesParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.pixelateFaces = function (params) {
    return this.addTask('pixelate_faces', params);
  };
  /**
   * Adds blur faces transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#blur-faces
   * @param {BlurFacesParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.blurFaces = function (params) {
    return this.addTask('blur_faces', params);
  };
  /**
   * Adds rounded corners transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#rounded-corners
   * @param {(RoundedCornersParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.roundedCorners = function (params) {
    return this.addTask('rounded_corners', params);
  };
  /**
   * Adds polaroid transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#polaroid
   * @param {(PolaroidParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.polaroid = function (params) {
    return this.addTask('polaroid', params);
  };
  /**
   * Adds vignette transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#vignette
   * @param {(VignetteParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.vignette = function (params) {
    return this.addTask('vignette', params);
  };
  /**
   * Adds torn edges transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#torn-edges
   * @param {(TornEdgesParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.tornEdges = function (params) {
    return this.addTask('torn_edges', params);
  };
  /**
   * Adds shadow transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#shadow
   * @param {(ShadowParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.shadow = function (params) {
    return this.addTask('shadow', params);
  };
  /**
   * Adds circle transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#circle
   * @param {(CircleParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.circle = function (params) {
    return this.addTask('circle', params);
  };
  /**
   * Adds border transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#border
   * @param {(BorderParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.border = function (params) {
    return this.addTask('border', params);
  };
  /**
   * Adds sharpen transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#sharpen
   * @param {(SharpenParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.sharpen = function (params) {
    return this.addTask('sharpen', params);
  };
  /**
   * Adds blur transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#blur
   * @param {(BlurParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.blur = function (params) {
    return this.addTask('blur', params);
  };
  /**
   * Adds blackwhite transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#blackwhite
   * @param {(BlackwhiteParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.blackwhite = function (params) {
    return this.addTask('blackwhite', params);
  };
  /**
   * Adds sepia transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#sepia
   * @param {(SepiaParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.sepia = function (params) {
    return this.addTask('sepia', params);
  };
  /**
   * Adds pixelate transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#pixelate
   * @param {(PixelateParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.pixelate = function (params) {
    return this.addTask('pixelate', params);
  };
  /**
   * Adds oilpaint transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#oil-paint
   * @param {(OilPaintParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.oilPaint = function (params) {
    return this.addTask('oil_paint', params);
  };
  /**
   * Adds modulate transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#modulate
   * @param {(ModulateParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.modulate = function (params) {
    return this.addTask('modulate', params);
  };
  /**
   * Adds partial pixelate transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#partial-pixelate
   * @param {PartialPixelateParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.partialPixelate = function (params) {
    return this.addTask('partial_pixelate', params);
  };
  /**
   * Adds partial blur transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#partial-blur
   * @param {PartialBlurParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.partialBlur = function (params) {
    return this.addTask('partial_blur', params);
  };
  /**
   * Adds collage transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#collage
   * @param {CollageParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.collage = function (params) {
    return this.addTask('collage', params);
  };
  /**
   * Adds upscale transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#upscale
   * @param {(UpscaleParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.upscale = function (params) {
    return this.addTask('upscale', params);
  };
  /**
   * Adds ascii transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#ascii
   * @param {(AsciiParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.ascii = function (params) {
    return this.addTask('ascii', params);
  };
  /**
   * Adds quality transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#quality
   * @param {QualityParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.quality = function (params) {
    return this.addTask('quality', params);
  };
  /**
   * Adds security transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#security
   * @param {SecurityParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.security = function (params) {
    return this.addTask('security', params);
  };
  /**
   * Adds output transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#output
   * @param {OutputParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.output = function (params) {
    return this.addTask('output', params);
  };
  /**
   * Adds video convert transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#video-convert
   * @param {VideoConvertParams} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.videoConvert = function (params) {
    return this.addTask('video_convert', params);
  };
  /**
   * Adds URLScreenshot transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#urlscreenshot
   * @param {(URLScreenshotParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.URLScreenshot = function (params) {
    return this.addTask('urlscreenshot', params);
  };
  /**
   * Adds pdfinfo transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#pdfinfo
   * @param {(PdfInfoParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.PDFInfo = function (params) {
    return this.addTask('pdfinfo', params);
  };
  /**
   * Adds pdfconvert transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#pdfconvert
   * @param {(PdfConvertParams | boolean)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.PDFConvert = function (params) {
    return this.addTask('pdfconvert', params);
  };
  /**
   * Adds fallback transformation
   *
   * @see https://www.filestack.com/docs/api/processing/#fallback
   * @param {(FallbackParams)} params
   * @returns this
   * @memberof Filelink
   */


  Filelink.prototype.fallback = function (params) {
    return this.addTask('fallback', params);
  };
  /**
   * Checks if source is external
   *
   * @private
   * @returns {boolean}
   * @memberof Filelink
   */


  Filelink.prototype.isSourceExternal = function () {
    if (!this.source) {
      throw new FilestackError('Source not Set');
    }

    var toTest = Array.isArray(this.source) ? this.source : [this.source];

    for (var i in toTest) {
      if (!toTest.hasOwnProperty(i)) {
        continue;
      }

      if (toTest[i].indexOf('src:') === 0 || toTest[i].indexOf('http') === 0) {
        return true;
      }
    }

    return false;
  };
  /**
   * Validate single task against schema
   *
   * @private
   * @param {*} name
   * @param {*} options
   * @returns {void}
   * @memberof Filelink
   */


  Filelink.prototype.validateTask = function (name, options) {
    var toValidate = {};
    toValidate[name] = options;
    var res = this.validator(toValidate);

    if (res.errors.length) {
      throw new FilestackError("Task \"" + name + "\" validation error, Params: " + JSON.stringify(options), res.errors);
    }

    return;
  };
  /**
   * Returns correct cdn url with cname support
   *
   * @private
   * @returns {string}
   * @memberof Filelink
   */


  Filelink.prototype.getCdnHost = function () {
    var urls = config.urls;

    if (this.customDomain) {
      urls.cdnUrl = this.customDomain;
    }

    urls = resolveHost(urls, this.cname);
    return urls.cdnUrl;
  };
  /**
   * Returns applied transformations as string
   *
   * @private
   * @returns {string}
   * @memberof Filelink
   */


  Filelink.prototype.generateTransformString = function () {
    var _this = this;

    var transforms = [];
    this.transforms.forEach(function (el) {
      transforms.push(_this.optionToString(el.name, el.params));
    });
    return transforms.join('/');
  };
  /**
   * Flatten transformation option to string
   *
   * @private
   * @example {resize:{width: 100,height: 200}} => resize=width:100,height:200
   * @param key - option key
   * @param values - option params
   */


  Filelink.prototype.optionToString = function (key, values) {
    var _this = this;

    var optionsString = [];

    if (typeof values === 'undefined') {
      return key;
    }

    if (_typeof(values) === 'object' && !Object.keys(values).length) {
      return key;
    } // if we just want to enable feature


    if (typeof values === 'boolean') {
      if (!values) {
        if (key === 'cache') {
          return 'cache=false';
        }

        return '';
      }

      return key;
    }

    Object.keys(values).forEach(function (i) {
      if (Array.isArray(values[i])) {
        optionsString.push(i + ":" + _this.arrayToString(values[i]));
        return;
      }

      optionsString.push(i + ":" + _this.escapeValue(values[i]));
    });
    return key + "=" + optionsString.join(',');
  };
  /**
   * Escape params values
   *
   * @private
   * @param {string} value
   * @returns {string}
   * @memberof Filelink
   */


  Filelink.prototype.escapeValue = function (value) {
    if (typeof value !== 'string') {
      return value;
    }

    if (value.indexOf('/') > -1) {
      return "\"" + value + "\"";
    }

    return value;
  };
  /**
   * Converts nested arrays to string
   *
   * @private
   * @example [1,2, [2,3]] => "[1,2, [2,3]]"
   * @param arr - any array
   */


  Filelink.prototype.arrayToString = function (arr) {
    var _this = this;

    var toReturn = arr.map(function (el) {
      if (Array.isArray(el)) {
        return _this.arrayToString(el);
      }

      return _this.escapeValue(el);
    });
    return "[" + toReturn + "]";
  };

  return Filelink;
}();

/**
 * @private
 */

var toSnakeCase = function toSnakeCase(original) {
  var snakeCased = {};
  var keys = Object.keys(original);

  for (var i = 0; i < keys.length; i++) {
    var newKey = keys[i].split(/(?=[A-Z])/).join('_').toLowerCase();

    if (_typeof(original[keys[i]]) === 'object' && !Array.isArray(original[keys[i]])) {
      snakeCased[newKey] = toSnakeCase(original[keys[i]]);
    } else {
      snakeCased[newKey] = original[keys[i]];
    }
  }

  return snakeCased;
};
/**
 * Align enum
 */


var EAlignOptions;

(function (EAlignOptions) {
  EAlignOptions["left"] = "left";
  EAlignOptions["right"] = "right";
  EAlignOptions["center"] = "center";
  EAlignOptions["bottom"] = "bottom";
  EAlignOptions["top"] = "top";
})(EAlignOptions || (EAlignOptions = {}));
/**
 * Align enum with faces option
 */


var EAlignFacesOptions;

(function (EAlignFacesOptions) {
  EAlignFacesOptions["left"] = "left";
  EAlignFacesOptions["right"] = "right";
  EAlignFacesOptions["center"] = "center";
  EAlignFacesOptions["bottom"] = "bottom";
  EAlignFacesOptions["top"] = "top";
  EAlignFacesOptions["faces"] = "faces";
})(EAlignFacesOptions || (EAlignFacesOptions = {}));
/**
 * Fit enum
 */


var EFitOptions;

(function (EFitOptions) {
  EFitOptions["clip"] = "clip";
  EFitOptions["crop"] = "crop";
  EFitOptions["scale"] = "scale";
  EFitOptions["max"] = "max";
})(EFitOptions || (EFitOptions = {}));
/**
 * Blur enum
 */


var EBlurMode;

(function (EBlurMode) {
  EBlurMode["linear"] = "linear";
  EBlurMode["gaussian"] = "gaussian";
})(EBlurMode || (EBlurMode = {}));
/**
 * Shapes enum
 */


var EShapeType;

(function (EShapeType) {
  EShapeType["oval"] = "oval";
  EShapeType["rect"] = "rect";
})(EShapeType || (EShapeType = {}));
/**
 * Noise type enum
 */


var ENoiseType;

(function (ENoiseType) {
  ENoiseType["none"] = "none";
  ENoiseType["low"] = "low";
  ENoiseType["medium"] = "medium";
  ENoiseType["high"] = "high";
})(ENoiseType || (ENoiseType = {}));
/**
 * Style type enum
 */


var EStyleType;

(function (EStyleType) {
  EStyleType["artwork"] = "artwork";
  EStyleType["photo"] = "photo";
})(EStyleType || (EStyleType = {}));
/**
 * Color space enum
 */


var EColorspaceType;

(function (EColorspaceType) {
  EColorspaceType["RGB"] = "RGB";
  EColorspaceType["CMYK"] = "CMYK";
  EColorspaceType["Input"] = "Input";
})(EColorspaceType || (EColorspaceType = {}));
/**
 * Crop faces options enum
 */


var ECropfacesType;

(function (ECropfacesType) {
  ECropfacesType["thumb"] = "thumb";
  ECropfacesType["crop"] = "crop";
  ECropfacesType["fill"] = "fill";
})(ECropfacesType || (ECropfacesType = {}));
/**
 * Convert to format
 */


var EVideoTypes;

(function (EVideoTypes) {
  EVideoTypes["h264"] = "h264";
  EVideoTypes["h264_hi"] = "h264.hi";
  EVideoTypes["webm"] = "webm";
  EVideoTypes["webm-hi"] = "webm.hi";
  EVideoTypes["ogg"] = "ogg";
  EVideoTypes["ogg-hi"] = "ogg.hi";
  EVideoTypes["hls-variant"] = "hls.variant";
  EVideoTypes["mp3"] = "mp3";
  EVideoTypes["oga"] = "oga";
  EVideoTypes["m4a"] = "m4a";
  EVideoTypes["aac"] = "aac";
  EVideoTypes["hls"] = "hls.variant.audio";
})(EVideoTypes || (EVideoTypes = {}));

var EUrlscreenshotAgent;

(function (EUrlscreenshotAgent) {
  EUrlscreenshotAgent["desktop"] = "desktop";
  EUrlscreenshotAgent["mobile"] = "mobile";
})(EUrlscreenshotAgent || (EUrlscreenshotAgent = {}));

var EUrlscreenshotMode;

(function (EUrlscreenshotMode) {
  EUrlscreenshotMode["all"] = "all";
  EUrlscreenshotMode["window"] = "window";
})(EUrlscreenshotMode || (EUrlscreenshotMode = {}));

var EUrlscreenshotOrientation;

(function (EUrlscreenshotOrientation) {
  EUrlscreenshotOrientation["portrait"] = "portrait";
  EUrlscreenshotOrientation["landscape"] = "landscape";
})(EUrlscreenshotOrientation || (EUrlscreenshotOrientation = {}));
/**
 * Video storage location
 */


var EVideoLocations;

(function (EVideoLocations) {
  EVideoLocations["s3"] = "s3";
  EVideoLocations["azure"] = "azure";
  EVideoLocations["gcs"] = "gcs";
  EVideoLocations["rackspace"] = "rackspace";
  EVideoLocations["dropbox"] = "dropbox";
})(EVideoLocations || (EVideoLocations = {}));

var EVideoAccess;

(function (EVideoAccess) {
  EVideoAccess["private"] = "private";
  EVideoAccess["public"] = "public";
})(EVideoAccess || (EVideoAccess = {}));

var EVideoAccessMode;

(function (EVideoAccessMode) {
  EVideoAccessMode["preserve"] = "preserve";
  EVideoAccessMode["constrain"] = "constrain";
  EVideoAccessMode["letterbox"] = "letterbox";
  EVideoAccessMode["pad"] = "pad";
  EVideoAccessMode["crop"] = "crop";
})(EVideoAccessMode || (EVideoAccessMode = {}));
/**
 * Creates filestack transform url.
 * Transform params can be provided in camelCase or snakeCase style
 *
 * @example
 * ```js
 * // camelCase
 * console.log(transform(session, {
 *    partialPixelate: {
 *      objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
 *    },
 *  }, 'testfile'));
 * ```
 * result => https://cdn.filestackcontent.com/partial_pixelate=objects:[[10,20,200,250],[275,91,500,557]]/testfile
 *
 * ```js
 * // snakeCase
 * console.log(transform(session, {
 *    partial_pixelate: {
 *      objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
 *    },
 *  }, 'testfile'));
 * ```
 * result => https://cdn.filestackcontent.com/partial_pixelate=objects:[[10,20,200,250],[275,91,500,557]]/testfile
 *
 * Client.transform is deprecated. Use Filelink class instead
 *
 * @private
 * @throws Error
 * @param options Transformation options
 * @param url url, handle or array of elements
 */


var transform = function transform(session, url, options, b64) {
  if (options === void 0) {
    options = {};
  }

  if (b64 === void 0) {
    b64 = false;
  }

  options = toSnakeCase(options);

  if (session.policy && session.signature) {
    options.security = {
      policy: session.policy,
      signature: session.signature
    };
  }

  var filelink = new Filelink(url, session.apikey);
  filelink.setCname(session.cname);
  filelink.setBase64(b64);

  if (session.urls.cdnUrl.indexOf('localhost') > -1) {
    filelink.setCustomDomain(session.urls.cdnUrl);
  }

  Object.keys(options).forEach(function (key) {
    if (typeof options[key] === 'boolean' && !options[key] && key !== 'cache') {
      return;
    }

    filelink.addTask(key, options[key]);
  });
  return filelink.toString();
};

/**
 *
 * @private
 * @param session
 * @param url
 * @param opts
 * @param token
 * @param security
 */

var storeURL = function storeURL(session, url, opts, token, security) {
  if (!url || typeof url !== 'string') {
    throw new Error('url is required for storeURL');
  }

  session.policy = security && security.policy || session.policy;
  session.signature = security && security.signature || session.signature;
  var baseURL = new Filelink(url, session.apikey);
  baseURL.setCname(session.cname); // baseURL.setBase64(true); // Enable it after fix in mocks

  if (session.urls.cdnUrl.indexOf('localhost') > -1 || session.urls.cdnUrl.indexOf('badurl') > -1) {
    baseURL.setCustomDomain(session.urls.cdnUrl);
  }

  if (session.policy && session.signature) {
    baseURL.security({
      policy: session.policy,
      signature: session.signature
    });
  }

  baseURL.store(opts); // const baseURL = transform(session, url, {
  //   store : opts || {},
  // });

  return new Promise(function (resolve, reject) {
    var req = client_1(baseURL.toString());

    if (token) {
      token.cancel = function () {
        req.abort();
        reject(new Error('Upload cancelled'));
      };
    }

    return req.then(function (res) {
      if (res.body && res.body.url) {
        var handle = res.body.url.split('/').pop();

        var response = _assign({}, res.body, {
          handle: handle,
          mimetype: res.body.type
        });

        return resolve(response);
      }

      return resolve(res.body);
    }).catch(function (err) {
      reject(err);
    });
  });
};

/**
 * Implementation of atob() according to the HTML and Infra specs, except that
 * instead of throwing INVALID_CHARACTER_ERR we return null.
 */

function atob(data) {
  // Web IDL requires DOMStrings to just be converted using ECMAScript
  // ToString, which in our case amounts to using a template literal.
  data = "".concat(data); // "Remove all ASCII whitespace from data."

  data = data.replace(/[ \t\n\f\r]/g, ""); // "If data's length divides by 4 leaving no remainder, then: if data ends
  // with one or two U+003D (=) code points, then remove them from data."

  if (data.length % 4 === 0) {
    data = data.replace(/==?$/, "");
  } // "If data's length divides by 4 leaving a remainder of 1, then return
  // failure."
  //
  // "If data contains a code point that is not one of
  //
  // U+002B (+)
  // U+002F (/)
  // ASCII alphanumeric
  //
  // then return failure."


  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {
    return null;
  } // "Let output be an empty byte sequence."


  var output = ""; // "Let buffer be an empty buffer that can have bits appended to it."
  //
  // We append bits via left-shift and or.  accumulatedBits is used to track
  // when we've gotten to 24 bits.

  var buffer = 0;
  var accumulatedBits = 0; // "Let position be a position variable for data, initially pointing at the
  // start of data."
  //
  // "While position does not point past the end of data:"

  for (var i = 0; i < data.length; i++) {
    // "Find the code point pointed to by position in the second column of
    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in
    // the first cell of the same row.
    //
    // "Append to buffer the six bits corresponding to n, most significant bit
    // first."
    //
    // atobLookup() implements the table from RFC 4648.
    buffer <<= 6;
    buffer |= atobLookup(data[i]);
    accumulatedBits += 6; // "If buffer has accumulated 24 bits, interpret them as three 8-bit
    // big-endian numbers. Append three bytes with values equal to those
    // numbers to output, in the same order, and then empty buffer."

    if (accumulatedBits === 24) {
      output += String.fromCharCode((buffer & 0xff0000) >> 16);
      output += String.fromCharCode((buffer & 0xff00) >> 8);
      output += String.fromCharCode(buffer & 0xff);
      buffer = accumulatedBits = 0;
    } // "Advance position by 1."

  } // "If buffer is not empty, it contains either 12 or 18 bits. If it contains
  // 12 bits, then discard the last four and interpret the remaining eight as
  // an 8-bit big-endian number. If it contains 18 bits, then discard the last
  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append
  // the one or two bytes with values equal to those one or two numbers to
  // output, in the same order."


  if (accumulatedBits === 12) {
    buffer >>= 4;
    output += String.fromCharCode(buffer);
  } else if (accumulatedBits === 18) {
    buffer >>= 2;
    output += String.fromCharCode((buffer & 0xff00) >> 8);
    output += String.fromCharCode(buffer & 0xff);
  } // "Return output."


  return output;
}
/**
 * A lookup table for atob(), which converts an ASCII character to the
 * corresponding six-bit number.
 */


function atobLookup(chr) {
  if (/[A-Z]/.test(chr)) {
    return chr.charCodeAt(0) - "A".charCodeAt(0);
  }

  if (/[a-z]/.test(chr)) {
    return chr.charCodeAt(0) - "a".charCodeAt(0) + 26;
  }

  if (/[0-9]/.test(chr)) {
    return chr.charCodeAt(0) - "0".charCodeAt(0) + 52;
  }

  if (chr === "+") {
    return 62;
  }

  if (chr === "/") {
    return 63;
  } // Throw exception; should not be hit in tests


  return undefined;
}

var atob_1 = atob;

/**
 * btoa() as defined by the HTML and Infra specs, which mostly just references
 * RFC 4648.
 */

function btoa$1(s) {
  var i; // String conversion as required by Web IDL.

  s = "".concat(s); // "The btoa() method must throw an "InvalidCharacterError" DOMException if
  // data contains any character whose code point is greater than U+00FF."

  for (i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) > 255) {
      return null;
    }
  }

  var out = "";

  for (i = 0; i < s.length; i += 3) {
    var groupsOfSix = [undefined, undefined, undefined, undefined];
    groupsOfSix[0] = s.charCodeAt(i) >> 2;
    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;

    if (s.length > i + 1) {
      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;
      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;
    }

    if (s.length > i + 2) {
      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;
      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;
    }

    for (var j = 0; j < groupsOfSix.length; j++) {
      if (typeof groupsOfSix[j] === "undefined") {
        out += "=";
      } else {
        out += btoaLookup(groupsOfSix[j]);
      }
    }
  }

  return out;
}
/**
 * Lookup table for btoa(), which converts a six-bit number into the
 * corresponding ASCII character.
 */


function btoaLookup(idx) {
  if (idx < 26) {
    return String.fromCharCode(idx + "A".charCodeAt(0));
  }

  if (idx < 52) {
    return String.fromCharCode(idx - 26 + "a".charCodeAt(0));
  }

  if (idx < 62) {
    return String.fromCharCode(idx - 52 + "0".charCodeAt(0));
  }

  if (idx === 62) {
    return "+";
  }

  if (idx === 63) {
    return "/";
  } // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.


  return undefined;
}

var btoa_1 = btoa$1;

var abab = {
  atob: atob_1,
  btoa: btoa_1
};
var abab_1 = abab.atob;
var abab_2 = abab.btoa;

var sparkMd5 = createCommonjsModule(function (module, exports) {
  (function (factory) {
    {
      // Node/CommonJS
      module.exports = factory();
    }
  })(function (undefined) {
    /*
     * Fastest md5 implementation around (JKM md5).
     * Credits: Joseph Myers
     *
     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
     * @see http://jsperf.com/md5-shootout/7
     */

    /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */

    var hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];

    function md5cycle(x, k) {
      var a = x[0],
          b = x[1],
          c = x[2],
          d = x[3];
      a += (b & c | ~b & d) + k[0] - 680876936 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[1] - 389564586 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[2] + 606105819 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & c | ~b & d) + k[4] - 176418897 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[7] - 45705983 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[10] - 42063 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[13] - 40341101 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & d | c & ~d) + k[1] - 165796510 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[11] + 643717713 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[0] - 373897302 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b & d | c & ~d) + k[5] - 701558691 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[10] + 38016083 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[15] - 660478335 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[4] - 405537848 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b & d | c & ~d) + k[9] + 568446438 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[3] - 187363961 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[2] - 51403784 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b ^ c ^ d) + k[5] - 378558 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[14] - 35309556 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[7] - 155497632 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (b ^ c ^ d) + k[13] + 681279174 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[0] - 358537222 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[3] - 722521979 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[6] + 76029189 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (b ^ c ^ d) + k[9] - 640364487 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[12] - 421815835 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[15] + 530742520 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[2] - 995338651 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      x[0] = a + x[0] | 0;
      x[1] = b + x[1] | 0;
      x[2] = c + x[2] | 0;
      x[3] = d + x[3] | 0;
    }

    function md5blk(s) {
      var md5blks = [],
          i;
      /* Andy King said do it this way. */

      for (i = 0; i < 64; i += 4) {
        md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
      }

      return md5blks;
    }

    function md5blk_array(a) {
      var md5blks = [],
          i;
      /* Andy King said do it this way. */

      for (i = 0; i < 64; i += 4) {
        md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
      }

      return md5blks;
    }

    function md51(s) {
      var n = s.length,
          state = [1732584193, -271733879, -1732584194, 271733878],
          i,
          length,
          tail,
          tmp,
          lo,
          hi;

      for (i = 64; i <= n; i += 64) {
        md5cycle(state, md5blk(s.substring(i - 64, i)));
      }

      s = s.substring(i - 64);
      length = s.length;
      tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

      for (i = 0; i < length; i += 1) {
        tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
      }

      tail[i >> 2] |= 0x80 << (i % 4 << 3);

      if (i > 55) {
        md5cycle(state, tail);

        for (i = 0; i < 16; i += 1) {
          tail[i] = 0;
        }
      } // Beware that the final length might not fit in 32 bits so we take care of that


      tmp = n * 8;
      tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
      lo = parseInt(tmp[2], 16);
      hi = parseInt(tmp[1], 16) || 0;
      tail[14] = lo;
      tail[15] = hi;
      md5cycle(state, tail);
      return state;
    }

    function md51_array(a) {
      var n = a.length,
          state = [1732584193, -271733879, -1732584194, 271733878],
          i,
          length,
          tail,
          tmp,
          lo,
          hi;

      for (i = 64; i <= n; i += 64) {
        md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
      } // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
      // containing the last element of the parent array if the sub array specified starts
      // beyond the length of the parent array - weird.
      // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue


      a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0);
      length = a.length;
      tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

      for (i = 0; i < length; i += 1) {
        tail[i >> 2] |= a[i] << (i % 4 << 3);
      }

      tail[i >> 2] |= 0x80 << (i % 4 << 3);

      if (i > 55) {
        md5cycle(state, tail);

        for (i = 0; i < 16; i += 1) {
          tail[i] = 0;
        }
      } // Beware that the final length might not fit in 32 bits so we take care of that


      tmp = n * 8;
      tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
      lo = parseInt(tmp[2], 16);
      hi = parseInt(tmp[1], 16) || 0;
      tail[14] = lo;
      tail[15] = hi;
      md5cycle(state, tail);
      return state;
    }

    function rhex(n) {
      var s = '',
          j;

      for (j = 0; j < 4; j += 1) {
        s += hex_chr[n >> j * 8 + 4 & 0x0F] + hex_chr[n >> j * 8 & 0x0F];
      }

      return s;
    }

    function hex(x) {
      var i;

      for (i = 0; i < x.length; i += 1) {
        x[i] = rhex(x[i]);
      }

      return x.join('');
    } // In some cases the fast add32 function cannot be used..


    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {
    } // ---------------------------------------------------

    /**
     * ArrayBuffer slice polyfill.
     *
     * @see https://github.com/ttaubert/node-arraybuffer-slice
     */


    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
      (function () {
        function clamp(val, length) {
          val = val | 0 || 0;

          if (val < 0) {
            return Math.max(val + length, 0);
          }

          return Math.min(val, length);
        }

        ArrayBuffer.prototype.slice = function (from, to) {
          var length = this.byteLength,
              begin = clamp(from, length),
              end = length,
              num,
              target,
              targetArray,
              sourceArray;

          if (to !== undefined) {
            end = clamp(to, length);
          }

          if (begin > end) {
            return new ArrayBuffer(0);
          }

          num = end - begin;
          target = new ArrayBuffer(num);
          targetArray = new Uint8Array(target);
          sourceArray = new Uint8Array(this, begin, num);
          targetArray.set(sourceArray);
          return target;
        };
      })();
    } // ---------------------------------------------------

    /**
     * Helpers.
     */


    function toUtf8(str) {
      if (/[\u0080-\uFFFF]/.test(str)) {
        str = unescape(encodeURIComponent(str));
      }

      return str;
    }

    function utf8Str2ArrayBuffer(str, returnUInt8Array) {
      var length = str.length,
          buff = new ArrayBuffer(length),
          arr = new Uint8Array(buff),
          i;

      for (i = 0; i < length; i += 1) {
        arr[i] = str.charCodeAt(i);
      }

      return returnUInt8Array ? arr : buff;
    }

    function arrayBuffer2Utf8Str(buff) {
      return String.fromCharCode.apply(null, new Uint8Array(buff));
    }

    function concatenateArrayBuffers(first, second, returnUInt8Array) {
      var result = new Uint8Array(first.byteLength + second.byteLength);
      result.set(new Uint8Array(first));
      result.set(new Uint8Array(second), first.byteLength);
      return returnUInt8Array ? result : result.buffer;
    }

    function hexToBinaryString(hex) {
      var bytes = [],
          length = hex.length,
          x;

      for (x = 0; x < length - 1; x += 2) {
        bytes.push(parseInt(hex.substr(x, 2), 16));
      }

      return String.fromCharCode.apply(String, bytes);
    } // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation.
     *
     * Use this class to perform an incremental md5, otherwise use the
     * static methods instead.
     */


    function SparkMD5() {
      // call reset to init the instance
      this.reset();
    }
    /**
     * Appends a string.
     * A conversion will be applied if an utf8 string is detected.
     *
     * @param {String} str The string to be appended
     *
     * @return {SparkMD5} The instance itself
     */


    SparkMD5.prototype.append = function (str) {
      // Converts the string to utf8 bytes if necessary
      // Then append as binary
      this.appendBinary(toUtf8(str));
      return this;
    };
    /**
     * Appends a binary string.
     *
     * @param {String} contents The binary string to be appended
     *
     * @return {SparkMD5} The instance itself
     */


    SparkMD5.prototype.appendBinary = function (contents) {
      this._buff += contents;
      this._length += contents.length;
      var length = this._buff.length,
          i;

      for (i = 64; i <= length; i += 64) {
        md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
      }

      this._buff = this._buff.substring(i - 64);
      return this;
    };
    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */


    SparkMD5.prototype.end = function (raw) {
      var buff = this._buff,
          length = buff.length,
          i,
          tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          ret;

      for (i = 0; i < length; i += 1) {
        tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3);
      }

      this._finish(tail, length);

      ret = hex(this._hash);

      if (raw) {
        ret = hexToBinaryString(ret);
      }

      this.reset();
      return ret;
    };
    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5} The instance itself
     */


    SparkMD5.prototype.reset = function () {
      this._buff = '';
      this._length = 0;
      this._hash = [1732584193, -271733879, -1732584194, 271733878];
      return this;
    };
    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */


    SparkMD5.prototype.getState = function () {
      return {
        buff: this._buff,
        length: this._length,
        hash: this._hash
      };
    };
    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5} The instance itself
     */


    SparkMD5.prototype.setState = function (state) {
      this._buff = state.buff;
      this._length = state.length;
      this._hash = state.hash;
      return this;
    };
    /**
     * Releases memory used by the incremental buffer and other additional
     * resources. If you plan to use the instance again, use reset instead.
     */


    SparkMD5.prototype.destroy = function () {
      delete this._hash;
      delete this._buff;
      delete this._length;
    };
    /**
     * Finish the final calculation based on the tail.
     *
     * @param {Array}  tail   The tail (will be modified)
     * @param {Number} length The length of the remaining buffer
     */


    SparkMD5.prototype._finish = function (tail, length) {
      var i = length,
          tmp,
          lo,
          hi;
      tail[i >> 2] |= 0x80 << (i % 4 << 3);

      if (i > 55) {
        md5cycle(this._hash, tail);

        for (i = 0; i < 16; i += 1) {
          tail[i] = 0;
        }
      } // Do the final computation based on the tail and length
      // Beware that the final length may not fit in 32 bits so we take care of that


      tmp = this._length * 8;
      tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
      lo = parseInt(tmp[2], 16);
      hi = parseInt(tmp[1], 16) || 0;
      tail[14] = lo;
      tail[15] = hi;
      md5cycle(this._hash, tail);
    };
    /**
     * Performs the md5 hash on a string.
     * A conversion will be applied if utf8 string is detected.
     *
     * @param {String}  str The string
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */


    SparkMD5.hash = function (str, raw) {
      // Converts the string to utf8 bytes if necessary
      // Then compute it using the binary function
      return SparkMD5.hashBinary(toUtf8(str), raw);
    };
    /**
     * Performs the md5 hash on a binary string.
     *
     * @param {String}  content The binary string
     * @param {Boolean} raw     True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */


    SparkMD5.hashBinary = function (content, raw) {
      var hash = md51(content),
          ret = hex(hash);
      return raw ? hexToBinaryString(ret) : ret;
    }; // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation for array buffers.
     *
     * Use this class to perform an incremental md5 ONLY for array buffers.
     */


    SparkMD5.ArrayBuffer = function () {
      // call reset to init the instance
      this.reset();
    };
    /**
     * Appends an array buffer.
     *
     * @param {ArrayBuffer} arr The array to be appended
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */


    SparkMD5.ArrayBuffer.prototype.append = function (arr) {
      var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
          length = buff.length,
          i;
      this._length += arr.byteLength;

      for (i = 64; i <= length; i += 64) {
        md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
      }

      this._buff = i - 64 < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);
      return this;
    };
    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */


    SparkMD5.ArrayBuffer.prototype.end = function (raw) {
      var buff = this._buff,
          length = buff.length,
          tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          i,
          ret;

      for (i = 0; i < length; i += 1) {
        tail[i >> 2] |= buff[i] << (i % 4 << 3);
      }

      this._finish(tail, length);

      ret = hex(this._hash);

      if (raw) {
        ret = hexToBinaryString(ret);
      }

      this.reset();
      return ret;
    };
    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */


    SparkMD5.ArrayBuffer.prototype.reset = function () {
      this._buff = new Uint8Array(0);
      this._length = 0;
      this._hash = [1732584193, -271733879, -1732584194, 271733878];
      return this;
    };
    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */


    SparkMD5.ArrayBuffer.prototype.getState = function () {
      var state = SparkMD5.prototype.getState.call(this); // Convert buffer to a string

      state.buff = arrayBuffer2Utf8Str(state.buff);
      return state;
    };
    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */


    SparkMD5.ArrayBuffer.prototype.setState = function (state) {
      // Convert string to buffer
      state.buff = utf8Str2ArrayBuffer(state.buff, true);
      return SparkMD5.prototype.setState.call(this, state);
    };

    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;
    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;
    /**
     * Performs the md5 hash on an array buffer.
     *
     * @param {ArrayBuffer} arr The array buffer
     * @param {Boolean}     raw True to get the raw string, false to get the hex one
     *
     * @return {String} The result
     */

    SparkMD5.ArrayBuffer.hash = function (arr, raw) {
      var hash = md51_array(new Uint8Array(arr)),
          ret = hex(hash);
      return raw ? hexToBinaryString(ret) : ret;
    };

    return SparkMD5;
  });
});
var sparkMd5_1 = sparkMd5.ArrayBuffer;

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Calculates a MD5 checksum for passed buffer
 * @private
 * @param data  Data to be hashed
 * @returns     base64 encoded MD5 hash
 */

var calcMD5 = function calcMD5(data) {
  return abab_2(sparkMd5_1.hash(data, true));
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Is file?
 *
 * @private
 * @return {Boolean}
 */

var isFile = function isFile(file) {
  return file.toString() === '[object File]';
};
/**
 * Is blob?
 *
 * @private
 * @param blob
 * @returns {Boolean}
 */


var isBlob = function isBlob(blob) {
  return isFile(blob) || blob.toString() === '[object Blob]';
};
/**
 * Convert encoded base64 string or dataURI to blob
 * @param b64data     String to decode
 * @param sliceSize   Byte quantity to split data into
 * @private
 * @returns {Blob}
 */


var b64toBlob = function b64toBlob(b64Data, sliceSize) {
  if (sliceSize === void 0) {
    sliceSize = 512;
  }

  var byteString;
  var contentType = '';

  if (b64Data.split(',')[0].indexOf('base64') >= 0) {
    byteString = b64Data.split(',')[1];
  }

  if (byteString !== undefined) {
    contentType = b64Data.split(',')[0].split(':')[1].split(';')[0];
    b64Data = decodeURI(byteString);
  }

  var byteCharacters = abab_1(b64Data);
  var byteArrays = [];

  for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    var slice = byteCharacters.slice(offset, offset + sliceSize);
    var byteNumbers = new Array(slice.length);

    for (var i = 0; i < slice.length; i += 1) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    var byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }

  var blob = new Blob(byteArrays, {
    type: contentType
  });
  return blob;
};
/**
 * Get start and end for slice operations
 * @private
 * @returns Object where keys are `start` and `end`
 */


var getRange = function getRange(_a, partNumber) {
  var config = _a.config,
      file = _a.file;
  var start = partNumber * config.partSize;
  var end = Math.min(start + config.partSize, file.size);
  return {
    start: start,
    end: end
  };
};
/**
 * Slice file into a single part
 * @private
 */


var sliceFile = function sliceFile(ctx, partNumber) {
  var _a = getRange(ctx, partNumber),
      start = _a.start,
      end = _a.end;

  return ctx.file.slice(start, end);
};
/**
 * Reads file as ArrayBuffer using HTML5 FileReader implementation
 * @private
 * @param file  Valid File instance
 * @returns     {Promise}
 */


var readFile = function readFile(file) {
  return new Promise(function (resolve, reject) {
    var reader;

    if (File && FileReader && Blob) {
      reader = new FileReader();
      reader.onloadend = resolve;
      reader.onerror = reject;
      reader.readAsArrayBuffer(file);
    } else {
      reject(new Error('The File APIs are not fully supported by your browser'));
    }
  });
};
/**
 * Reads a slice of a file based on the current part.
 * @private
 */


var getPart = function getPart(part, ctx) {
  return readFile(sliceFile(ctx, part.number)).then(function (evt) {
    var buffer = evt.target.result;

    var newPart = _assign({}, part, {
      buffer: buffer,
      size: buffer.byteLength,
      md5: calcMD5(buffer)
    });

    return newPart;
  });
};
/**
 * Get a Blob from a File or string.
 * @private
 */

var getFile = function getFile(fileOrString) {
  var file = fileOrString;

  if (typeof fileOrString === 'string') {
    file = b64toBlob(file);
  }

  if (!file || !isBlob(file)) {
    return Promise.reject(new TypeError('File argument is not a valid Blob'));
  }

  return Promise.resolve(file);
};

var isMobile = function isMobile() {
  var vendor = navigator.userAgent || navigator.vendor || window.opera;
  return !!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(vendor) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(vendor.substr(0, 4)));
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 *
 * @private
 * @param file
 * @param cfg
 */
var getName = function getName(file, cfg) {
  return cfg.customName || file.name;
};

/**
 * @private
 */

/* istanbul ignore next */

var getHost = function getHost(host) {
  return undefined === 'unit' && host;
};
/**
 * @private
 */

/* istanbul ignore next */

var getLocationURL = function getLocationURL(url) {
  return url && "https://" + url;
};
/**
 * Generates multi-part fields for all requests
 * @private
 * @param fields  Object containing form data keys
 * @param config  Upload config
 */

var getFormData = function getFormData(fields, _a) {
  var store = _a.store;
  var fd = {};
  Object.keys(fields).forEach(function (key) {
    if (_typeof(fields[key]) === 'object') {
      fields[key] = JSON.stringify(fields[key]);
    }

    if (fields[key]) {
      fd[key] = fields[key];
    }
  });
  Object.keys(store).forEach(function (key) {
    if (_typeof(store[key]) === 'object') {
      store[key] = JSON.stringify(store[key]);
    }

    if (store[key]) {
      fd[key] = store[key];
    }
  });
  return fd;
};
/**
 * Starts the multi-part upload flow (/multipart/start)
 * @private
 * @param file    Valid File instance
 * @param config  Upload config
 * @returns {Promise}
 */

var start = function start(_a) {
  var config = _a.config,
      file = _a.file;
  var fields = {
    apikey: config.apikey,
    filename: getName(file, config),
    mimetype: config.mimetype || file.type || 'application/octet-stream',
    size: file.size
  }; // Security

  if (config.policy && config.signature) {
    fields.policy = config.policy;
    fields.signature = config.signature;
  } // Intelligent Ingestion


  if (config.intelligent) {
    fields.multipart = true;
  }

  var formData = getFormData(fields, config);
  return requestWithSource('post', config.host + "/multipart/start").timeout(config.timeout).field(formData);
};
/**
 * Gets the S3 upload params for current part (/multipart/upload)
 * @private
 * @param startParams   Parameters returned from start call
 * @param partNumber    Current part number (1 - 10000)
 * @param size          Size of current part in bytes
 * @param md5           MD5 hash of part
 * @param config        Upload config
 * @param offset        Current offset if chunking a part.
 */

var getS3PartData = function getS3PartData(part, _a) {
  var config = _a.config,
      params = _a.params;
  /* istanbul ignore next */

  var host = getHost(config.host) || getLocationURL(params.location_url);
  var locationRegion = params.location_region;

  var fields = _assign({
    apikey: config.apikey,
    part: part.number + 1,
    size: part.size,
    md5: part.md5
  }, params); // Intelligent Ingestion


  if (part.offset !== undefined) {
    fields.multipart = true;
    fields.offset = part.offset === 0 ? '0' : part.offset;
  }

  var formData = getFormData(fields, config);
  var req = requestWithSource('post', host + "/multipart/upload");
  /* istanbul ignore next */

  if (locationRegion) {
    req.set('Filestack-Upload-Region', locationRegion);
  }

  req.timeout(config.timeout);
  req.field(formData);
  return new Promise(function (resolve, reject) {
    req.end(function (err, res) {
      if (err) return reject(err);
      return resolve(res);
    });
  });
};
/**
 * Uploads bytes directly to S3 with HTTP PUT
 * @private
 * @param part        ArrayBuffer with part data
 * @param params      Params for this part returned by getS3PartData response
 * @param onProgress  A function to be called on progress event for this part
 * @param config
 */

var uploadToS3 = function uploadToS3(part, params, onProgress, cfg) {
  /* istanbul ignore next */
  var host = getHost(cfg.host + "/fakeS3") || params.url;
  var timeout = cfg.timeout || part.byteLength / 100; // console.log(part.byteLength );

  var req = client_3(host).set(params.headers).timeout(timeout).send(part); // Don't call progress handler if user didn't specify a callback

  if (onProgress) {
    return req.on('progress', onProgress);
  }

  return req;
};
/**
 * Convert array of Etags into format for /multipart/complete call
 * @private
 * @param etags     Array of Etag strings
 */

var formatETags = function formatETags(etags) {
  return etags.map(function (tag, idx) {
    return idx + 1 + ":" + tag;
  }).join(';');
};
/**
 * Completes upload flow (/multipart/complete)
 * @private
 * @param file          File being uploaded
 * @param etags         An array of etags from each S3 part
 * @param startParams   Parameters returned from start call
 * @param config        Upload config
 */


var complete = function complete(etags, _a) {
  var config = _a.config,
      file = _a.file,
      params = _a.params;
  /* istanbul ignore next */

  var host = getHost(config.host) || getLocationURL(params.location_url);
  var locationRegion = params.location_region;

  var fields = _assign({
    apikey: config.apikey,
    size: file.size,
    filename: getName(file, config),
    mimetype: config.mimetype || file.type || 'application/octet-stream',
    parts: formatETags(etags)
  }, params); // Intelligent Ingestion


  if (config.intelligent) {
    fields.multipart = true;
    delete fields.parts;
  } // Security


  if (config.policy && config.signature) {
    fields.policy = config.policy;
    fields.signature = config.signature;
  }

  var formData = getFormData(fields, config);
  var req = requestWithSource('post', host + "/multipart/complete");
  /* istanbul ignore next */

  if (locationRegion) {
    req.set('Filestack-Upload-Region', locationRegion);
  }

  req.timeout(config.timeout);
  return req.field(formData);
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _this = undefined;
/**
 * Slice a part into smaller chunks
 * @private
 * @param part  Part buffer to slice.
 * @param size  Size of slices.
 * @returns     List of chunks.
 */

var slicePartIntoChunks = function slicePartIntoChunks(part, size) {
  var offset = 0;
  var chunks = [];

  while (offset < part.size) {
    var end = Math.min(offset + size, part.size);
    var buf = part.buffer.slice(offset, end);
    var chunk = {
      buffer: buf,
      offset: offset,
      size: buf.byteLength,
      number: part.number,
      md5: calcMD5(buf)
    };
    chunks.push(chunk);
    offset += size;
  }

  return chunks;
};
/**
 * Get chunk (of part) metadata and PUT chunk to S3
 * @private
 * @param chunk Chunk object, has offset information
 * @param startParams Parameters returned from start call
 * @param config Upload config
 * @returns {Promise}
 */

var uploadChunk = function uploadChunk(chunk, ctx) {
  return __awaiter(_this, void 0, void 0, function () {
    var s3Data, onProgress;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , getS3PartData(chunk, ctx)];

        case 1:
          s3Data = _a.sent().body;

          if (ctx.config.onProgress) {
            /* istanbul ignore next */
            onProgress = throttle(function (evt) {
              /* istanbul ignore next */
              if (evt.loaded > chunk.loaded) {
                chunk.loaded = evt.loaded;
              }
            }, ctx.config.progressInterval);
          }

          chunk.request = uploadToS3(chunk.buffer, s3Data, onProgress, ctx.config);
          return [4
          /*yield*/
          , chunk.request];

        case 2:
          _a.sent();

          chunk.loaded = chunk.size;
          return [2
          /*return*/
          , chunk.request];
      }
    });
  });
};
/**
 * Commits single part (/commit) for intelligent ingestion (only called after all chunks have been uploaded)
 * @private
 * @param file        File being uploaded
 * @param part        Part object
 * @param startParams Parameters returned from start call
 * @param config      Upload config
 * @returns {Promise}
 */

var commitPart = function commitPart(part, ctx) {
  var cfg = ctx.config;
  /* istanbul ignore next */

  var host = getHost(cfg.host) || getLocationURL(ctx.params.location_url);

  var fields = _assign({
    apikey: cfg.apikey,
    part: part.number + 1,
    size: ctx.file.size
  }, ctx.params);

  var formData = getFormData(fields, cfg);
  return requestWithSource('post', host + "/multipart/commit").timeout(cfg.timeout).field(formData);
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _this$1 = undefined;
/**
 * @private
 */

var MIN_CHUNK_SIZE = 32 * 1024;
/**
 * @private
 */

var statuses = {
  INIT: "init"
  /* INIT */
  ,
  RUNNING: "running"
  /* RUNNING */
  ,
  DONE: "done"
  /* DONE */
  ,
  FAILED: "failed"
  /* FAILED */
  ,
  PAUSED: "paused"
  /* PAUSED */

};
/**
 * Returns a Promise based on the flow state
 * If the flow is paused it will return a Promise that resolves when resumed
 * If the flow failed it will resolve harmlessly
 *
 * @private
 * @param func  function that returns a Promise
 */

var flowControl = function flowControl(ctx, func) {
  // console.log(ctx.state);
  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (ctx.state.status === statuses.FAILED) {
      return Promise.resolve();
    }

    return new Promise(function (resolve) {
      var check = function check() {
        if (ctx.state.status === statuses.PAUSED) {
          setTimeout(function () {
            return check();
          }, 100);
        } else {
          resolve(func.apply(void 0, args));
        }
      };

      check();
    });
  };
};
/**
 *
 * @private
 * @param num
 * @param ctx
 */


var makePart = function makePart(num, ctx) {
  return {
    buffer: null,
    chunks: [],
    chunkSize: ctx.config.intelligentChunkSize ? ctx.config.intelligentChunkSize : isMobile() ? 1 * 1024 * 1024 : 8 * 1024 * 1024,
    intelligentOverride: false,
    loaded: 0,
    number: num,
    request: null,
    size: 0
  };
};
/**
 *
 * @private
 * @param part
 * @param ctx
 */


var uploadPart = function uploadPart(part, ctx) {
  return __awaiter(_this$1, void 0, void 0, function () {
    var cfg, goChunk, s3Data, onProgress;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          cfg = ctx.config;
          if (!(cfg.intelligent === true || part.intelligentOverride)) return [3
          /*break*/
          , 2];
          goChunk = flowControl(ctx, function (chunk) {
            return uploadChunk(chunk, ctx);
          });
          part.chunks = slicePartIntoChunks(part, part.chunkSize);
          return [4
          /*yield*/
          , Promise.all(part.chunks.map(throat$1(cfg.concurrency, goChunk)))];

        case 1:
          _a.sent();

          return [2
          /*return*/
          , commitPart(part, ctx)];

        case 2:
          return [4
          /*yield*/
          , getS3PartData(part, ctx)];

        case 3:
          s3Data = _a.sent().body;

          if (cfg.onProgress) {
            /* istanbul ignore next */
            onProgress = throttle(function (evt) {
              /* istanbul ignore next */
              if (evt.loaded > part.loaded) {
                part.loaded = evt.loaded;
              }
            }, cfg.progressInterval);
          }

          part.request = uploadToS3(part.buffer, s3Data, onProgress, cfg);
          return [2
          /*return*/
          , part.request];
      }
    });
  });
};
/**
 * Clean up array buffers in memory
 * Because promises aren't streams
 * @private
 */


var gc = function gc(part) {
  part.buffer = undefined;
  part.request = undefined;

  if (part.chunks && part.chunks.length) {
    part.chunks.forEach(gc);
  }
};
/**
 * Helpers to calculate total progress of file upload in bytes and percent
 * @private
 */


var sumBytes = function sumBytes(bytes) {
  return bytes.reduce(function (a, b) {
    return a + b;
  }, 0);
};
/**
 *
 * @private
 * @param bytes
 * @param file
 */


var percentOfFile = function percentOfFile(bytes, file) {
  return Math.round(bytes / file.size * 100);
};
/**
 *
 * @private
 * @param param0
 */


var getProgress = function getProgress(_a) {
  var config = _a.config,
      state = _a.state,
      file = _a.file;
  var parts = Object.keys(state.parts).map(function (k) {
    return state.parts[k];
  });
  var partsLoaded = parts.map(function (p) {
    return p.loaded;
  });
  var chunksLoaded = parts.map(function (p) {
    return p.chunks;
  }).reduce(function (a, b) {
    return a.concat(b);
  }, []).map(function (c) {
    return c.loaded;
  }).filter(function (n) {
    return n;
  });
  var loaded = partsLoaded;

  if (config.intelligent === true) {
    loaded = chunksLoaded;
  }

  if (config.intelligent === 'fallback') {
    var partsWithoutChunks = parts.filter(function (p) {
      return !p.intelligentOverride;
    }).map(function (p) {
      return p.loaded;
    });
    loaded = partsWithoutChunks.concat(chunksLoaded);
  }

  var totalBytes = sumBytes(loaded);
  var totalPercent = percentOfFile(totalBytes, file);
  var payload = {
    totalBytes: totalBytes,
    totalPercent: totalPercent
  };
  var prev = state.previousPayload || {};
  /* istanbul ignore next */

  if (totalPercent < prev.totalPercent) {
    payload.totalBytes = prev.totalBytes;
    payload.totalPercent = prev.totalPercent;
  }

  state.previousPayload = payload;
  return payload;
};
/**
 * Entry point for multi-part upload flow
 *
 * @private
 * @param file    File to upload
 * @param config  Upload config
 * @param token   Control token
 */


var uploadFile = function uploadFile(ctx, token) {
  return __awaiter(_this$1, void 0, void 0, function () {
    var file, state, config, startProgress, finishProgress, cancelAllRequests, failAndCleanUp, cancel, cancellable, retry, params, goPart, totalParts, allParts, partsFlow, etags, goComplete;

    var _this = this;

    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          file = ctx.file, state = ctx.state, config = ctx.config;

          startProgress = function startProgress(onProgress) {
            if (onProgress) {
              state.progressTick = setInterval(function () {
                var payload = getProgress(ctx);

                if (payload.totalPercent === 100) {
                  clearInterval(state.progressTick);
                }

                onProgress(payload);
              }, config.progressInterval);
            }
          };

          finishProgress = function finishProgress(onProgress) {
            if (onProgress) {
              onProgress({
                totalBytes: file.size,
                totalPercent: 100
              });
              clearInterval(state.progressTick);
            }
          };
          /**
           * Will pause progress tick and set state
           */


          token.pause = function () {
            if (state.status === statuses.RUNNING) {
              state.status = statuses.PAUSED;
              clearInterval(state.progressTick);
            }
          };
          /**
           * Will resume flow and start progress tick again
           */


          token.resume = function () {
            if (state.status === statuses.PAUSED) {
              state.status = statuses.RUNNING;
              startProgress(config.onProgress);
            }
          };

          cancelAllRequests = function cancelAllRequests() {
            var parts = Object.keys(state.parts).map(function (k) {
              return state.parts[k];
            });
            parts.forEach(function (part) {
              if (part.request) part.request.abort();
              part.chunks.forEach(function (chunk) {
                if (chunk.request) chunk.request.abort();
              });
              gc(part);
            });
          };

          failAndCleanUp = function failAndCleanUp() {
            cancelAllRequests();
            clearInterval(state.progressTick);
            state.status = statuses.FAILED;

            if (file.buffer) {
              file.buffer = null;
            }
          };

          cancel = new Promise(function (_, reject) {
            token.cancel = function () {
              if (state.status === statuses.RUNNING || state.status === statuses.PAUSED) {
                failAndCleanUp();
                reject(new Error('Upload cancelled'));
              }
            };
          });

          cancellable = function cancellable(p) {
            return Promise.race([cancel, p]);
          };

          retry = function retry(location, func, err, part) {
            var attempt = state.retries[location] || 0; // console.error(`Cannot upload file ${err}, Method: ${err.method}, Status: ${err.status}, Timeout: ${err.timeout}`);

            var waitTime = Math.min(config.retryMaxTime, Math.pow(config.retryFactor, attempt) * 1000);
            var promise = new Promise(function (resolve, reject) {
              if (attempt === config.retry || err.status === 400 && err.method !== 'PUT' || err.status === 401 || err.status === 403 || err.status === 404 || part && part.chunkSize <= MIN_CHUNK_SIZE) {
                failAndCleanUp();
                return reject(err);
              }

              var exec = function exec() {
                return setTimeout(function () {
                  return resolve(func());
                }, waitTime);
              }; // FII S3 retry (resize chunk)


              if (part && (config.intelligent || part.intelligentOverride) && ( // Browser S3 network error
              err.method === 'PUT' && (err.crossDomain || err.status === 400) || // if connection is aborted we dont have request method
              err.code === 'ECONNABORTED' && err.timeout // Node S3 network error
              || err.code === 'ECONNRESET' || err.code === 'ETIMEDOUT')) {
                part.chunkSize /= 2;

                if (config.onRetry) {
                  config.onRetry({
                    location: location,
                    parts: state.parts,
                    filename: getName(file, config),
                    chunkSize: part.chunkSize,
                    attempt: undefined
                  });
                }

                if (config.intelligent === 'fallback') {
                  part.intelligentOverride = true;
                }

                return exec();
              } // Normal retry (with retry limit)


              attempt += 1;
              state.retries[location] = attempt;

              if (config.onRetry) {
                config.onRetry({
                  location: location,
                  parts: state.parts,
                  filename: getName(file, config),
                  attempt: attempt
                });
              }

              return exec();
            });
            return cancellable(promise);
          }; // Here we go


          state.status = statuses.RUNNING;
          return [4
          /*yield*/
          , cancellable(start(ctx))];

        case 1:
          params = _a.sent().body;
          ctx.params = params;
          goPart = flowControl(ctx, function (partObj) {
            return __awaiter(_this, void 0, void 0, function () {
              var part, location, _a, etag, status_1, err, err_1;

              return __generator(this, function (_b) {
                switch (_b.label) {
                  case 0:
                    return [4
                    /*yield*/
                    , getPart(partObj, ctx)];

                  case 1:
                    part = _b.sent();

                    if (part.size === 0) {
                      return [2
                      /*return*/
                      , Promise.reject(new Error('Upload aborted due to empty chunk.'))];
                    }

                    location = "upload part " + (part.number + 1);
                    state.parts[part.number] = part;
                    _b.label = 2;

                  case 2:
                    _b.trys.push([2, 4,, 5]);

                    return [4
                    /*yield*/
                    , uploadPart(part, ctx)];

                  case 3:
                    _a = _b.sent(), etag = _a.headers.etag, status_1 = _a.status;

                    if (status_1 === 206) {
                      err = new Error('Intelligent part failed to commit');
                      return [2
                      /*return*/
                      , retry(location, function () {
                        return goPart(part);
                      }, err, part)];
                    }

                    part.loaded = part.size;
                    gc(part);

                    if (!config.intelligent && !etag) {
                      return [2
                      /*return*/
                      , Promise.reject(new Error('Response from S3 is missing ETag header.'))];
                    }

                    return [2
                    /*return*/
                    , etag];

                  case 4:
                    err_1 = _b.sent();
                    return [2
                    /*return*/
                    , retry(location, function () {
                      return goPart(part);
                    }, err_1, part)];

                  case 5:
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          });
          totalParts = Math.ceil(file.size / config.partSize);
          allParts = range(0, totalParts).map(function (p) {
            return makePart(p, ctx);
          });
          partsFlow = Promise.all(allParts.map(throat$1(config.concurrency, goPart)));
          startProgress(config.onProgress);
          return [4
          /*yield*/
          , cancellable(partsFlow)];

        case 2:
          etags = _a.sent();
          goComplete = flowControl(ctx, function () {
            return __awaiter(_this, void 0, void 0, function () {
              var res, err_2;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    _a.trys.push([0, 2,, 3]);

                    return [4
                    /*yield*/
                    , complete(etags, ctx)];

                  case 1:
                    res = _a.sent();

                    if (res.status === 202) {
                      return [2
                      /*return*/
                      , new Promise(function (resolve) {
                        setTimeout(function () {
                          return resolve(goComplete());
                        }, 1000);
                      })];
                    }

                    state.status = statuses.DONE;
                    finishProgress(config.onProgress);

                    if (file.buffer) {
                      file.buffer = null;
                    }

                    if (res.body && res.body.error && res.body.error.text) {
                      return [2
                      /*return*/
                      , Promise.reject(new Error("File upload error: " + res.body.error.text))];
                    }

                    return [2
                    /*return*/
                    , res.body];

                  case 2:
                    err_2 = _a.sent();
                    return [2
                    /*return*/
                    , retry('complete', goComplete, err_2)];

                  case 3:
                    return [2
                    /*return*/
                    ];
                }
              });
            });
          });
          return [2
          /*return*/
          , cancellable(goComplete())];
      }
    });
  });
};
/**
 * User facing method to upload a single file
 * @private
 * @param session Session object that contains apikey
 * @param file A valid file path (in Node). In browsers a File, Blob, or base64 encoded string
 * @param options Configures the uploader
 * @param storeOptions Storage options for the backend
 * @param token Control token
 */


var upload = function upload(session, fileOrString, options, storeOptions, token, security) {
  if (options === void 0) {
    options = {};
  }

  if (storeOptions === void 0) {
    storeOptions = {};
  }

  if (token === void 0) {
    token = {};
  }

  return getFile(fileOrString).then(function (file) {
    if (file.size !== undefined && file.size === 0 || file.length === 0) {
      return Promise.reject(new Error('file has a size of 0.'));
    }

    var allowedOptions = [{
      name: 'host',
      type: tcombValidation_5
    }, {
      name: 'path',
      type: tcombValidation_1
    }, {
      name: 'mimetype',
      type: tcombValidation_5
    }, {
      name: 'partSize',
      type: tcombValidation_4
    }, {
      name: 'concurrency',
      type: tcombValidation_7(tcombValidation_3, function (n) {
        return n > 0;
      })
    }, {
      name: 'onProgress',
      type: tcombValidation_2
    }, {
      name: 'progressInterval',
      type: tcombValidation_3
    }, {
      name: 'onRetry',
      type: tcombValidation_2
    }, {
      name: 'retry',
      type: tcombValidation_3
    }, {
      name: 'retryFactor',
      type: tcombValidation_3
    }, {
      name: 'retryMaxTime',
      type: tcombValidation_3
    }, {
      name: 'timeout',
      type: tcombValidation_3
    }, {
      name: 'intelligent',
      type: tcombValidation_8([tcombValidation_1, tcombValidation_6.of('fallback')])
    }, {
      name: 'intelligentChunkSize',
      type: tcombValidation_4
    }];
    var wString = tcombValidation_5;
    var wStruct = tcombValidation_10({
      id: tcombValidation_5
    });
    var workflowsUniton = tcombValidation_8([wString, wStruct]);

    workflowsUniton.dispatch = function (x) {
      return x.id ? wStruct : wString;
    };

    var allowedStoreOptions = [{
      name: 'location',
      type: tcombValidation_6.of('s3 gcs rackspace azure dropbox')
    }, {
      name: 'region',
      type: tcombValidation_5
    }, {
      name: 'path',
      type: tcombValidation_5
    }, {
      name: 'container',
      type: tcombValidation_5
    }, {
      name: 'filename',
      type: tcombValidation_5
    }, {
      name: 'access',
      type: tcombValidation_6.of('public private')
    }, {
      name: 'workflows',
      type: tcombValidation_13(workflowsUniton)
    }]; // Throw if any options are invalid

    checkOptions('upload (options)', allowedOptions, options);
    checkOptions('upload (storeOptions)', allowedStoreOptions, storeOptions); // Custom filename option

    var storeOpts = _assign({}, storeOptions);

    var opts = _assign({}, options);

    var customName;

    if (storeOpts.filename) {
      customName = storeOpts.filename;
    } else if (file.name === undefined) {
      // Blobs and buffers don't have names, Files do. Give a placeholder name for blobs.
      if (file.type) {
        var ext = file.type.split('/').pop();
        customName = "untitled." + ext;
      } else {
        customName = 'untitled';
      }
    } // Default location param


    if (storeOpts.location === undefined) {
      storeOpts.location = 's3';
    } // Intelligent Ingestion requires part size of exactly 8MB


    if (opts.intelligent) {
      opts.partSize = 8 * 1024 * 1024;
    } // Set security if on session or override


    var policy = security && security.policy || session.policy;
    var signature = security && security.signature || session.signature; // Configurables

    var config = _assign({
      host: session.urls.uploadApiUrl,
      apikey: session.apikey,
      policy: policy,
      signature: signature,
      partSize: 6 * 1024 * 1024,
      concurrency: 3,
      progressInterval: 1000,
      retry: 10,
      retryFactor: 2,
      retryMaxTime: 15000,
      customName: customName,
      mimetype: options.mimetype,
      store: {
        workflows: storeOpts.workflows,
        store_location: storeOpts.location,
        store_region: storeOpts.region,
        store_container: storeOpts.container,
        store_path: storeOpts.path,
        store_access: storeOpts.access
      },
      timeout: 120000
    }, opts);

    var initialState = {
      parts: {},
      progressTick: null,
      previousPayload: null,
      retries: {},
      status: statuses.INIT
    };
    var context = {
      file: file,
      config: config,
      state: initialState
    };
    return uploadFile(context, token);
  });
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns file preview url
 *
 * @private
 * @param session
 * @param handle
 * @param opts
 * @param security
 */

var getUrl = function getUrl(session, handle, opts, security) {
  var options = _assign({}, opts);

  var policy = security && security.policy || session.policy;
  var signature = security && security.signature || session.signature;
  var hasSecurity = signature && policy;
  var baseUrl = [session.urls.cdnUrl];
  var css = options.css && encodeURIComponent("\"" + options.css + "\"");
  var previewTask = css ? "preview=css:" + css : 'preview'; // @todo move to utils?

  if (handle.indexOf('src:') !== -1) {
    baseUrl.push(session.apikey + "/" + previewTask);
  } else {
    baseUrl.push(previewTask);
  }

  if (hasSecurity) {
    baseUrl.push("security=policy:" + policy + ",signature:" + signature);
  }

  baseUrl.push(handle);
  return baseUrl.join('/');
};
/**
 * Appends image preview into page
 *
 * @private
 * @param session
 * @param handle
 * @param opts
 */

var preview = function preview(session, handle, opts) {
  if (!handle || typeof handle !== 'string') {
    throw new Error('A valid Filestack handle or storage alias is required for preview');
  }

  var allowed = [{
    name: 'id',
    type: tcombValidation_5
  }, {
    name: 'css',
    type: tcombValidation_5
  }];
  checkOptions('preview', allowed, opts);
  var options = removeEmpty(opts);
  var url = getUrl(session, handle, options);

  if (options.id) {
    var id = options.id;
    var iframe = document.createElement('iframe');
    var domElement = document.getElementById(id);
    iframe.src = url;
    iframe.width = '100%';
    iframe.height = '100%';

    if (!domElement) {
      throw new Error("DOM Element with id \"" + id + "\" not found.");
    }

    return domElement.appendChild(iframe);
  }

  return window.open(url, handle);
};

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @private
 */

var PICKER_KEY = '__fs_picker_token';
/**
 * @private
 */

var CloudClient =
/** @class */
function () {
  function CloudClient(session, options) {
    this.cache = false;
    this.session = session;
    this.cloudApiUrl = session.urls.cloudApiUrl;

    if (options && options.sessionCache) {
      this.cache = options.sessionCache;
    }
  }

  Object.defineProperty(CloudClient.prototype, "token", {
    get: function get() {
      if (this.cache) {
        var token = localStorage.getItem(PICKER_KEY);
        if (token) return token;
      }

      return this._token;
    },
    set: function set(key) {
      if (this.cache) {
        localStorage.setItem(PICKER_KEY, key);
      }

      this._token = key;
    },
    enumerable: true,
    configurable: true
  });

  CloudClient.prototype.prefetch = function () {
    var params = {
      apikey: this.session.apikey
    };
    return requestWithSource('get', this.cloudApiUrl + "/prefetch").query(params).then(function (res) {
      return res.body;
    });
  };

  CloudClient.prototype.list = function (clouds, token) {
    var _this = this;

    if (token === void 0) {
      token = {};
    }

    var payload = {
      apikey: this.session.apikey,
      clouds: clouds,
      flow: 'web',
      token: this.token
    };

    if (this.session.policy && this.session.signature) {
      payload.policy = this.session.policy;
      payload.signature = this.session.signature;
    }

    return new Promise(function (resolve, reject) {
      var req = requestWithSource('post', _this.cloudApiUrl + "/folder/list").send(payload).end(function (err, response) {
        if (err) {
          reject(err);
        } else {
          if (response.body && response.body.token) {
            _this.token = response.body.token;
          }

          resolve(response.body);
        }
      });

      token.cancel = function () {
        req.abort();
        reject(new Error('Cancelled'));
      };
    });
  };

  CloudClient.prototype.store = function (name, path, options, customSource, token) {
    var _this = this;

    if (options === void 0) {
      options = {};
    }

    if (customSource === void 0) {
      customSource = {};
    }

    if (token === void 0) {
      token = {};
    }

    var _a; // Default to S3


    if (options.location === undefined) options.location = 's3';
    var payload = {
      apikey: this.session.apikey,
      token: this.token,
      flow: 'web',
      clouds: (_a = {}, _a[name] = {
        path: path,
        store: removeEmpty(options)
      }, _a)
    };

    if (name === 'customsource' && customSource.customSourcePath) {
      payload.clouds.customsource.customSourcePath = customSource.customSourcePath;
    }

    if (name === 'customsource' && customSource.customSourceContainer) {
      payload.clouds.customsource.customSourceContainer = customSource.customSourceContainer;
    }

    if (this.session.policy && this.session.signature) {
      payload.policy = this.session.policy;
      payload.signature = this.session.signature;
    }

    return new Promise(function (resolve, reject) {
      var req = requestWithSource('post', _this.cloudApiUrl + "/store/").send(payload).end(function (err, response) {
        if (err) {
          reject(err);
        } else {
          if (response.body && response.body.token) {
            _this.token = response.body.token;
          }

          if (response.body && response.body[name]) {
            resolve(response.body[name]);
          } else {
            resolve(response.body);
          }
        }
      });

      token.cancel = function () {
        req.abort();
        reject(new Error('Cancelled'));
      };
    });
  };

  CloudClient.prototype.link = function (name, path, customSource, token) {
    var _this = this;

    if (customSource === void 0) {
      customSource = {};
    }

    if (token === void 0) {
      token = {};
    }

    var _a;

    var payload = {
      apikey: this.session.apikey,
      token: this.token,
      flow: 'web',
      clouds: (_a = {}, _a[name] = {
        path: path
      }, _a)
    };

    if (name === 'customsource' && customSource.customSourcePath) {
      payload.clouds.customsource.customSourcePath = customSource.customSourcePath;
    }

    if (name === 'customsource' && customSource.customSourceContainer) {
      payload.clouds.customsource.customSourceContainer = customSource.customSourceContainer;
    }

    if (this.session.policy && this.session.signature) {
      payload.policy = this.session.policy;
      payload.signature = this.session.signature;
    }

    return new Promise(function (resolve, reject) {
      var req = requestWithSource('post', _this.cloudApiUrl + "/link/").send(payload).end(function (err, response) {
        if (err) {
          reject(err);
        } else {
          if (response.body && response.body.token) {
            _this.token = response.body.token;
          }

          if (response.body[name]) {
            resolve(response.body[name]);
          } else {
            resolve(response.body);
          }
        }
      });

      token.cancel = function () {
        req.abort();
        reject(new Error('Cancelled'));
      };
    });
  };

  CloudClient.prototype.logout = function (name) {
    var _this = this;

    var _a;

    var payload = {
      apikey: this.session.apikey,
      flow: 'web',
      token: this.token
    };

    if (name) {
      payload.clouds = (_a = {}, _a[name] = {}, _a);
    } else {
      // No name means logout of ALL clouds. Clear local session.
      if (this.cache) {
        localStorage.removeItem(PICKER_KEY);
      }
    }

    return new Promise(function (resolve, reject) {
      requestWithSource('post', _this.cloudApiUrl + "/auth/logout/").send(payload).end(function (err, response) {
        if (err) {
          reject(err);
        } else {
          if (response.body && response.body.token) {
            _this.token = response.body.token;
          }

          resolve(response.body);
        }
      });
    });
  };

  CloudClient.prototype.metadata = function (url) {
    var _this = this;

    var payload = {
      apikey: this.session.apikey,
      url: url
    };

    if (this.session.policy && this.session.signature) {
      payload.policy = this.session.policy;
      payload.signature = this.session.signature;
    }

    return new Promise(function (resolve, reject) {
      requestWithSource('post', _this.cloudApiUrl + "/metadata").send(payload).end(function (err, response) {
        if (err) {
          reject(err);
        } else {
          resolve(response.body);
        }
      });
    });
  }; // OpenTok API Endpoints


  CloudClient.prototype.tokInit = function (type) {
    var _this = this;

    if (type !== 'video' && type !== 'audio') {
      throw new Error('Type must be one of video or audio.');
    }

    return new Promise(function (resolve, reject) {
      return requestWithSource('post', _this.cloudApiUrl + "/recording/" + type + "/init").end(function (err, response) {
        if (err) {
          reject(err);
        } else {
          resolve(response);
        }
      });
    });
  };

  CloudClient.prototype.tokStart = function (type, key, sessionId) {
    var _this = this;

    if (type !== 'video' && type !== 'audio') {
      throw new Error('Type must be one of video or audio.');
    }

    var payload = {
      apikey: key,
      session_id: sessionId
    };
    return new Promise(function (resolve, reject) {
      return requestWithSource('post', _this.cloudApiUrl + "/recording/" + type + "/start").send(payload).end(function (err, response) {
        if (err) {
          reject(err);
        } else {
          resolve(response);
        }
      });
    });
  };

  CloudClient.prototype.tokStop = function (type, key, sessionId, archiveId) {
    var _this = this;

    if (type !== 'video' && type !== 'audio') {
      throw new Error('Type must be one of video or audio.');
    }

    var payload = {
      apikey: key,
      session_id: sessionId,
      archive_id: archiveId
    };
    return new Promise(function (resolve, reject) {
      return requestWithSource('post', _this.cloudApiUrl + "/recording/" + type + "/stop").send(payload).end(function (err, response) {
        if (err) {
          reject(err);
        } else {
          resolve(response);
        }
      });
    });
  };

  return CloudClient;
}();

var _typeof$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
  return _typeof(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof(obj);
}; // -----------------------------------------------------------------------------
// Init


var initializeGlobalNamespace = function initializeGlobalNamespace() {
  var namespace = void 0;

  if ((typeof window === 'undefined' ? 'undefined' : _typeof$1(window)) === 'object') {
    namespace = window.filestackInternals;

    if (!namespace) {
      namespace = {};
      window.filestackInternals = namespace;
    }

    if (!namespace.loader) {
      namespace.loader = {
        modules: {}
      };
    }
  }

  return namespace;
};

var filestackInternals = initializeGlobalNamespace(); // -----------------------------------------------------------------------------
// Modules loading
// All modules share global "register", so different instances of loader can
// communicate which modules were already loaded and which not.

var modules = filestackInternals && filestackInternals.loader.modules;

var loadModule = function loadModule(url, moduleId) {
  var moduleDefinition = modules[url];

  if (!moduleDefinition) {
    modules[url] = {};
    moduleDefinition = modules[url];
  }

  if (moduleDefinition.instance) {
    return Promise.resolve(moduleDefinition.instance);
  }

  if (moduleDefinition.promise) {
    return moduleDefinition.promise;
  }

  var promise = new Promise(function (resolve, reject) {
    var embedScript = function embedScript() {
      moduleDefinition.resolvePromise = resolve;
      var script = document.createElement('script');
      script.src = url;
      script.onerror = reject;
      if (moduleId) script.id = moduleId;
      document.body.appendChild(script);
    };

    var checkIfDomReady = function checkIfDomReady() {
      if (document.readyState === 'complete') {
        embedScript();
      } else {
        setTimeout(checkIfDomReady, 50);
      }
    };

    checkIfDomReady();
  });
  moduleDefinition.promise = promise;
  return promise;
};

var knownModuleIds = {
  picker: '__filestack-picker-module'
};

/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var RotateDirection;

(function (RotateDirection) {
  RotateDirection["cw"] = "CW";
  RotateDirection["ccw"] = "CCW";
})(RotateDirection || (RotateDirection = {}));

var PickerDisplayMode;

(function (PickerDisplayMode) {
  PickerDisplayMode["inline"] = "inline";
  PickerDisplayMode["overlay"] = "overlay";
  PickerDisplayMode["dropPane"] = "dropPane";
})(PickerDisplayMode || (PickerDisplayMode = {}));
/**
 * @private
 * A synchronous-looking wrapper for loading the picker and calling its methods.
 * This is currently needed because the picker module is loaded asynchronously.
 * Eventually we should offer a bundle with the picker module included.
 */


var PickerLoader =
/** @class */
function () {
  function PickerLoader(client, options) {
    this._initialized = this.loadModule(client, options);
  }

  PickerLoader.prototype.open = function () {
    return __awaiter(this, void 0, void 0, function () {
      var picker;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this._initialized];

          case 1:
            picker = _a.sent();
            return [4
            /*yield*/
            , picker.open()];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  PickerLoader.prototype.crop = function (files) {
    return __awaiter(this, void 0, void 0, function () {
      var picker;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this._initialized];

          case 1:
            picker = _a.sent();
            return [4
            /*yield*/
            , picker.crop(files)];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  PickerLoader.prototype.close = function () {
    return __awaiter(this, void 0, void 0, function () {
      var picker;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this._initialized];

          case 1:
            picker = _a.sent();
            return [4
            /*yield*/
            , picker.close()];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  PickerLoader.prototype.cancel = function () {
    return __awaiter(this, void 0, void 0, function () {
      var picker;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this._initialized];

          case 1:
            picker = _a.sent();
            return [4
            /*yield*/
            , picker.cancel()];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  PickerLoader.prototype.loadModule = function (client, options) {
    return __awaiter(this, void 0, void 0, function () {
      var url, Picker;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            url = client.session.urls.pickerUrl;
            return [4
            /*yield*/
            , loadModule(url, knownModuleIds.picker)];

          case 1:
            Picker = _a.sent();
            return [2
            /*return*/
            , new Picker(client, options)];
        }
      });
    });
  };

  return PickerLoader;
}();
/**
 * Loads and creates picker instance
 *
 * @private
 * @param client
 * @param options
 */


var picker = function picker(client, options) {
  return new PickerLoader(client, options);
};

/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The Filestack client, the entry point for all public methods. Encapsulates session information.
 *
 * ### Example
 * ```js
 * // ES module
 * import * as filestack from 'filestack-js';
 * const client = filestack.init('apikey');
 * ```
 *
 * ```js
 * // UMD module in browser
 * <script src="https://static.filestackapi.com/filestack-js/1.x.x/filestack.min.js"></script>
 * const client = filestack.init('apikey');
 * ```
 */

var Client =
/** @class */
function () {
  function Client(apikey, options) {
    var _this = this;

    if (!apikey || typeof apikey !== 'string' || apikey.length === 0) {
      throw new Error('An apikey is required to initialize the Filestack client');
    }

    var urls = config.urls;
    this.session = {
      apikey: apikey,
      urls: urls
    };

    if (options) {
      var cname_1 = options.cname,
          security = options.security;

      if (security && !(security.policy && security.signature)) {
        throw new Error('Both policy and signature are required for client security');
      }

      if (security && security.policy && security.signature) {
        this.session.policy = security.policy;
        this.session.signature = security.signature;
      }

      if (cname_1) {
        this.session.urls = resolveHost(this.session.urls, cname_1);
        var hosts_1 = /filestackapi.com|filestackcontent.com/i;
        this.session.cname = cname_1;
        Object.keys(urls).forEach(function (key) {
          _this.session.urls[key] = urls[key].replace(hosts_1, cname_1);
        });
      }
    }

    this.cloud = new CloudClient(this.session, options);
  }
  /**
   * Clear all current cloud sessions in the picker.
   * Optionally pass a cloud source name to only log out of that cloud source.
   * This essentially clears the OAuth authorization codes from the Filestack session.
   * @param name Optional cloud source name.
   */


  Client.prototype.logout = function (name) {
    return this.cloud.logout(name);
  };
  /**
   * Retrieve detailed data of stored files.
   *
   * ### Example
   *
   * ```js
   * client
   *   .metadata('DCL5K46FS3OIxb5iuKby')
   *   .then((res) => {
   *     console.log(res);
   *   })
   *   .catch((err) => {
   *     console.log(err);
   *   }));
   * ```
   * @see [File API - Metadata](https://www.filestack.com/docs/api/file#metadata).
   * @param handle Valid Filestack handle.
   * @param options Metadata fields to enable on response.
   * @param security Optional security override.
   */


  Client.prototype.metadata = function (handle, options, security) {
    /* istanbul ignore next */
    return metadata(this.session, handle, options, security);
  };
  /**
   * Construct a new picker instance.
   */


  Client.prototype.picker = function (options) {
    /* istanbul ignore next */
    return picker(this, options);
  };
  /**
   * Used for viewing files via Filestack handles or storage aliases, __requires Document Viewer addon to your Filestack application__.
   * Opens document viewer in new window if id option is not provided.
   *
   * ### Example
   *
   * ```js
   * // <div id="preview"></div>
   *
   * client.preview('DCL5K46FS3OIxb5iuKby', { id: 'preview' });
   * ```
   * @param handle Valid Filestack handle.
   * @param options Preview options
   */


  Client.prototype.preview = function (handle, options) {
    /* istanbul ignore next */
    return preview(this.session, handle, options);
  };
  /**
   * Remove a file from storage and the Filestack system.
   *
   * __Requires a valid security policy and signature__. The policy and signature will be pulled from the client session, or it can be overridden with the security parameter.
   *
   * ### Example
   *
   * ```js
   * client
   *   .remove('DCL5K46FS3OIxb5iuKby')
   *   .then((res) => {
   *     console.log(res);
   *   })
   *   .catch((err) => {
   *     console.log(err);
   *   }));
   * ```
   * @see [File API - Delete](https://www.filestack.com/docs/api/file#delete)
   * @param handle Valid Filestack handle.
   * @param security Optional security override.
   */


  Client.prototype.remove = function (handle, security) {
    /* istanbul ignore next */
    return remove(this.session, handle, false, security);
  };
  /**
   * Remove a file **only** from the Filestack system. The file remains in storage.
   *
   * __Requires a valid security policy and signature__. The policy and signature will be pulled from the client session, or it can be overridden with the security parameter.
   *
   * ### Example
   *
   * ```js
   * client
   *   .removeMetadata('DCL5K46FS3OIxb5iuKby')
   *   .then((res) => {
   *     console.log(res);
   *   })
   *   .catch((err) => {
   *     console.log(err);
   *   }));
   * ```
   * @see [File API - Delete](https://www.filestack.com/docs/api/file#delete)
   * @param handle Valid Filestack handle.
   * @param security Optional security override.
   */


  Client.prototype.removeMetadata = function (handle, security) {
    /* istanbul ignore next */
    return remove(this.session, handle, true, security);
  };
  /**
   * Store a file from its URL.
   *
   * ### Example
   *
   * ```js
   * client
   *   .storeURL('https://d1wtqaffaaj63z.cloudfront.net/images/NY_199_E_of_Hammertown_2014.jpg')
   *   .then(res => console.log(res));
   * ```
   * @see [File API - Store](https://www.filestack.com/docs/api/file#store)
   * @param url       Valid URL to a file.
   * @param options   Configure file storage.
   * @param token     Optional control token to call .cancel()
   * @param security  Optional security override.
   */


  Client.prototype.storeURL = function (url, options, token, security) {
    /* istanbul ignore next */
    return storeURL(this.session, url, options, token, security);
  };
  /**
   * Access files via their Filestack handles.
   *
   * If head option is provided - request headers are returned in promise
   * If metadata option is provided - metadata object is returned in promise
   * Otherwise file blob is returned
   * Metadata and head options cannot be mixed
   *
   * ### Example
   *
   * ```js
   * client.retrieve('fileHandle', {
   *  metadata: true,
   * }).then((response) => {
   *  console.log(response);
   * }).catch((err) => {
   *  console.error(err);
   * })
   * ```
   *
   * @see [File API - Download](https://www.filestack.com/docs/api/file#download)
   * @param handle    Valid file handle
   * @param options   RetrieveOptions
   * @param security  Optional security override.
   * @throws          Error
   */


  Client.prototype.retrieve = function (handle, options, security) {
    /* istanbul ignore next */
    return retrieve(this.session, handle, options, security);
  };
  /**
   * Interface to the Filestack [Processing API](https://www.filestack.com/docs/api/processing).
   * Convert a URL, handle, or storage alias to another URL which links to the transformed file.
   * You can optionally store the returned URL with client.storeURL.
   *
   * Transform params can be provided in camelCase or snakeCase style ie: partial_pixelate or partialPixelate
   *
   * ### Example
   *
   * ```js
   * const transformedUrl = client.transform(url, {
   *   crop: {
   *     dim: [x, y, width, height],
   *   },
   *   vignette: {
   *     blurmode: 'gaussian',
   *     amount: 50,
   *   },
   *   flip: true,
   *   partial_pixelate: {
   *     objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
   *   },
   * };
   *
   * // optionally store the new URL
   * client.storeURL(transformedUrl).then(res => console.log(res));
   * ```
   * @see [Filestack Processing API](https://www.filestack.com/docs/api/processing)
   * @param url     Single or multiple valid URLs (http(s)://), file handles, or storage aliases (src://) to an image.
   * @param options Transformations are applied in the order specified by this object.
   * @param b64     Use new more safe format for generating transforms url (default=false) Note: If there will be any issues with url please test it with enabled b64 support
   * @returns       A new URL that points to the transformed resource.
   */


  Client.prototype.transform = function (url, options, b64) {
    if (b64 === void 0) {
      b64 = false;
    }
    /* istanbul ignore next */


    return transform(this.session, url, options, b64);
  };
  /**
   * Initiates a multi-part upload flow. Use this for Filestack CIN and FII uploads.
   *
   * In Node runtimes the file argument is treated as a file path.
   * Uploading from a Node buffer is not yet implemented.
   *
   * ### Example
   *
   * ```js
   * const token = {};
   * const onRetry = (obj) => {
   *   console.log(`Retrying ${obj.location} for ${obj.filename}. Attempt ${obj.attempt} of 10.`);
   * };
   *
   * client.upload(file, { onRetry }, { filename: 'foobar.jpg' }, token)
   *   .then(res => console.log(res));
   *
   * token.pause();  // Pause flow
   * token.resume(); // Resume flow
   * token.cancel(); // Cancel flow (rejects)
   * ```
   * @param file           Must be a valid [File](https://developer.mozilla.org/en-US/docs/Web/API/File), Blob, base64 encoded string, or file path in Node.
   * @param uploadOptions  Uploader options.
   * @param storeOptions   Storage options.
   * @param token          A control token that can be used to call cancel(), pause(), and resume().
   * @param security       Optional security policy and signature override.
   *
   * @returns {Promise}
   */


  Client.prototype.upload = function (file, options, storeOptions, token, security) {
    /* istanbul ignore next */
    return upload(this.session, file, options, storeOptions, token, security);
  };

  return Client;
}();

/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Initialize client with given config
 *
 * @param apikey
 * @param options
 */

var init$1 = function init(apikey, options) {
  return new Client(apikey, options);
};
/**
 * filestack-js version. Interpolated at build time.
 */

var version$2 = '2.0.3';

export { init$1 as init, version$2 as version, TransformSchema, getSecurity, EAlignOptions, EAlignFacesOptions, EFitOptions, EBlurMode, EShapeType, ENoiseType, EStyleType, EColorspaceType, ECropfacesType, EVideoTypes, EUrlscreenshotAgent, EUrlscreenshotMode, EUrlscreenshotOrientation, EVideoLocations, EVideoAccess, EVideoAccessMode, transform, AlignOptions, AlignFacesOptions, FitOptions, BlurMode, ShapeType, NoiseType, StyleType, ColorspaceType, CropfacesType, VideoTypes, URLScreenshotAgent, URLScreenshotMode, URLScreenshotOrientation, Locations, VideoAccess, VideoAccessMode, Filelink };

//# sourceMappingURL=index.esm.js.map
